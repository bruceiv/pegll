
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"github.com/bruceiv/pegll/parser/symbols"
	"github.com/bruceiv/pegll/token"
)

type Label int

const(
	GoGLL0R0 Label = iota
	GoGLL0R1
	GoGLL0R2
	LexAlternates0R0
	LexAlternates0R1
	LexAlternates1R0
	LexAlternates1R1
	LexAlternates1R2
	LexAlternates1R3
	LexBracket0R0
	LexBracket0R1
	LexBracket1R0
	LexBracket1R1
	LexBracket2R0
	LexBracket2R1
	LexBracket3R0
	LexBracket3R1
	LexGroup0R0
	LexGroup0R1
	LexGroup0R2
	LexGroup0R3
	LexOneOrMore0R0
	LexOneOrMore0R1
	LexOneOrMore0R2
	LexOneOrMore0R3
	LexOptional0R0
	LexOptional0R1
	LexOptional0R2
	LexOptional0R3
	LexRule0R0
	LexRule0R1
	LexRule0R2
	LexRule0R3
	LexRule0R4
	LexRule1R0
	LexRule1R1
	LexRule1R2
	LexRule1R3
	LexRule1R4
	LexRule1R5
	LexSymbol0R0
	LexSymbol0R1
	LexSymbol1R0
	LexSymbol1R1
	LexSymbol1R2
	LexSymbol2R0
	LexSymbol2R1
	LexSymbol3R0
	LexSymbol3R1
	LexSymbol4R0
	LexSymbol4R1
	LexSymbol4R2
	LexSymbol5R0
	LexSymbol5R1
	LexZeroOrMore0R0
	LexZeroOrMore0R1
	LexZeroOrMore0R2
	LexZeroOrMore0R3
	OrderedAlternates0R0
	OrderedAlternates0R1
	OrderedAlternates1R0
	OrderedAlternates1R1
	OrderedAlternates1R2
	OrderedAlternates1R3
	Package0R0
	Package0R1
	Package0R2
	RegExp0R0
	RegExp0R1
	RegExp1R0
	RegExp1R1
	RegExp1R2
	Rule0R0
	Rule0R1
	Rule1R0
	Rule1R1
	Rules0R0
	Rules0R1
	Rules1R0
	Rules1R1
	Rules1R2
	SyntaxAlternate0R0
	SyntaxAlternate0R1
	SyntaxAlternate1R0
	SyntaxAlternate1R1
	SyntaxAlternates0R0
	SyntaxAlternates0R1
	SyntaxAlternates1R0
	SyntaxAlternates1R1
	SyntaxAlternates1R2
	SyntaxAlternates1R3
	SyntaxAlternates2R0
	SyntaxAlternates2R1
	SyntaxAlternates2R2
	SyntaxAlternates2R3
	SyntaxAtom0R0
	SyntaxAtom0R1
	SyntaxAtom1R0
	SyntaxAtom1R1
	SyntaxAtom2R0
	SyntaxAtom2R1
	SyntaxRule0R0
	SyntaxRule0R1
	SyntaxRule0R2
	SyntaxRule0R3
	SyntaxRule0R4
	SyntaxSuff0R0
	SyntaxSuff0R1
	SyntaxSuff0R2
	SyntaxSymbol0R0
	SyntaxSymbol0R1
	SyntaxSymbol0R2
	SyntaxSymbol1R0
	SyntaxSymbol1R1
	SyntaxSymbol1R2
	SyntaxSymbol2R0
	SyntaxSymbol2R1
	SyntaxSymbol3R0
	SyntaxSymbol3R1
	SyntaxSymbols0R0
	SyntaxSymbols0R1
	SyntaxSymbols1R0
	SyntaxSymbols1R1
	SyntaxSymbols1R2
	UnicodeClass0R0
	UnicodeClass0R1
	UnicodeClass1R0
	UnicodeClass1R1
	UnicodeClass2R0
	UnicodeClass2R1
	UnicodeClass3R0
	UnicodeClass3R1
	UnorderedAlternates0R0
	UnorderedAlternates0R1
	UnorderedAlternates1R0
	UnorderedAlternates1R1
	UnorderedAlternates1R2
	UnorderedAlternates1R3
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (l Label) IsNullable() bool {
	return nullable[l]
}

func (l Label) FirstContains(typ token.Type) bool {
	return firstT[l][typ]
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) Successor() *Slot {
	if s.EoR() {
		return nil
	} else {
		// TODO try slots[s.Label + 1]
		return slots[slotIndex[Index{s.NT,s.Alt,s.Pos+1}]]
	}
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	GoGLL0R0: {
		symbols.NT_GoGLL, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Package, 
			symbols.NT_Rules,
		}, 
		GoGLL0R0, 
	},
	GoGLL0R1: {
		symbols.NT_GoGLL, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Package, 
			symbols.NT_Rules,
		}, 
		GoGLL0R1, 
	},
	GoGLL0R2: {
		symbols.NT_GoGLL, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Package, 
			symbols.NT_Rules,
		}, 
		GoGLL0R2, 
	},
	LexAlternates0R0: {
		symbols.NT_LexAlternates, 0, 0, 
		symbols.Symbols{  
			symbols.NT_RegExp,
		}, 
		LexAlternates0R0, 
	},
	LexAlternates0R1: {
		symbols.NT_LexAlternates, 0, 1, 
		symbols.Symbols{  
			symbols.NT_RegExp,
		}, 
		LexAlternates0R1, 
	},
	LexAlternates1R0: {
		symbols.NT_LexAlternates, 1, 0, 
		symbols.Symbols{  
			symbols.NT_RegExp, 
			symbols.T_26, 
			symbols.NT_LexAlternates,
		}, 
		LexAlternates1R0, 
	},
	LexAlternates1R1: {
		symbols.NT_LexAlternates, 1, 1, 
		symbols.Symbols{  
			symbols.NT_RegExp, 
			symbols.T_26, 
			symbols.NT_LexAlternates,
		}, 
		LexAlternates1R1, 
	},
	LexAlternates1R2: {
		symbols.NT_LexAlternates, 1, 2, 
		symbols.Symbols{  
			symbols.NT_RegExp, 
			symbols.T_26, 
			symbols.NT_LexAlternates,
		}, 
		LexAlternates1R2, 
	},
	LexAlternates1R3: {
		symbols.NT_LexAlternates, 1, 3, 
		symbols.Symbols{  
			symbols.NT_RegExp, 
			symbols.T_26, 
			symbols.NT_LexAlternates,
		}, 
		LexAlternates1R3, 
	},
	LexBracket0R0: {
		symbols.NT_LexBracket, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LexGroup,
		}, 
		LexBracket0R0, 
	},
	LexBracket0R1: {
		symbols.NT_LexBracket, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LexGroup,
		}, 
		LexBracket0R1, 
	},
	LexBracket1R0: {
		symbols.NT_LexBracket, 1, 0, 
		symbols.Symbols{  
			symbols.NT_LexOptional,
		}, 
		LexBracket1R0, 
	},
	LexBracket1R1: {
		symbols.NT_LexBracket, 1, 1, 
		symbols.Symbols{  
			symbols.NT_LexOptional,
		}, 
		LexBracket1R1, 
	},
	LexBracket2R0: {
		symbols.NT_LexBracket, 2, 0, 
		symbols.Symbols{  
			symbols.NT_LexZeroOrMore,
		}, 
		LexBracket2R0, 
	},
	LexBracket2R1: {
		symbols.NT_LexBracket, 2, 1, 
		symbols.Symbols{  
			symbols.NT_LexZeroOrMore,
		}, 
		LexBracket2R1, 
	},
	LexBracket3R0: {
		symbols.NT_LexBracket, 3, 0, 
		symbols.Symbols{  
			symbols.NT_LexOneOrMore,
		}, 
		LexBracket3R0, 
	},
	LexBracket3R1: {
		symbols.NT_LexBracket, 3, 1, 
		symbols.Symbols{  
			symbols.NT_LexOneOrMore,
		}, 
		LexBracket3R1, 
	},
	LexGroup0R0: {
		symbols.NT_LexGroup, 0, 0, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LexAlternates, 
			symbols.T_3,
		}, 
		LexGroup0R0, 
	},
	LexGroup0R1: {
		symbols.NT_LexGroup, 0, 1, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LexAlternates, 
			symbols.T_3,
		}, 
		LexGroup0R1, 
	},
	LexGroup0R2: {
		symbols.NT_LexGroup, 0, 2, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LexAlternates, 
			symbols.T_3,
		}, 
		LexGroup0R2, 
	},
	LexGroup0R3: {
		symbols.NT_LexGroup, 0, 3, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LexAlternates, 
			symbols.T_3,
		}, 
		LexGroup0R3, 
	},
	LexOneOrMore0R0: {
		symbols.NT_LexOneOrMore, 0, 0, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_LexAlternates, 
			symbols.T_9,
		}, 
		LexOneOrMore0R0, 
	},
	LexOneOrMore0R1: {
		symbols.NT_LexOneOrMore, 0, 1, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_LexAlternates, 
			symbols.T_9,
		}, 
		LexOneOrMore0R1, 
	},
	LexOneOrMore0R2: {
		symbols.NT_LexOneOrMore, 0, 2, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_LexAlternates, 
			symbols.T_9,
		}, 
		LexOneOrMore0R2, 
	},
	LexOneOrMore0R3: {
		symbols.NT_LexOneOrMore, 0, 3, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_LexAlternates, 
			symbols.T_9,
		}, 
		LexOneOrMore0R3, 
	},
	LexOptional0R0: {
		symbols.NT_LexOptional, 0, 0, 
		symbols.Symbols{  
			symbols.T_11, 
			symbols.NT_LexAlternates, 
			symbols.T_12,
		}, 
		LexOptional0R0, 
	},
	LexOptional0R1: {
		symbols.NT_LexOptional, 0, 1, 
		symbols.Symbols{  
			symbols.T_11, 
			symbols.NT_LexAlternates, 
			symbols.T_12,
		}, 
		LexOptional0R1, 
	},
	LexOptional0R2: {
		symbols.NT_LexOptional, 0, 2, 
		symbols.Symbols{  
			symbols.T_11, 
			symbols.NT_LexAlternates, 
			symbols.T_12,
		}, 
		LexOptional0R2, 
	},
	LexOptional0R3: {
		symbols.NT_LexOptional, 0, 3, 
		symbols.Symbols{  
			symbols.T_11, 
			symbols.NT_LexAlternates, 
			symbols.T_12,
		}, 
		LexOptional0R3, 
	},
	LexRule0R0: {
		symbols.NT_LexRule, 0, 0, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule0R0, 
	},
	LexRule0R1: {
		symbols.NT_LexRule, 0, 1, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule0R1, 
	},
	LexRule0R2: {
		symbols.NT_LexRule, 0, 2, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule0R2, 
	},
	LexRule0R3: {
		symbols.NT_LexRule, 0, 3, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule0R3, 
	},
	LexRule0R4: {
		symbols.NT_LexRule, 0, 4, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule0R4, 
	},
	LexRule1R0: {
		symbols.NT_LexRule, 1, 0, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R0, 
	},
	LexRule1R1: {
		symbols.NT_LexRule, 1, 1, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R1, 
	},
	LexRule1R2: {
		symbols.NT_LexRule, 1, 2, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R2, 
	},
	LexRule1R3: {
		symbols.NT_LexRule, 1, 3, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R3, 
	},
	LexRule1R4: {
		symbols.NT_LexRule, 1, 4, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R4, 
	},
	LexRule1R5: {
		symbols.NT_LexRule, 1, 5, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.T_23, 
			symbols.T_6, 
			symbols.NT_RegExp, 
			symbols.T_7,
		}, 
		LexRule1R5, 
	},
	LexSymbol0R0: {
		symbols.NT_LexSymbol, 0, 0, 
		symbols.Symbols{  
			symbols.T_4,
		}, 
		LexSymbol0R0, 
	},
	LexSymbol0R1: {
		symbols.NT_LexSymbol, 0, 1, 
		symbols.Symbols{  
			symbols.T_4,
		}, 
		LexSymbol0R1, 
	},
	LexSymbol1R0: {
		symbols.NT_LexSymbol, 1, 0, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.T_22,
		}, 
		LexSymbol1R0, 
	},
	LexSymbol1R1: {
		symbols.NT_LexSymbol, 1, 1, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.T_22,
		}, 
		LexSymbol1R1, 
	},
	LexSymbol1R2: {
		symbols.NT_LexSymbol, 1, 2, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.T_22,
		}, 
		LexSymbol1R2, 
	},
	LexSymbol2R0: {
		symbols.NT_LexSymbol, 2, 0, 
		symbols.Symbols{  
			symbols.T_14,
		}, 
		LexSymbol2R0, 
	},
	LexSymbol2R1: {
		symbols.NT_LexSymbol, 2, 1, 
		symbols.Symbols{  
			symbols.T_14,
		}, 
		LexSymbol2R1, 
	},
	LexSymbol3R0: {
		symbols.NT_LexSymbol, 3, 0, 
		symbols.Symbols{  
			symbols.NT_LexBracket,
		}, 
		LexSymbol3R0, 
	},
	LexSymbol3R1: {
		symbols.NT_LexSymbol, 3, 1, 
		symbols.Symbols{  
			symbols.NT_LexBracket,
		}, 
		LexSymbol3R1, 
	},
	LexSymbol4R0: {
		symbols.NT_LexSymbol, 4, 0, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.T_22,
		}, 
		LexSymbol4R0, 
	},
	LexSymbol4R1: {
		symbols.NT_LexSymbol, 4, 1, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.T_22,
		}, 
		LexSymbol4R1, 
	},
	LexSymbol4R2: {
		symbols.NT_LexSymbol, 4, 2, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.T_22,
		}, 
		LexSymbol4R2, 
	},
	LexSymbol5R0: {
		symbols.NT_LexSymbol, 5, 0, 
		symbols.Symbols{  
			symbols.NT_UnicodeClass,
		}, 
		LexSymbol5R0, 
	},
	LexSymbol5R1: {
		symbols.NT_LexSymbol, 5, 1, 
		symbols.Symbols{  
			symbols.NT_UnicodeClass,
		}, 
		LexSymbol5R1, 
	},
	LexZeroOrMore0R0: {
		symbols.NT_LexZeroOrMore, 0, 0, 
		symbols.Symbols{  
			symbols.T_25, 
			symbols.NT_LexAlternates, 
			symbols.T_27,
		}, 
		LexZeroOrMore0R0, 
	},
	LexZeroOrMore0R1: {
		symbols.NT_LexZeroOrMore, 0, 1, 
		symbols.Symbols{  
			symbols.T_25, 
			symbols.NT_LexAlternates, 
			symbols.T_27,
		}, 
		LexZeroOrMore0R1, 
	},
	LexZeroOrMore0R2: {
		symbols.NT_LexZeroOrMore, 0, 2, 
		symbols.Symbols{  
			symbols.T_25, 
			symbols.NT_LexAlternates, 
			symbols.T_27,
		}, 
		LexZeroOrMore0R2, 
	},
	LexZeroOrMore0R3: {
		symbols.NT_LexZeroOrMore, 0, 3, 
		symbols.Symbols{  
			symbols.T_25, 
			symbols.NT_LexAlternates, 
			symbols.T_27,
		}, 
		LexZeroOrMore0R3, 
	},
	OrderedAlternates0R0: {
		symbols.NT_OrderedAlternates, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		OrderedAlternates0R0, 
	},
	OrderedAlternates0R1: {
		symbols.NT_OrderedAlternates, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		OrderedAlternates0R1, 
	},
	OrderedAlternates1R0: {
		symbols.NT_OrderedAlternates, 1, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		OrderedAlternates1R0, 
	},
	OrderedAlternates1R1: {
		symbols.NT_OrderedAlternates, 1, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		OrderedAlternates1R1, 
	},
	OrderedAlternates1R2: {
		symbols.NT_OrderedAlternates, 1, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		OrderedAlternates1R2, 
	},
	OrderedAlternates1R3: {
		symbols.NT_OrderedAlternates, 1, 3, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		OrderedAlternates1R3, 
	},
	Package0R0: {
		symbols.NT_Package, 0, 0, 
		symbols.Symbols{  
			symbols.T_21, 
			symbols.T_22,
		}, 
		Package0R0, 
	},
	Package0R1: {
		symbols.NT_Package, 0, 1, 
		symbols.Symbols{  
			symbols.T_21, 
			symbols.T_22,
		}, 
		Package0R1, 
	},
	Package0R2: {
		symbols.NT_Package, 0, 2, 
		symbols.Symbols{  
			symbols.T_21, 
			symbols.T_22,
		}, 
		Package0R2, 
	},
	RegExp0R0: {
		symbols.NT_RegExp, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LexSymbol,
		}, 
		RegExp0R0, 
	},
	RegExp0R1: {
		symbols.NT_RegExp, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LexSymbol,
		}, 
		RegExp0R1, 
	},
	RegExp1R0: {
		symbols.NT_RegExp, 1, 0, 
		symbols.Symbols{  
			symbols.NT_LexSymbol, 
			symbols.NT_RegExp,
		}, 
		RegExp1R0, 
	},
	RegExp1R1: {
		symbols.NT_RegExp, 1, 1, 
		symbols.Symbols{  
			symbols.NT_LexSymbol, 
			symbols.NT_RegExp,
		}, 
		RegExp1R1, 
	},
	RegExp1R2: {
		symbols.NT_RegExp, 1, 2, 
		symbols.Symbols{  
			symbols.NT_LexSymbol, 
			symbols.NT_RegExp,
		}, 
		RegExp1R2, 
	},
	Rule0R0: {
		symbols.NT_Rule, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LexRule,
		}, 
		Rule0R0, 
	},
	Rule0R1: {
		symbols.NT_Rule, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LexRule,
		}, 
		Rule0R1, 
	},
	Rule1R0: {
		symbols.NT_Rule, 1, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxRule,
		}, 
		Rule1R0, 
	},
	Rule1R1: {
		symbols.NT_Rule, 1, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxRule,
		}, 
		Rule1R1, 
	},
	Rules0R0: {
		symbols.NT_Rules, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Rule,
		}, 
		Rules0R0, 
	},
	Rules0R1: {
		symbols.NT_Rules, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Rule,
		}, 
		Rules0R1, 
	},
	Rules1R0: {
		symbols.NT_Rules, 1, 0, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_Rules,
		}, 
		Rules1R0, 
	},
	Rules1R1: {
		symbols.NT_Rules, 1, 1, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_Rules,
		}, 
		Rules1R1, 
	},
	Rules1R2: {
		symbols.NT_Rules, 1, 2, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_Rules,
		}, 
		Rules1R2, 
	},
	SyntaxAlternate0R0: {
		symbols.NT_SyntaxAlternate, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbols,
		}, 
		SyntaxAlternate0R0, 
	},
	SyntaxAlternate0R1: {
		symbols.NT_SyntaxAlternate, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbols,
		}, 
		SyntaxAlternate0R1, 
	},
	SyntaxAlternate1R0: {
		symbols.NT_SyntaxAlternate, 1, 0, 
		symbols.Symbols{  
			symbols.T_15,
		}, 
		SyntaxAlternate1R0, 
	},
	SyntaxAlternate1R1: {
		symbols.NT_SyntaxAlternate, 1, 1, 
		symbols.Symbols{  
			symbols.T_15,
		}, 
		SyntaxAlternate1R1, 
	},
	SyntaxAlternates0R0: {
		symbols.NT_SyntaxAlternates, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		SyntaxAlternates0R0, 
	},
	SyntaxAlternates0R1: {
		symbols.NT_SyntaxAlternates, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		SyntaxAlternates0R1, 
	},
	SyntaxAlternates1R0: {
		symbols.NT_SyntaxAlternates, 1, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		SyntaxAlternates1R0, 
	},
	SyntaxAlternates1R1: {
		symbols.NT_SyntaxAlternates, 1, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		SyntaxAlternates1R1, 
	},
	SyntaxAlternates1R2: {
		symbols.NT_SyntaxAlternates, 1, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		SyntaxAlternates1R2, 
	},
	SyntaxAlternates1R3: {
		symbols.NT_SyntaxAlternates, 1, 3, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		SyntaxAlternates1R3, 
	},
	SyntaxAlternates2R0: {
		symbols.NT_SyntaxAlternates, 2, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		SyntaxAlternates2R0, 
	},
	SyntaxAlternates2R1: {
		symbols.NT_SyntaxAlternates, 2, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		SyntaxAlternates2R1, 
	},
	SyntaxAlternates2R2: {
		symbols.NT_SyntaxAlternates, 2, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		SyntaxAlternates2R2, 
	},
	SyntaxAlternates2R3: {
		symbols.NT_SyntaxAlternates, 2, 3, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_5, 
			symbols.NT_OrderedAlternates,
		}, 
		SyntaxAlternates2R3, 
	},
	SyntaxAtom0R0: {
		symbols.NT_SyntaxAtom, 0, 0, 
		symbols.Symbols{  
			symbols.T_19,
		}, 
		SyntaxAtom0R0, 
	},
	SyntaxAtom0R1: {
		symbols.NT_SyntaxAtom, 0, 1, 
		symbols.Symbols{  
			symbols.T_19,
		}, 
		SyntaxAtom0R1, 
	},
	SyntaxAtom1R0: {
		symbols.NT_SyntaxAtom, 1, 0, 
		symbols.Symbols{  
			symbols.T_23,
		}, 
		SyntaxAtom1R0, 
	},
	SyntaxAtom1R1: {
		symbols.NT_SyntaxAtom, 1, 1, 
		symbols.Symbols{  
			symbols.T_23,
		}, 
		SyntaxAtom1R1, 
	},
	SyntaxAtom2R0: {
		symbols.NT_SyntaxAtom, 2, 0, 
		symbols.Symbols{  
			symbols.T_22,
		}, 
		SyntaxAtom2R0, 
	},
	SyntaxAtom2R1: {
		symbols.NT_SyntaxAtom, 2, 1, 
		symbols.Symbols{  
			symbols.T_22,
		}, 
		SyntaxAtom2R1, 
	},
	SyntaxRule0R0: {
		symbols.NT_SyntaxRule, 0, 0, 
		symbols.Symbols{  
			symbols.T_19, 
			symbols.T_6, 
			symbols.NT_SyntaxAlternates, 
			symbols.T_7,
		}, 
		SyntaxRule0R0, 
	},
	SyntaxRule0R1: {
		symbols.NT_SyntaxRule, 0, 1, 
		symbols.Symbols{  
			symbols.T_19, 
			symbols.T_6, 
			symbols.NT_SyntaxAlternates, 
			symbols.T_7,
		}, 
		SyntaxRule0R1, 
	},
	SyntaxRule0R2: {
		symbols.NT_SyntaxRule, 0, 2, 
		symbols.Symbols{  
			symbols.T_19, 
			symbols.T_6, 
			symbols.NT_SyntaxAlternates, 
			symbols.T_7,
		}, 
		SyntaxRule0R2, 
	},
	SyntaxRule0R3: {
		symbols.NT_SyntaxRule, 0, 3, 
		symbols.Symbols{  
			symbols.T_19, 
			symbols.T_6, 
			symbols.NT_SyntaxAlternates, 
			symbols.T_7,
		}, 
		SyntaxRule0R3, 
	},
	SyntaxRule0R4: {
		symbols.NT_SyntaxRule, 0, 4, 
		symbols.Symbols{  
			symbols.T_19, 
			symbols.T_6, 
			symbols.NT_SyntaxAlternates, 
			symbols.T_7,
		}, 
		SyntaxRule0R4, 
	},
	SyntaxSuff0R0: {
		symbols.NT_SyntaxSuff, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAtom, 
			symbols.T_10,
		}, 
		SyntaxSuff0R0, 
	},
	SyntaxSuff0R1: {
		symbols.NT_SyntaxSuff, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAtom, 
			symbols.T_10,
		}, 
		SyntaxSuff0R1, 
	},
	SyntaxSuff0R2: {
		symbols.NT_SyntaxSuff, 0, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxAtom, 
			symbols.T_10,
		}, 
		SyntaxSuff0R2, 
	},
	SyntaxSymbol0R0: {
		symbols.NT_SyntaxSymbol, 0, 0, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol0R0, 
	},
	SyntaxSymbol0R1: {
		symbols.NT_SyntaxSymbol, 0, 1, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol0R1, 
	},
	SyntaxSymbol0R2: {
		symbols.NT_SyntaxSymbol, 0, 2, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol0R2, 
	},
	SyntaxSymbol1R0: {
		symbols.NT_SyntaxSymbol, 1, 0, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol1R0, 
	},
	SyntaxSymbol1R1: {
		symbols.NT_SyntaxSymbol, 1, 1, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol1R1, 
	},
	SyntaxSymbol1R2: {
		symbols.NT_SyntaxSymbol, 1, 2, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol1R2, 
	},
	SyntaxSymbol2R0: {
		symbols.NT_SyntaxSymbol, 2, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxSuff,
		}, 
		SyntaxSymbol2R0, 
	},
	SyntaxSymbol2R1: {
		symbols.NT_SyntaxSymbol, 2, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxSuff,
		}, 
		SyntaxSymbol2R1, 
	},
	SyntaxSymbol3R0: {
		symbols.NT_SyntaxSymbol, 3, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol3R0, 
	},
	SyntaxSymbol3R1: {
		symbols.NT_SyntaxSymbol, 3, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAtom,
		}, 
		SyntaxSymbol3R1, 
	},
	SyntaxSymbols0R0: {
		symbols.NT_SyntaxSymbols, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbol,
		}, 
		SyntaxSymbols0R0, 
	},
	SyntaxSymbols0R1: {
		symbols.NT_SyntaxSymbols, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbol,
		}, 
		SyntaxSymbols0R1, 
	},
	SyntaxSymbols1R0: {
		symbols.NT_SyntaxSymbols, 1, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbol, 
			symbols.NT_SyntaxSymbols,
		}, 
		SyntaxSymbols1R0, 
	},
	SyntaxSymbols1R1: {
		symbols.NT_SyntaxSymbols, 1, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbol, 
			symbols.NT_SyntaxSymbols,
		}, 
		SyntaxSymbols1R1, 
	},
	SyntaxSymbols1R2: {
		symbols.NT_SyntaxSymbols, 1, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxSymbol, 
			symbols.NT_SyntaxSymbols,
		}, 
		SyntaxSymbols1R2, 
	},
	UnicodeClass0R0: {
		symbols.NT_UnicodeClass, 0, 0, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		UnicodeClass0R0, 
	},
	UnicodeClass0R1: {
		symbols.NT_UnicodeClass, 0, 1, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		UnicodeClass0R1, 
	},
	UnicodeClass1R0: {
		symbols.NT_UnicodeClass, 1, 0, 
		symbols.Symbols{  
			symbols.T_24,
		}, 
		UnicodeClass1R0, 
	},
	UnicodeClass1R1: {
		symbols.NT_UnicodeClass, 1, 1, 
		symbols.Symbols{  
			symbols.T_24,
		}, 
		UnicodeClass1R1, 
	},
	UnicodeClass2R0: {
		symbols.NT_UnicodeClass, 2, 0, 
		symbols.Symbols{  
			symbols.T_17,
		}, 
		UnicodeClass2R0, 
	},
	UnicodeClass2R1: {
		symbols.NT_UnicodeClass, 2, 1, 
		symbols.Symbols{  
			symbols.T_17,
		}, 
		UnicodeClass2R1, 
	},
	UnicodeClass3R0: {
		symbols.NT_UnicodeClass, 3, 0, 
		symbols.Symbols{  
			symbols.T_20,
		}, 
		UnicodeClass3R0, 
	},
	UnicodeClass3R1: {
		symbols.NT_UnicodeClass, 3, 1, 
		symbols.Symbols{  
			symbols.T_20,
		}, 
		UnicodeClass3R1, 
	},
	UnorderedAlternates0R0: {
		symbols.NT_UnorderedAlternates, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		UnorderedAlternates0R0, 
	},
	UnorderedAlternates0R1: {
		symbols.NT_UnorderedAlternates, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate,
		}, 
		UnorderedAlternates0R1, 
	},
	UnorderedAlternates1R0: {
		symbols.NT_UnorderedAlternates, 1, 0, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		UnorderedAlternates1R0, 
	},
	UnorderedAlternates1R1: {
		symbols.NT_UnorderedAlternates, 1, 1, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		UnorderedAlternates1R1, 
	},
	UnorderedAlternates1R2: {
		symbols.NT_UnorderedAlternates, 1, 2, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		UnorderedAlternates1R2, 
	},
	UnorderedAlternates1R3: {
		symbols.NT_UnorderedAlternates, 1, 3, 
		symbols.Symbols{  
			symbols.NT_SyntaxAlternate, 
			symbols.T_26, 
			symbols.NT_UnorderedAlternates,
		}, 
		UnorderedAlternates1R3, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_GoGLL,0,0 }: GoGLL0R0,
	Index{ symbols.NT_GoGLL,0,1 }: GoGLL0R1,
	Index{ symbols.NT_GoGLL,0,2 }: GoGLL0R2,
	Index{ symbols.NT_LexAlternates,0,0 }: LexAlternates0R0,
	Index{ symbols.NT_LexAlternates,0,1 }: LexAlternates0R1,
	Index{ symbols.NT_LexAlternates,1,0 }: LexAlternates1R0,
	Index{ symbols.NT_LexAlternates,1,1 }: LexAlternates1R1,
	Index{ symbols.NT_LexAlternates,1,2 }: LexAlternates1R2,
	Index{ symbols.NT_LexAlternates,1,3 }: LexAlternates1R3,
	Index{ symbols.NT_LexBracket,0,0 }: LexBracket0R0,
	Index{ symbols.NT_LexBracket,0,1 }: LexBracket0R1,
	Index{ symbols.NT_LexBracket,1,0 }: LexBracket1R0,
	Index{ symbols.NT_LexBracket,1,1 }: LexBracket1R1,
	Index{ symbols.NT_LexBracket,2,0 }: LexBracket2R0,
	Index{ symbols.NT_LexBracket,2,1 }: LexBracket2R1,
	Index{ symbols.NT_LexBracket,3,0 }: LexBracket3R0,
	Index{ symbols.NT_LexBracket,3,1 }: LexBracket3R1,
	Index{ symbols.NT_LexGroup,0,0 }: LexGroup0R0,
	Index{ symbols.NT_LexGroup,0,1 }: LexGroup0R1,
	Index{ symbols.NT_LexGroup,0,2 }: LexGroup0R2,
	Index{ symbols.NT_LexGroup,0,3 }: LexGroup0R3,
	Index{ symbols.NT_LexOneOrMore,0,0 }: LexOneOrMore0R0,
	Index{ symbols.NT_LexOneOrMore,0,1 }: LexOneOrMore0R1,
	Index{ symbols.NT_LexOneOrMore,0,2 }: LexOneOrMore0R2,
	Index{ symbols.NT_LexOneOrMore,0,3 }: LexOneOrMore0R3,
	Index{ symbols.NT_LexOptional,0,0 }: LexOptional0R0,
	Index{ symbols.NT_LexOptional,0,1 }: LexOptional0R1,
	Index{ symbols.NT_LexOptional,0,2 }: LexOptional0R2,
	Index{ symbols.NT_LexOptional,0,3 }: LexOptional0R3,
	Index{ symbols.NT_LexRule,0,0 }: LexRule0R0,
	Index{ symbols.NT_LexRule,0,1 }: LexRule0R1,
	Index{ symbols.NT_LexRule,0,2 }: LexRule0R2,
	Index{ symbols.NT_LexRule,0,3 }: LexRule0R3,
	Index{ symbols.NT_LexRule,0,4 }: LexRule0R4,
	Index{ symbols.NT_LexRule,1,0 }: LexRule1R0,
	Index{ symbols.NT_LexRule,1,1 }: LexRule1R1,
	Index{ symbols.NT_LexRule,1,2 }: LexRule1R2,
	Index{ symbols.NT_LexRule,1,3 }: LexRule1R3,
	Index{ symbols.NT_LexRule,1,4 }: LexRule1R4,
	Index{ symbols.NT_LexRule,1,5 }: LexRule1R5,
	Index{ symbols.NT_LexSymbol,0,0 }: LexSymbol0R0,
	Index{ symbols.NT_LexSymbol,0,1 }: LexSymbol0R1,
	Index{ symbols.NT_LexSymbol,1,0 }: LexSymbol1R0,
	Index{ symbols.NT_LexSymbol,1,1 }: LexSymbol1R1,
	Index{ symbols.NT_LexSymbol,1,2 }: LexSymbol1R2,
	Index{ symbols.NT_LexSymbol,2,0 }: LexSymbol2R0,
	Index{ symbols.NT_LexSymbol,2,1 }: LexSymbol2R1,
	Index{ symbols.NT_LexSymbol,3,0 }: LexSymbol3R0,
	Index{ symbols.NT_LexSymbol,3,1 }: LexSymbol3R1,
	Index{ symbols.NT_LexSymbol,4,0 }: LexSymbol4R0,
	Index{ symbols.NT_LexSymbol,4,1 }: LexSymbol4R1,
	Index{ symbols.NT_LexSymbol,4,2 }: LexSymbol4R2,
	Index{ symbols.NT_LexSymbol,5,0 }: LexSymbol5R0,
	Index{ symbols.NT_LexSymbol,5,1 }: LexSymbol5R1,
	Index{ symbols.NT_LexZeroOrMore,0,0 }: LexZeroOrMore0R0,
	Index{ symbols.NT_LexZeroOrMore,0,1 }: LexZeroOrMore0R1,
	Index{ symbols.NT_LexZeroOrMore,0,2 }: LexZeroOrMore0R2,
	Index{ symbols.NT_LexZeroOrMore,0,3 }: LexZeroOrMore0R3,
	Index{ symbols.NT_OrderedAlternates,0,0 }: OrderedAlternates0R0,
	Index{ symbols.NT_OrderedAlternates,0,1 }: OrderedAlternates0R1,
	Index{ symbols.NT_OrderedAlternates,1,0 }: OrderedAlternates1R0,
	Index{ symbols.NT_OrderedAlternates,1,1 }: OrderedAlternates1R1,
	Index{ symbols.NT_OrderedAlternates,1,2 }: OrderedAlternates1R2,
	Index{ symbols.NT_OrderedAlternates,1,3 }: OrderedAlternates1R3,
	Index{ symbols.NT_Package,0,0 }: Package0R0,
	Index{ symbols.NT_Package,0,1 }: Package0R1,
	Index{ symbols.NT_Package,0,2 }: Package0R2,
	Index{ symbols.NT_RegExp,0,0 }: RegExp0R0,
	Index{ symbols.NT_RegExp,0,1 }: RegExp0R1,
	Index{ symbols.NT_RegExp,1,0 }: RegExp1R0,
	Index{ symbols.NT_RegExp,1,1 }: RegExp1R1,
	Index{ symbols.NT_RegExp,1,2 }: RegExp1R2,
	Index{ symbols.NT_Rule,0,0 }: Rule0R0,
	Index{ symbols.NT_Rule,0,1 }: Rule0R1,
	Index{ symbols.NT_Rule,1,0 }: Rule1R0,
	Index{ symbols.NT_Rule,1,1 }: Rule1R1,
	Index{ symbols.NT_Rules,0,0 }: Rules0R0,
	Index{ symbols.NT_Rules,0,1 }: Rules0R1,
	Index{ symbols.NT_Rules,1,0 }: Rules1R0,
	Index{ symbols.NT_Rules,1,1 }: Rules1R1,
	Index{ symbols.NT_Rules,1,2 }: Rules1R2,
	Index{ symbols.NT_SyntaxAlternate,0,0 }: SyntaxAlternate0R0,
	Index{ symbols.NT_SyntaxAlternate,0,1 }: SyntaxAlternate0R1,
	Index{ symbols.NT_SyntaxAlternate,1,0 }: SyntaxAlternate1R0,
	Index{ symbols.NT_SyntaxAlternate,1,1 }: SyntaxAlternate1R1,
	Index{ symbols.NT_SyntaxAlternates,0,0 }: SyntaxAlternates0R0,
	Index{ symbols.NT_SyntaxAlternates,0,1 }: SyntaxAlternates0R1,
	Index{ symbols.NT_SyntaxAlternates,1,0 }: SyntaxAlternates1R0,
	Index{ symbols.NT_SyntaxAlternates,1,1 }: SyntaxAlternates1R1,
	Index{ symbols.NT_SyntaxAlternates,1,2 }: SyntaxAlternates1R2,
	Index{ symbols.NT_SyntaxAlternates,1,3 }: SyntaxAlternates1R3,
	Index{ symbols.NT_SyntaxAlternates,2,0 }: SyntaxAlternates2R0,
	Index{ symbols.NT_SyntaxAlternates,2,1 }: SyntaxAlternates2R1,
	Index{ symbols.NT_SyntaxAlternates,2,2 }: SyntaxAlternates2R2,
	Index{ symbols.NT_SyntaxAlternates,2,3 }: SyntaxAlternates2R3,
	Index{ symbols.NT_SyntaxAtom,0,0 }: SyntaxAtom0R0,
	Index{ symbols.NT_SyntaxAtom,0,1 }: SyntaxAtom0R1,
	Index{ symbols.NT_SyntaxAtom,1,0 }: SyntaxAtom1R0,
	Index{ symbols.NT_SyntaxAtom,1,1 }: SyntaxAtom1R1,
	Index{ symbols.NT_SyntaxAtom,2,0 }: SyntaxAtom2R0,
	Index{ symbols.NT_SyntaxAtom,2,1 }: SyntaxAtom2R1,
	Index{ symbols.NT_SyntaxRule,0,0 }: SyntaxRule0R0,
	Index{ symbols.NT_SyntaxRule,0,1 }: SyntaxRule0R1,
	Index{ symbols.NT_SyntaxRule,0,2 }: SyntaxRule0R2,
	Index{ symbols.NT_SyntaxRule,0,3 }: SyntaxRule0R3,
	Index{ symbols.NT_SyntaxRule,0,4 }: SyntaxRule0R4,
	Index{ symbols.NT_SyntaxSuff,0,0 }: SyntaxSuff0R0,
	Index{ symbols.NT_SyntaxSuff,0,1 }: SyntaxSuff0R1,
	Index{ symbols.NT_SyntaxSuff,0,2 }: SyntaxSuff0R2,
	Index{ symbols.NT_SyntaxSymbol,0,0 }: SyntaxSymbol0R0,
	Index{ symbols.NT_SyntaxSymbol,0,1 }: SyntaxSymbol0R1,
	Index{ symbols.NT_SyntaxSymbol,0,2 }: SyntaxSymbol0R2,
	Index{ symbols.NT_SyntaxSymbol,1,0 }: SyntaxSymbol1R0,
	Index{ symbols.NT_SyntaxSymbol,1,1 }: SyntaxSymbol1R1,
	Index{ symbols.NT_SyntaxSymbol,1,2 }: SyntaxSymbol1R2,
	Index{ symbols.NT_SyntaxSymbol,2,0 }: SyntaxSymbol2R0,
	Index{ symbols.NT_SyntaxSymbol,2,1 }: SyntaxSymbol2R1,
	Index{ symbols.NT_SyntaxSymbol,3,0 }: SyntaxSymbol3R0,
	Index{ symbols.NT_SyntaxSymbol,3,1 }: SyntaxSymbol3R1,
	Index{ symbols.NT_SyntaxSymbols,0,0 }: SyntaxSymbols0R0,
	Index{ symbols.NT_SyntaxSymbols,0,1 }: SyntaxSymbols0R1,
	Index{ symbols.NT_SyntaxSymbols,1,0 }: SyntaxSymbols1R0,
	Index{ symbols.NT_SyntaxSymbols,1,1 }: SyntaxSymbols1R1,
	Index{ symbols.NT_SyntaxSymbols,1,2 }: SyntaxSymbols1R2,
	Index{ symbols.NT_UnicodeClass,0,0 }: UnicodeClass0R0,
	Index{ symbols.NT_UnicodeClass,0,1 }: UnicodeClass0R1,
	Index{ symbols.NT_UnicodeClass,1,0 }: UnicodeClass1R0,
	Index{ symbols.NT_UnicodeClass,1,1 }: UnicodeClass1R1,
	Index{ symbols.NT_UnicodeClass,2,0 }: UnicodeClass2R0,
	Index{ symbols.NT_UnicodeClass,2,1 }: UnicodeClass2R1,
	Index{ symbols.NT_UnicodeClass,3,0 }: UnicodeClass3R0,
	Index{ symbols.NT_UnicodeClass,3,1 }: UnicodeClass3R1,
	Index{ symbols.NT_UnorderedAlternates,0,0 }: UnorderedAlternates0R0,
	Index{ symbols.NT_UnorderedAlternates,0,1 }: UnorderedAlternates0R1,
	Index{ symbols.NT_UnorderedAlternates,1,0 }: UnorderedAlternates1R0,
	Index{ symbols.NT_UnorderedAlternates,1,1 }: UnorderedAlternates1R1,
	Index{ symbols.NT_UnorderedAlternates,1,2 }: UnorderedAlternates1R2,
	Index{ symbols.NT_UnorderedAlternates,1,3 }: UnorderedAlternates1R3,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_GoGLL:[]Label{ GoGLL0R0 },
	symbols.NT_Package:[]Label{ Package0R0 },
	symbols.NT_Rules:[]Label{ Rules0R0,Rules1R0 },
	symbols.NT_Rule:[]Label{ Rule0R0,Rule1R0 },
	symbols.NT_LexSymbol:[]Label{ LexSymbol0R0,LexSymbol1R0,LexSymbol2R0,LexSymbol3R0,LexSymbol4R0,LexSymbol5R0 },
	symbols.NT_UnicodeClass:[]Label{ UnicodeClass0R0,UnicodeClass1R0,UnicodeClass2R0,UnicodeClass3R0 },
	symbols.NT_LexBracket:[]Label{ LexBracket0R0,LexBracket1R0,LexBracket2R0,LexBracket3R0 },
	symbols.NT_LexGroup:[]Label{ LexGroup0R0 },
	symbols.NT_LexOptional:[]Label{ LexOptional0R0 },
	symbols.NT_LexZeroOrMore:[]Label{ LexZeroOrMore0R0 },
	symbols.NT_LexOneOrMore:[]Label{ LexOneOrMore0R0 },
	symbols.NT_LexAlternates:[]Label{ LexAlternates0R0,LexAlternates1R0 },
	symbols.NT_RegExp:[]Label{ RegExp0R0,RegExp1R0 },
	symbols.NT_LexRule:[]Label{ LexRule0R0,LexRule1R0 },
	symbols.NT_SyntaxRule:[]Label{ SyntaxRule0R0 },
	symbols.NT_SyntaxAlternates:[]Label{ SyntaxAlternates0R0,SyntaxAlternates1R0,SyntaxAlternates2R0 },
	symbols.NT_UnorderedAlternates:[]Label{ UnorderedAlternates0R0,UnorderedAlternates1R0 },
	symbols.NT_OrderedAlternates:[]Label{ OrderedAlternates0R0,OrderedAlternates1R0 },
	symbols.NT_SyntaxAlternate:[]Label{ SyntaxAlternate0R0,SyntaxAlternate1R0 },
	symbols.NT_SyntaxSymbols:[]Label{ SyntaxSymbols0R0,SyntaxSymbols1R0 },
	symbols.NT_SyntaxSymbol:[]Label{ SyntaxSymbol0R0,SyntaxSymbol1R0,SyntaxSymbol2R0,SyntaxSymbol3R0 },
	symbols.NT_SyntaxAtom:[]Label{ SyntaxAtom0R0,SyntaxAtom1R0,SyntaxAtom2R0 },
	symbols.NT_SyntaxSuff:[]Label{ SyntaxSuff0R0 },
}

var nullable = []bool { 
	false, // GoGLL0R0 
	false, // GoGLL0R1 
	true, // GoGLL0R2 
	false, // LexAlternates0R0 
	true, // LexAlternates0R1 
	false, // LexAlternates1R0 
	false, // LexAlternates1R1 
	false, // LexAlternates1R2 
	true, // LexAlternates1R3 
	false, // LexBracket0R0 
	true, // LexBracket0R1 
	false, // LexBracket1R0 
	true, // LexBracket1R1 
	false, // LexBracket2R0 
	true, // LexBracket2R1 
	false, // LexBracket3R0 
	true, // LexBracket3R1 
	false, // LexGroup0R0 
	false, // LexGroup0R1 
	false, // LexGroup0R2 
	true, // LexGroup0R3 
	false, // LexOneOrMore0R0 
	false, // LexOneOrMore0R1 
	false, // LexOneOrMore0R2 
	true, // LexOneOrMore0R3 
	false, // LexOptional0R0 
	false, // LexOptional0R1 
	false, // LexOptional0R2 
	true, // LexOptional0R3 
	false, // LexRule0R0 
	false, // LexRule0R1 
	false, // LexRule0R2 
	false, // LexRule0R3 
	true, // LexRule0R4 
	false, // LexRule1R0 
	false, // LexRule1R1 
	false, // LexRule1R2 
	false, // LexRule1R3 
	false, // LexRule1R4 
	true, // LexRule1R5 
	false, // LexSymbol0R0 
	true, // LexSymbol0R1 
	false, // LexSymbol1R0 
	false, // LexSymbol1R1 
	true, // LexSymbol1R2 
	false, // LexSymbol2R0 
	true, // LexSymbol2R1 
	false, // LexSymbol3R0 
	true, // LexSymbol3R1 
	false, // LexSymbol4R0 
	false, // LexSymbol4R1 
	true, // LexSymbol4R2 
	false, // LexSymbol5R0 
	true, // LexSymbol5R1 
	false, // LexZeroOrMore0R0 
	false, // LexZeroOrMore0R1 
	false, // LexZeroOrMore0R2 
	true, // LexZeroOrMore0R3 
	false, // OrderedAlternates0R0 
	true, // OrderedAlternates0R1 
	false, // OrderedAlternates1R0 
	false, // OrderedAlternates1R1 
	false, // OrderedAlternates1R2 
	true, // OrderedAlternates1R3 
	false, // Package0R0 
	false, // Package0R1 
	true, // Package0R2 
	false, // RegExp0R0 
	true, // RegExp0R1 
	false, // RegExp1R0 
	false, // RegExp1R1 
	true, // RegExp1R2 
	false, // Rule0R0 
	true, // Rule0R1 
	false, // Rule1R0 
	true, // Rule1R1 
	false, // Rules0R0 
	true, // Rules0R1 
	false, // Rules1R0 
	false, // Rules1R1 
	true, // Rules1R2 
	false, // SyntaxAlternate0R0 
	true, // SyntaxAlternate0R1 
	false, // SyntaxAlternate1R0 
	true, // SyntaxAlternate1R1 
	false, // SyntaxAlternates0R0 
	true, // SyntaxAlternates0R1 
	false, // SyntaxAlternates1R0 
	false, // SyntaxAlternates1R1 
	false, // SyntaxAlternates1R2 
	true, // SyntaxAlternates1R3 
	false, // SyntaxAlternates2R0 
	false, // SyntaxAlternates2R1 
	false, // SyntaxAlternates2R2 
	true, // SyntaxAlternates2R3 
	false, // SyntaxAtom0R0 
	true, // SyntaxAtom0R1 
	false, // SyntaxAtom1R0 
	true, // SyntaxAtom1R1 
	false, // SyntaxAtom2R0 
	true, // SyntaxAtom2R1 
	false, // SyntaxRule0R0 
	false, // SyntaxRule0R1 
	false, // SyntaxRule0R2 
	false, // SyntaxRule0R3 
	true, // SyntaxRule0R4 
	false, // SyntaxSuff0R0 
	false, // SyntaxSuff0R1 
	true, // SyntaxSuff0R2 
	false, // SyntaxSymbol0R0 
	false, // SyntaxSymbol0R1 
	true, // SyntaxSymbol0R2 
	false, // SyntaxSymbol1R0 
	false, // SyntaxSymbol1R1 
	true, // SyntaxSymbol1R2 
	false, // SyntaxSymbol2R0 
	true, // SyntaxSymbol2R1 
	false, // SyntaxSymbol3R0 
	true, // SyntaxSymbol3R1 
	false, // SyntaxSymbols0R0 
	true, // SyntaxSymbols0R1 
	false, // SyntaxSymbols1R0 
	false, // SyntaxSymbols1R1 
	true, // SyntaxSymbols1R2 
	false, // UnicodeClass0R0 
	true, // UnicodeClass0R1 
	false, // UnicodeClass1R0 
	true, // UnicodeClass1R1 
	false, // UnicodeClass2R0 
	true, // UnicodeClass2R1 
	false, // UnicodeClass3R0 
	true, // UnicodeClass3R1 
	false, // UnorderedAlternates0R0 
	true, // UnorderedAlternates0R1 
	false, // UnorderedAlternates1R0 
	false, // UnorderedAlternates1R1 
	false, // UnorderedAlternates1R2 
	true, // UnorderedAlternates1R3 
}

var firstT = []map[token.Type]bool { 
	{  token.T_21: true,  }, // GoGLL0R0 
	{  token.T_23: true,  token.T_0: true,  token.T_19: true,  }, // GoGLL0R1 
	{  }, // GoGLL0R2 
	{  token.T_11: true,  token.T_16: true,  token.T_18: true,  token.T_2: true,  token.T_25: true,  token.T_24: true,  token.T_17: true,  token.T_13: true,  token.T_20: true,  token.T_14: true,  token.T_8: true,  token.T_4: true,  }, // LexAlternates0R0 
	{  }, // LexAlternates0R1 
	{  token.T_8: true,  token.T_2: true,  token.T_25: true,  token.T_24: true,  token.T_16: true,  token.T_17: true,  token.T_13: true,  token.T_14: true,  token.T_11: true,  token.T_20: true,  token.T_18: true,  token.T_4: true,  }, // LexAlternates1R0 
	{  token.T_26: true,  }, // LexAlternates1R1 
	{  token.T_13: true,  token.T_20: true,  token.T_4: true,  token.T_17: true,  token.T_18: true,  token.T_16: true,  token.T_11: true,  token.T_8: true,  token.T_25: true,  token.T_24: true,  token.T_2: true,  token.T_14: true,  }, // LexAlternates1R2 
	{  }, // LexAlternates1R3 
	{  token.T_2: true,  }, // LexBracket0R0 
	{  }, // LexBracket0R1 
	{  token.T_11: true,  }, // LexBracket1R0 
	{  }, // LexBracket1R1 
	{  token.T_25: true,  }, // LexBracket2R0 
	{  }, // LexBracket2R1 
	{  token.T_8: true,  }, // LexBracket3R0 
	{  }, // LexBracket3R1 
	{  token.T_2: true,  }, // LexGroup0R0 
	{  token.T_20: true,  token.T_2: true,  token.T_18: true,  token.T_25: true,  token.T_24: true,  token.T_4: true,  token.T_17: true,  token.T_11: true,  token.T_13: true,  token.T_16: true,  token.T_14: true,  token.T_8: true,  }, // LexGroup0R1 
	{  token.T_3: true,  }, // LexGroup0R2 
	{  }, // LexGroup0R3 
	{  token.T_8: true,  }, // LexOneOrMore0R0 
	{  token.T_2: true,  token.T_14: true,  token.T_8: true,  token.T_13: true,  token.T_17: true,  token.T_24: true,  token.T_16: true,  token.T_20: true,  token.T_4: true,  token.T_11: true,  token.T_25: true,  token.T_18: true,  }, // LexOneOrMore0R1 
	{  token.T_9: true,  }, // LexOneOrMore0R2 
	{  }, // LexOneOrMore0R3 
	{  token.T_11: true,  }, // LexOptional0R0 
	{  token.T_11: true,  token.T_16: true,  token.T_14: true,  token.T_8: true,  token.T_17: true,  token.T_20: true,  token.T_4: true,  token.T_13: true,  token.T_24: true,  token.T_2: true,  token.T_18: true,  token.T_25: true,  }, // LexOptional0R1 
	{  token.T_12: true,  }, // LexOptional0R2 
	{  }, // LexOptional0R3 
	{  token.T_23: true,  }, // LexRule0R0 
	{  token.T_6: true,  }, // LexRule0R1 
	{  token.T_16: true,  token.T_20: true,  token.T_24: true,  token.T_4: true,  token.T_2: true,  token.T_8: true,  token.T_18: true,  token.T_11: true,  token.T_17: true,  token.T_13: true,  token.T_14: true,  token.T_25: true,  }, // LexRule0R2 
	{  token.T_7: true,  }, // LexRule0R3 
	{  }, // LexRule0R4 
	{  token.T_0: true,  }, // LexRule1R0 
	{  token.T_23: true,  }, // LexRule1R1 
	{  token.T_6: true,  }, // LexRule1R2 
	{  token.T_24: true,  token.T_2: true,  token.T_17: true,  token.T_18: true,  token.T_14: true,  token.T_8: true,  token.T_11: true,  token.T_16: true,  token.T_25: true,  token.T_4: true,  token.T_13: true,  token.T_20: true,  }, // LexRule1R3 
	{  token.T_7: true,  }, // LexRule1R4 
	{  }, // LexRule1R5 
	{  token.T_4: true,  }, // LexSymbol0R0 
	{  }, // LexSymbol0R1 
	{  token.T_13: true,  }, // LexSymbol1R0 
	{  token.T_22: true,  }, // LexSymbol1R1 
	{  }, // LexSymbol1R2 
	{  token.T_14: true,  }, // LexSymbol2R0 
	{  }, // LexSymbol2R1 
	{  token.T_2: true,  token.T_11: true,  token.T_25: true,  token.T_8: true,  }, // LexSymbol3R0 
	{  }, // LexSymbol3R1 
	{  token.T_18: true,  }, // LexSymbol4R0 
	{  token.T_22: true,  }, // LexSymbol4R1 
	{  }, // LexSymbol4R2 
	{  token.T_16: true,  token.T_24: true,  token.T_17: true,  token.T_20: true,  }, // LexSymbol5R0 
	{  }, // LexSymbol5R1 
	{  token.T_25: true,  }, // LexZeroOrMore0R0 
	{  token.T_24: true,  token.T_16: true,  token.T_2: true,  token.T_13: true,  token.T_25: true,  token.T_8: true,  token.T_18: true,  token.T_20: true,  token.T_4: true,  token.T_17: true,  token.T_11: true,  token.T_14: true,  }, // LexZeroOrMore0R1 
	{  token.T_27: true,  }, // LexZeroOrMore0R2 
	{  }, // LexZeroOrMore0R3 
	{  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  token.T_0: true,  }, // OrderedAlternates0R0 
	{  }, // OrderedAlternates0R1 
	{  token.T_19: true,  token.T_1: true,  token.T_15: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  }, // OrderedAlternates1R0 
	{  token.T_5: true,  }, // OrderedAlternates1R1 
	{  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  }, // OrderedAlternates1R2 
	{  }, // OrderedAlternates1R3 
	{  token.T_21: true,  }, // Package0R0 
	{  token.T_22: true,  }, // Package0R1 
	{  }, // Package0R2 
	{  token.T_2: true,  token.T_13: true,  token.T_14: true,  token.T_25: true,  token.T_8: true,  token.T_11: true,  token.T_16: true,  token.T_17: true,  token.T_18: true,  token.T_24: true,  token.T_4: true,  token.T_20: true,  }, // RegExp0R0 
	{  }, // RegExp0R1 
	{  token.T_11: true,  token.T_17: true,  token.T_4: true,  token.T_20: true,  token.T_18: true,  token.T_13: true,  token.T_14: true,  token.T_8: true,  token.T_2: true,  token.T_25: true,  token.T_16: true,  token.T_24: true,  }, // RegExp1R0 
	{  token.T_17: true,  token.T_13: true,  token.T_4: true,  token.T_2: true,  token.T_8: true,  token.T_11: true,  token.T_16: true,  token.T_24: true,  token.T_25: true,  token.T_20: true,  token.T_14: true,  token.T_18: true,  }, // RegExp1R1 
	{  }, // RegExp1R2 
	{  token.T_23: true,  token.T_0: true,  }, // Rule0R0 
	{  }, // Rule0R1 
	{  token.T_19: true,  }, // Rule1R0 
	{  }, // Rule1R1 
	{  token.T_0: true,  token.T_19: true,  token.T_23: true,  }, // Rules0R0 
	{  }, // Rules0R1 
	{  token.T_19: true,  token.T_23: true,  token.T_0: true,  }, // Rules1R0 
	{  token.T_23: true,  token.T_0: true,  token.T_19: true,  }, // Rules1R1 
	{  }, // Rules1R2 
	{  token.T_1: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  }, // SyntaxAlternate0R0 
	{  }, // SyntaxAlternate0R1 
	{  token.T_15: true,  }, // SyntaxAlternate1R0 
	{  }, // SyntaxAlternate1R1 
	{  token.T_1: true,  token.T_15: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  }, // SyntaxAlternates0R0 
	{  }, // SyntaxAlternates0R1 
	{  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  }, // SyntaxAlternates1R0 
	{  token.T_26: true,  }, // SyntaxAlternates1R1 
	{  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  }, // SyntaxAlternates1R2 
	{  }, // SyntaxAlternates1R3 
	{  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  token.T_0: true,  token.T_23: true,  }, // SyntaxAlternates2R0 
	{  token.T_5: true,  }, // SyntaxAlternates2R1 
	{  token.T_15: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  }, // SyntaxAlternates2R2 
	{  }, // SyntaxAlternates2R3 
	{  token.T_19: true,  }, // SyntaxAtom0R0 
	{  }, // SyntaxAtom0R1 
	{  token.T_23: true,  }, // SyntaxAtom1R0 
	{  }, // SyntaxAtom1R1 
	{  token.T_22: true,  }, // SyntaxAtom2R0 
	{  }, // SyntaxAtom2R1 
	{  token.T_19: true,  }, // SyntaxRule0R0 
	{  token.T_6: true,  }, // SyntaxRule0R1 
	{  token.T_15: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  }, // SyntaxRule0R2 
	{  token.T_7: true,  }, // SyntaxRule0R3 
	{  }, // SyntaxRule0R4 
	{  token.T_22: true,  token.T_19: true,  token.T_23: true,  }, // SyntaxSuff0R0 
	{  token.T_10: true,  }, // SyntaxSuff0R1 
	{  }, // SyntaxSuff0R2 
	{  token.T_1: true,  }, // SyntaxSymbol0R0 
	{  token.T_19: true,  token.T_23: true,  token.T_22: true,  }, // SyntaxSymbol0R1 
	{  }, // SyntaxSymbol0R2 
	{  token.T_0: true,  }, // SyntaxSymbol1R0 
	{  token.T_22: true,  token.T_19: true,  token.T_23: true,  }, // SyntaxSymbol1R1 
	{  }, // SyntaxSymbol1R2 
	{  token.T_23: true,  token.T_22: true,  token.T_19: true,  }, // SyntaxSymbol2R0 
	{  }, // SyntaxSymbol2R1 
	{  token.T_19: true,  token.T_23: true,  token.T_22: true,  }, // SyntaxSymbol3R0 
	{  }, // SyntaxSymbol3R1 
	{  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_0: true,  }, // SyntaxSymbols0R0 
	{  }, // SyntaxSymbols0R1 
	{  token.T_19: true,  token.T_1: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  }, // SyntaxSymbols1R0 
	{  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  }, // SyntaxSymbols1R1 
	{  }, // SyntaxSymbols1R2 
	{  token.T_16: true,  }, // UnicodeClass0R0 
	{  }, // UnicodeClass0R1 
	{  token.T_24: true,  }, // UnicodeClass1R0 
	{  }, // UnicodeClass1R1 
	{  token.T_17: true,  }, // UnicodeClass2R0 
	{  }, // UnicodeClass2R1 
	{  token.T_20: true,  }, // UnicodeClass3R0 
	{  }, // UnicodeClass3R1 
	{  token.T_1: true,  token.T_15: true,  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  }, // UnorderedAlternates0R0 
	{  }, // UnorderedAlternates0R1 
	{  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  token.T_0: true,  token.T_23: true,  }, // UnorderedAlternates1R0 
	{  token.T_26: true,  }, // UnorderedAlternates1R1 
	{  token.T_0: true,  token.T_23: true,  token.T_22: true,  token.T_19: true,  token.T_1: true,  token.T_15: true,  }, // UnorderedAlternates1R2 
	{  }, // UnorderedAlternates1R3 
}
