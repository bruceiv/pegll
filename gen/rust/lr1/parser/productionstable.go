//  Copyright 2020 Marius Ackerman
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package parser

import (
	"bytes"
	"fmt"
	"path"
	"strings"
	"text/template"

	"github.com/bruceiv/pegll/cfg"
	"github.com/bruceiv/pegll/lr1/basicprod"
	"github.com/bruceiv/pegll/lr1/states"
	"github.com/bruceiv/pegll/symbols"
	"github.com/goccmack/goutil/ioutil"
	"github.com/iancoleman/strcase"
)

type prodsTabData struct {
	Package        string
	ProdTab        []prodTabEntry
	NumProductions int
}

type prodTabEntry struct {
	String           string
	Id               string
	NTType           int
	NumSymbols       int
	ReduceFunc       string
	ReduceFuncID     string
	ReduceFuncParams string
}

func genProductionsTable(pkg string, prods []*basicprod.Production, states *states.States) {
	fname := path.Join(cfg.BaseDir, "src", "parser", "productions_table", "mod.rs")
	tmpl, err := template.New("parser productions table").Parse(prodsTabSrc)
	if err != nil {
		panic(err)
	}
	wr := new(bytes.Buffer)
	tmpl.Execute(wr, getProdsTab(pkg, prods, states))
	if err = ioutil.WriteFile(fname, wr.Bytes()); err != nil {
		panic(err)
	}
}

func getProdsTab(pkg string, prods []*basicprod.Production, states *states.States) *prodsTabData {
	data := &prodsTabData{
		Package: pkg,
		ProdTab: make([]prodTabEntry, len(prods)),
	}
	for i, prod := range prods {
		data.ProdTab[i].String = fmt.Sprintf("\"%s\"", prod.String())
		data.ProdTab[i].Id = prod.Head
		data.ProdTab[i].NTType = int(symbols.GetNTType(prod.Head))
		if len(prod.Body.Symbols) == 0 {
			data.ProdTab[i].NumSymbols = 0
			data.ProdTab[i].ReduceFunc = fmt.Sprintf("Ok(None)")
		} else {
			data.ProdTab[i].NumSymbols = len(prod.Body.Symbols)
			data.ProdTab[i].ReduceFuncID = fmt.Sprintf("%s_%d",
				strcase.ToSnake(prod.Head),
				prod.Alternate)
			data.ProdTab[i].ReduceFuncParams = getParamIDs(len(prod.Body.Symbols))
			data.ProdTab[i].ReduceFunc = fmt.Sprintf("%s_%d(%s)",
				strcase.ToSnake(prod.Head),
				prod.Alternate,
				getParamIDs(len(prod.Body.Symbols)))
		}
	}

	return data
}

func getParamIDs(n int) string {
	pids := make([]string, n)
	for i := range pids {
		pids[i] = fmt.Sprintf("x[%d]", i)
	}
	return strings.Join(pids, ",")
}

const prodsTabSrc = `//! Generated by GoGLL. Do not edit.

use crate::ast;
use lazy_static::lazy_static;

pub struct ProdTabEntry {
	pub string: String,
	id: String,
	pub nt_type: usize,
	index: usize,
	pub num_symbols: usize,
	pub reduce_func: fn(Vec<ast::Node>) -> Result<ast::Node, String>,
}

lazy_static! {
    pub static ref PROD_TABLE: Vec<ProdTabEntry> = {
		let mut m: Vec<ProdTabEntry> = Vec::with_capacity({{.NumProductions}});
		{{range $i, $entry := .ProdTab}}
        m.push(ProdTabEntry{
			string: {{$entry.String}}.to_string(),
			id: "{{$entry.Id}}".to_string(),
			nt_type: {{$entry.NTType}},
			index: {{$i}},
			num_symbols: {{$entry.NumSymbols}},
			reduce_func: ast::{{$entry.ReduceFuncID}},
				// |x: Vec<ast::Node>| -> Result<ast::Node, String> {
				// 	ast::{{$entry.ReduceFunc}}
				// },
		});
		{{end}}
        m
    };
}
`
