
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"string/parser/symbols"
	"string/token"
)

type Label int

const(
	EscOrComment0R0 Label = iota
	EscOrComment0R1
	EscOrComment1R0
	EscOrComment1R1
	EscOrComment2R0
	EscOrComment2R1
	EscOrComment3R0
	String0R0
	String0R1
	String0R2
	WS0R0
	WS0R1
	WS0R2
	WS1R0
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (l Label) IsNullable() bool {
	return nullable[l]
}

func (l Label) FirstContains(typ token.Type) bool {
	return firstT[l][typ]
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) Successor() *Slot {
	if s.EoR() {
		return nil
	} else {
		// TODO try slots[s.Label + 1]
		return slots[slotIndex[Index{s.NT,s.Alt,s.Pos+1}]]
	}
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	EscOrComment0R0: {
		symbols.NT_EscOrComment, 0, 0, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		EscOrComment0R0, 
	},
	EscOrComment0R1: {
		symbols.NT_EscOrComment, 0, 1, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		EscOrComment0R1, 
	},
	EscOrComment1R0: {
		symbols.NT_EscOrComment, 1, 0, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		EscOrComment1R0, 
	},
	EscOrComment1R1: {
		symbols.NT_EscOrComment, 1, 1, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		EscOrComment1R1, 
	},
	EscOrComment2R0: {
		symbols.NT_EscOrComment, 2, 0, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		EscOrComment2R0, 
	},
	EscOrComment2R1: {
		symbols.NT_EscOrComment, 2, 1, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		EscOrComment2R1, 
	},
	EscOrComment3R0: {
		symbols.NT_EscOrComment, 3, 0, 
		symbols.Symbols{ 
		}, 
		EscOrComment3R0, 
	},
	String0R0: {
		symbols.NT_String, 0, 0, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		String0R0, 
	},
	String0R1: {
		symbols.NT_String, 0, 1, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		String0R1, 
	},
	String0R2: {
		symbols.NT_String, 0, 2, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		String0R2, 
	},
	WS0R0: {
		symbols.NT_WS, 0, 0, 
		symbols.Symbols{  
			symbols.NT_EscOrComment, 
			symbols.NT_WS,
		}, 
		WS0R0, 
	},
	WS0R1: {
		symbols.NT_WS, 0, 1, 
		symbols.Symbols{  
			symbols.NT_EscOrComment, 
			symbols.NT_WS,
		}, 
		WS0R1, 
	},
	WS0R2: {
		symbols.NT_WS, 0, 2, 
		symbols.Symbols{  
			symbols.NT_EscOrComment, 
			symbols.NT_WS,
		}, 
		WS0R2, 
	},
	WS1R0: {
		symbols.NT_WS, 1, 0, 
		symbols.Symbols{ 
		}, 
		WS1R0, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_EscOrComment,0,0 }: EscOrComment0R0,
	Index{ symbols.NT_EscOrComment,0,1 }: EscOrComment0R1,
	Index{ symbols.NT_EscOrComment,1,0 }: EscOrComment1R0,
	Index{ symbols.NT_EscOrComment,1,1 }: EscOrComment1R1,
	Index{ symbols.NT_EscOrComment,2,0 }: EscOrComment2R0,
	Index{ symbols.NT_EscOrComment,2,1 }: EscOrComment2R1,
	Index{ symbols.NT_EscOrComment,3,0 }: EscOrComment3R0,
	Index{ symbols.NT_String,0,0 }: String0R0,
	Index{ symbols.NT_String,0,1 }: String0R1,
	Index{ symbols.NT_String,0,2 }: String0R2,
	Index{ symbols.NT_WS,0,0 }: WS0R0,
	Index{ symbols.NT_WS,0,1 }: WS0R1,
	Index{ symbols.NT_WS,0,2 }: WS0R2,
	Index{ symbols.NT_WS,1,0 }: WS1R0,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_String:[]Label{ String0R0 },
	symbols.NT_WS:[]Label{ WS0R0,WS1R0 },
	symbols.NT_EscOrComment:[]Label{ EscOrComment0R0,EscOrComment1R0,EscOrComment2R0,EscOrComment3R0 },
}

var nullable = []bool { 
	false, // EscOrComment0R0 
	true, // EscOrComment0R1 
	false, // EscOrComment1R0 
	true, // EscOrComment1R1 
	false, // EscOrComment2R0 
	true, // EscOrComment2R1 
	true, // EscOrComment3R0 
	false, // String0R0 
	true, // String0R1 
	true, // String0R2 
	true, // WS0R0 
	true, // WS0R1 
	true, // WS0R2 
	true, // WS1R0 
}

var firstT = []map[token.Type]bool { 
	{  token.T_1: true,  }, // EscOrComment0R0 
	{  }, // EscOrComment0R1 
	{  token.T_2: true,  }, // EscOrComment1R0 
	{  }, // EscOrComment1R1 
	{  token.T_0: true,  }, // EscOrComment2R0 
	{  }, // EscOrComment2R1 
	{  }, // EscOrComment3R0 
	{  token.T_3: true,  }, // String0R0 
	{  token.T_1: true,  token.T_2: true,  token.T_0: true,  }, // String0R1 
	{  }, // String0R2 
	{  token.T_1: true,  token.T_2: true,  token.T_0: true,  }, // WS0R0 
	{  token.T_1: true,  token.T_2: true,  token.T_0: true,  }, // WS0R1 
	{  }, // WS0R2 
	{  }, // WS1R0 
}
