//! Module ast is generated by GoGLL. Completed by user.

use crate::token;

use std::rc::Rc;

#[allow(dead_code)]
pub enum Node { 
	NT(String),
    T(Rc<token::Token>),
    None,
}

/// G0 : E1 ;
pub fn g_0_0(mut params: Vec<Node>) -> Result<Node, String> {
    Ok(params.remove(0))
}

/// E1 : E1 + T1 ;
pub fn e_1_0(mut params: Vec<Node>) -> Result<Node, String> {
    let mut e1 = if let Node::NT(s) = params.remove(0) {
        s
    } else {
        panic!()
    };
    e1.push_str(" + ");
    if let Node::NT(s) = params.remove(1) {
        e1.push_str(&s)
    } else {
        panic!()
    };
    Ok(Node::NT(e1))
}

/// E1 : T1 ;
pub fn e_1_1(mut params: Vec<Node>) -> Result<Node, String> {
    Ok(params.remove(0))
}

/// T1 : a ;
pub fn t_1_0(mut params: Vec<Node>) -> Result<Node, String> {
    let a: Node = params.remove(0);
    if let Node::T(tok) = a {
        Ok(Node::NT(tok.literal_string()))
    } else {
        panic!()
    }
}

