
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"XML/parser/symbols"
)

type Label int

const(
	EncName0R0 Label = iota
	EncName0R1
	EncName0R2
	LetDigSymAlts0R0
	LetDigSymAlts0R1
	LetDigSymAlts1R0
	LetDigSymAlts1R1
	LetDigSymAlts2R0
	LetDigSymAlts2R1
	LetDigSymAltsRepx00R0
	LetDigSymAltsRepx00R1
	LetDigSymAltsRepx00R2
	LetDigSymAltsRepx01R0
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	EncName0R0: {
		symbols.NT_EncName, 0, 0, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		EncName0R0, 
	},
	EncName0R1: {
		symbols.NT_EncName, 0, 1, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		EncName0R1, 
	},
	EncName0R2: {
		symbols.NT_EncName, 0, 2, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		EncName0R2, 
	},
	LetDigSymAlts0R0: {
		symbols.NT_LetDigSymAlts, 0, 0, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		LetDigSymAlts0R0, 
	},
	LetDigSymAlts0R1: {
		symbols.NT_LetDigSymAlts, 0, 1, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		LetDigSymAlts0R1, 
	},
	LetDigSymAlts1R0: {
		symbols.NT_LetDigSymAlts, 1, 0, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		LetDigSymAlts1R0, 
	},
	LetDigSymAlts1R1: {
		symbols.NT_LetDigSymAlts, 1, 1, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		LetDigSymAlts1R1, 
	},
	LetDigSymAlts2R0: {
		symbols.NT_LetDigSymAlts, 2, 0, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		LetDigSymAlts2R0, 
	},
	LetDigSymAlts2R1: {
		symbols.NT_LetDigSymAlts, 2, 1, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		LetDigSymAlts2R1, 
	},
	LetDigSymAltsRepx00R0: {
		symbols.NT_LetDigSymAltsRepx0, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LetDigSymAlts, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		LetDigSymAltsRepx00R0, 
	},
	LetDigSymAltsRepx00R1: {
		symbols.NT_LetDigSymAltsRepx0, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LetDigSymAlts, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		LetDigSymAltsRepx00R1, 
	},
	LetDigSymAltsRepx00R2: {
		symbols.NT_LetDigSymAltsRepx0, 0, 2, 
		symbols.Symbols{  
			symbols.NT_LetDigSymAlts, 
			symbols.NT_LetDigSymAltsRepx0,
		}, 
		LetDigSymAltsRepx00R2, 
	},
	LetDigSymAltsRepx01R0: {
		symbols.NT_LetDigSymAltsRepx0, 1, 0, 
		symbols.Symbols{ 
		}, 
		LetDigSymAltsRepx01R0, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_EncName,0,0 }: EncName0R0,
	Index{ symbols.NT_EncName,0,1 }: EncName0R1,
	Index{ symbols.NT_EncName,0,2 }: EncName0R2,
	Index{ symbols.NT_LetDigSymAlts,0,0 }: LetDigSymAlts0R0,
	Index{ symbols.NT_LetDigSymAlts,0,1 }: LetDigSymAlts0R1,
	Index{ symbols.NT_LetDigSymAlts,1,0 }: LetDigSymAlts1R0,
	Index{ symbols.NT_LetDigSymAlts,1,1 }: LetDigSymAlts1R1,
	Index{ symbols.NT_LetDigSymAlts,2,0 }: LetDigSymAlts2R0,
	Index{ symbols.NT_LetDigSymAlts,2,1 }: LetDigSymAlts2R1,
	Index{ symbols.NT_LetDigSymAltsRepx0,0,0 }: LetDigSymAltsRepx00R0,
	Index{ symbols.NT_LetDigSymAltsRepx0,0,1 }: LetDigSymAltsRepx00R1,
	Index{ symbols.NT_LetDigSymAltsRepx0,0,2 }: LetDigSymAltsRepx00R2,
	Index{ symbols.NT_LetDigSymAltsRepx0,1,0 }: LetDigSymAltsRepx01R0,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_EncName:[]Label{ EncName0R0 },
	symbols.NT_LetDigSymAltsRepx0:[]Label{ LetDigSymAltsRepx00R0,LetDigSymAltsRepx01R0 },
	symbols.NT_LetDigSymAlts:[]Label{ LetDigSymAlts0R0,LetDigSymAlts1R0,LetDigSymAlts2R0 },
}

