
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_ATT_VALUE NT = iota
	NT_Attribute 
	NT_CHAR_REF 
	NT_Content 
	NT_ContentAlts 
	NT_Document 
	NT_DubConClose 
	NT_ENTITY_REF 
	NT_ElemCloseAlts 
	NT_Element 
	NT_EncName 
	NT_EncodingDecl 
	NT_Eq 
	NT_Hex 
	NT_HexAlts 
	NT_LetColonAlts 
	NT_LetDigSymAlts 
	NT_Misc 
	NT_NAME 
	NT_NAME_CHAR 
	NT_OptEncDecl 
	NT_OptXMLDecl 
	NT_Prolog 
	NT_QuoEncNam 
	NT_QuoVerNum 
	NT_REFERENCE 
	NT_RepHexAlts0x 
	NT_RepLDSAlts0x 
	NT_RepMisc0x 
	NT_RepNameChar0x 
	NT_RepSAttx0x 
	NT_SAtt 
	NT_SinConClose 
	NT_SymRefAlts 
	NT_VersionInfo 
	NT_VersionNum 
	NT_XMLDecl 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // & 
	T_1  // &# 
	T_2  // &#x 
	T_3  // ' 
	T_4  // : 
	T_5  // ; 
	T_6  // </ 
	T_7  // <?xml 
	T_8  // = 
	T_9  // > 
	T_10  // ?> 
	T_11  // _ 
	T_12  // aA_fF 
	T_13  // andCars 
	T_14  // angLBrk 
	T_15  // charData 
	T_16  // comment 
	T_17  // dot_BSlashDash 
	T_18  // dubQu 
	T_19  // encoding 
	T_20  // exclamation 
	T_21  // let 
	T_22  // num 
	T_23  // optSpaceEsc 
	T_24  // repNum1x 
	T_25  // sinQu 
	T_26  // spaceEsc 
	T_27  // version 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"ATT_VALUE", /* NT_ATT_VALUE */
	"Attribute", /* NT_Attribute */
	"CHAR_REF", /* NT_CHAR_REF */
	"Content", /* NT_Content */
	"ContentAlts", /* NT_ContentAlts */
	"Document", /* NT_Document */
	"DubConClose", /* NT_DubConClose */
	"ENTITY_REF", /* NT_ENTITY_REF */
	"ElemCloseAlts", /* NT_ElemCloseAlts */
	"Element", /* NT_Element */
	"EncName", /* NT_EncName */
	"EncodingDecl", /* NT_EncodingDecl */
	"Eq", /* NT_Eq */
	"Hex", /* NT_Hex */
	"HexAlts", /* NT_HexAlts */
	"LetColonAlts", /* NT_LetColonAlts */
	"LetDigSymAlts", /* NT_LetDigSymAlts */
	"Misc", /* NT_Misc */
	"NAME", /* NT_NAME */
	"NAME_CHAR", /* NT_NAME_CHAR */
	"OptEncDecl", /* NT_OptEncDecl */
	"OptXMLDecl", /* NT_OptXMLDecl */
	"Prolog", /* NT_Prolog */
	"QuoEncNam", /* NT_QuoEncNam */
	"QuoVerNum", /* NT_QuoVerNum */
	"REFERENCE", /* NT_REFERENCE */
	"RepHexAlts0x", /* NT_RepHexAlts0x */
	"RepLDSAlts0x", /* NT_RepLDSAlts0x */
	"RepMisc0x", /* NT_RepMisc0x */
	"RepNameChar0x", /* NT_RepNameChar0x */
	"RepSAttx0x", /* NT_RepSAttx0x */
	"SAtt", /* NT_SAtt */
	"SinConClose", /* NT_SinConClose */
	"SymRefAlts", /* NT_SymRefAlts */
	"VersionInfo", /* NT_VersionInfo */
	"VersionNum", /* NT_VersionNum */
	"XMLDecl", /* NT_XMLDecl */ 
}

var tToString = []string { 
	"&", /* T_0 */
	"&#", /* T_1 */
	"&#x", /* T_2 */
	"'", /* T_3 */
	":", /* T_4 */
	";", /* T_5 */
	"</", /* T_6 */
	"<?xml", /* T_7 */
	"=", /* T_8 */
	">", /* T_9 */
	"?>", /* T_10 */
	"_", /* T_11 */
	"aA_fF", /* T_12 */
	"andCars", /* T_13 */
	"angLBrk", /* T_14 */
	"charData", /* T_15 */
	"comment", /* T_16 */
	"dot_BSlashDash", /* T_17 */
	"dubQu", /* T_18 */
	"encoding", /* T_19 */
	"exclamation", /* T_20 */
	"let", /* T_21 */
	"num", /* T_22 */
	"optSpaceEsc", /* T_23 */
	"repNum1x", /* T_24 */
	"sinQu", /* T_25 */
	"spaceEsc", /* T_26 */
	"version", /* T_27 */ 
}

var stringNT = map[string]NT{ 
	"ATT_VALUE":NT_ATT_VALUE,
	"Attribute":NT_Attribute,
	"CHAR_REF":NT_CHAR_REF,
	"Content":NT_Content,
	"ContentAlts":NT_ContentAlts,
	"Document":NT_Document,
	"DubConClose":NT_DubConClose,
	"ENTITY_REF":NT_ENTITY_REF,
	"ElemCloseAlts":NT_ElemCloseAlts,
	"Element":NT_Element,
	"EncName":NT_EncName,
	"EncodingDecl":NT_EncodingDecl,
	"Eq":NT_Eq,
	"Hex":NT_Hex,
	"HexAlts":NT_HexAlts,
	"LetColonAlts":NT_LetColonAlts,
	"LetDigSymAlts":NT_LetDigSymAlts,
	"Misc":NT_Misc,
	"NAME":NT_NAME,
	"NAME_CHAR":NT_NAME_CHAR,
	"OptEncDecl":NT_OptEncDecl,
	"OptXMLDecl":NT_OptXMLDecl,
	"Prolog":NT_Prolog,
	"QuoEncNam":NT_QuoEncNam,
	"QuoVerNum":NT_QuoVerNum,
	"REFERENCE":NT_REFERENCE,
	"RepHexAlts0x":NT_RepHexAlts0x,
	"RepLDSAlts0x":NT_RepLDSAlts0x,
	"RepMisc0x":NT_RepMisc0x,
	"RepNameChar0x":NT_RepNameChar0x,
	"RepSAttx0x":NT_RepSAttx0x,
	"SAtt":NT_SAtt,
	"SinConClose":NT_SinConClose,
	"SymRefAlts":NT_SymRefAlts,
	"VersionInfo":NT_VersionInfo,
	"VersionNum":NT_VersionNum,
	"XMLDecl":NT_XMLDecl,
}
