// Package parser is generated by gogll. Do not edit.
package parser

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"XML/lexer"
	"XML/parser/bsr"
	"XML/parser/slot"
	"XML/parser/symbols"
	"XML/token"
)

type parser struct {
	cI int

	R *descriptors
	U *descriptors

	popped   map[poppedNode]bool
	crf      map[clusterNode][]*crfNode
	crfNodes map[crfNode]*crfNode

	lex         *lexer.Lexer
	parseErrors []*Error

	bsrSet *bsr.Set
}

func newParser(l *lexer.Lexer) *parser {
	return &parser{
		cI:     0,
		lex:    l,
		R:      &descriptors{},
		U:      &descriptors{},
		popped: make(map[poppedNode]bool),
		crf: map[clusterNode][]*crfNode{
			{symbols.NT_Document, 0}: {},
		},
		crfNodes:    map[crfNode]*crfNode{},
		bsrSet:      bsr.New(symbols.NT_Document, l),
		parseErrors: nil,
	}
}

// Parse returns the BSR set containing the parse forest.
// If the parse was successfull []*Error is nil
func Parse(l *lexer.Lexer) (*bsr.Set, []*Error) {
	return newParser(l).parse()
}

func (p *parser) parse() (*bsr.Set, []*Error) {
	var L slot.Label
	m, cU := len(p.lex.Tokens)-1, 0
	p.ntAdd(symbols.NT_Document, 0)
	p.DumpDescriptors()
	for !p.R.empty() {
		L, cU, p.cI = p.R.remove()

		fmt.Println()
		fmt.Printf("L:%s, cI:%d, I[p.cI]:%s, cU:%d\n", L, p.cI, p.lex.Tokens[p.cI], cU)
		p.DumpDescriptors()

		switch L {
		case slot.ATT_VALUE0R0: // ATT_VALUE : ∙dubQu DubConClose

			p.bsrSet.Add(slot.ATT_VALUE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ATT_VALUE0R1) {
				p.parseError(slot.ATT_VALUE0R1, p.cI, first[slot.ATT_VALUE0R1])
				break
			}

			p.call(slot.ATT_VALUE0R2, cU, p.cI)
		case slot.ATT_VALUE0R2: // ATT_VALUE : dubQu DubConClose ∙

			if p.follow(symbols.NT_ATT_VALUE) {
				p.rtn(symbols.NT_ATT_VALUE, cU, p.cI)
			} else {
				p.parseError(slot.ATT_VALUE0R0, p.cI, followSets[symbols.NT_ATT_VALUE])
			}
		case slot.ATT_VALUE1R0: // ATT_VALUE : ∙' SinConClose

			p.bsrSet.Add(slot.ATT_VALUE1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ATT_VALUE1R1) {
				p.parseError(slot.ATT_VALUE1R1, p.cI, first[slot.ATT_VALUE1R1])
				break
			}

			p.call(slot.ATT_VALUE1R2, cU, p.cI)
		case slot.ATT_VALUE1R2: // ATT_VALUE : ' SinConClose ∙

			if p.follow(symbols.NT_ATT_VALUE) {
				p.rtn(symbols.NT_ATT_VALUE, cU, p.cI)
			} else {
				p.parseError(slot.ATT_VALUE1R0, p.cI, followSets[symbols.NT_ATT_VALUE])
			}
		case slot.Attribute0R0: // Attribute : ∙NAME optSpaceEsc = optSpaceEsc ATT_VALUE

			p.call(slot.Attribute0R1, cU, p.cI)
		case slot.Attribute0R1: // Attribute : NAME ∙optSpaceEsc = optSpaceEsc ATT_VALUE

			if !p.testSelect(slot.Attribute0R1) {
				p.parseError(slot.Attribute0R1, p.cI, first[slot.Attribute0R1])
				break
			}

			p.call(slot.Attribute0R2, cU, p.cI)
		case slot.Attribute0R2: // Attribute : NAME OptSpaceEsc ∙eq OptSpaceEsc ATT_VALUE

			if !p.testSelect(slot.Attribute0R2) {
				p.parseError(slot.Attribute0R2, p.cI, first[slot.Attribute0R2])
				break
			}

			p.bsrSet.Add(slot.Attribute0R3, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Attribute0R3) {
				p.parseError(slot.Attribute0R3, p.cI, first[slot.Attribute0R3])
				break
			}

			p.call(slot.Attribute0R4, cU, p.cI)
		case slot.Attribute0R4: // Attribute : NAME OptSpaceEsc eq OptSpaceEsc ∙ATT_VALUE

			if !p.testSelect(slot.Attribute0R4) {
				p.parseError(slot.Attribute0R4, p.cI, first[slot.Attribute0R4])
				break
			}

			p.call(slot.Attribute0R5, cU, p.cI)
		case slot.Attribute0R5: // Attribute : NAME optSpaceEsc = optSpaceEsc ATT_VALUE ∙

			if p.follow(symbols.NT_Attribute) {
				p.rtn(symbols.NT_Attribute, cU, p.cI)
			} else {
				p.parseError(slot.Attribute0R0, p.cI, followSets[symbols.NT_Attribute])
			}
		case slot.CHAR_REF0R0: // CHAR_REF : ∙&#x Hex ;

			p.bsrSet.Add(slot.CHAR_REF0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CHAR_REF0R1) {
				p.parseError(slot.CHAR_REF0R1, p.cI, first[slot.CHAR_REF0R1])
				break
			}

			p.call(slot.CHAR_REF0R2, cU, p.cI)
		case slot.CHAR_REF0R2: // CHAR_REF : &#x Hex ∙;

			if !p.testSelect(slot.CHAR_REF0R2) {
				p.parseError(slot.CHAR_REF0R2, p.cI, first[slot.CHAR_REF0R2])
				break
			}

			p.bsrSet.Add(slot.CHAR_REF0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CHAR_REF) {
				p.rtn(symbols.NT_CHAR_REF, cU, p.cI)
			} else {
				p.parseError(slot.CHAR_REF0R0, p.cI, followSets[symbols.NT_CHAR_REF])
			}
		case slot.CHAR_REF1R0: // CHAR_REF : ∙&# repNum1x ;

			p.bsrSet.Add(slot.CHAR_REF1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CHAR_REF1R1) {
				p.parseError(slot.CHAR_REF1R1, p.cI, first[slot.CHAR_REF1R1])
				break
			}

			p.bsrSet.Add(slot.CHAR_REF1R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CHAR_REF1R2) {
				p.parseError(slot.CHAR_REF1R2, p.cI, first[slot.CHAR_REF1R2])
				break
			}

			p.bsrSet.Add(slot.CHAR_REF1R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CHAR_REF) {
				p.rtn(symbols.NT_CHAR_REF, cU, p.cI)
			} else {
				p.parseError(slot.CHAR_REF1R0, p.cI, followSets[symbols.NT_CHAR_REF])
			}
		case slot.Content0R0: // Content : ∙ContentAlts Content

			p.call(slot.Content0R1, cU, p.cI)
		case slot.Content0R1: // Content : ContentAlts ∙Content

			if !p.testSelect(slot.Content0R1) {
				p.parseError(slot.Content0R1, p.cI, first[slot.Content0R1])
				break
			}

			p.call(slot.Content0R2, cU, p.cI)
		case slot.Content0R2: // Content : ContentAlts Content ∙

			if p.follow(symbols.NT_Content) {
				p.rtn(symbols.NT_Content, cU, p.cI)
			} else {
				p.parseError(slot.Content0R0, p.cI, followSets[symbols.NT_Content])
			}
		case slot.Content1R0: // Content : ∙
			p.bsrSet.AddEmpty(slot.Content1R0, p.cI)

			if p.follow(symbols.NT_Content) {
				p.rtn(symbols.NT_Content, cU, p.cI)
			} else {
				p.parseError(slot.Content1R0, p.cI, followSets[symbols.NT_Content])
			}
		case slot.ContentAlts0R0: // ContentAlts : ∙comment

			p.bsrSet.Add(slot.ContentAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ContentAlts) {
				p.rtn(symbols.NT_ContentAlts, cU, p.cI)
			} else {
				p.parseError(slot.ContentAlts0R0, p.cI, followSets[symbols.NT_ContentAlts])
			}
		case slot.ContentAlts1R0: // ContentAlts : ∙Element

			p.call(slot.ContentAlts1R1, cU, p.cI)
		case slot.ContentAlts1R1: // ContentAlts : Element ∙

			if p.follow(symbols.NT_ContentAlts) {
				p.rtn(symbols.NT_ContentAlts, cU, p.cI)
			} else {
				p.parseError(slot.ContentAlts1R0, p.cI, followSets[symbols.NT_ContentAlts])
			}
		case slot.ContentAlts2R0: // ContentAlts : ∙REFERENCE

			p.call(slot.ContentAlts2R1, cU, p.cI)
		case slot.ContentAlts2R1: // ContentAlts : REFERENCE ∙

			if p.follow(symbols.NT_ContentAlts) {
				p.rtn(symbols.NT_ContentAlts, cU, p.cI)
			} else {
				p.parseError(slot.ContentAlts2R0, p.cI, followSets[symbols.NT_ContentAlts])
			}
		case slot.ContentAlts3R0: // ContentAlts : ∙charData

			p.bsrSet.Add(slot.ContentAlts3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ContentAlts) {
				p.rtn(symbols.NT_ContentAlts, cU, p.cI)
			} else {
				p.parseError(slot.ContentAlts3R0, p.cI, followSets[symbols.NT_ContentAlts])
			}
		case slot.Document0R0: // Document : ∙Prolog Element RepMisc0x

			p.call(slot.Document0R1, cU, p.cI)
		case slot.Document0R1: // Document : Prolog ∙Element RepMisc0x

			if !p.testSelect(slot.Document0R1) {
				p.parseError(slot.Document0R1, p.cI, first[slot.Document0R1])
				break
			}

			p.call(slot.Document0R2, cU, p.cI)
		case slot.Document0R2: // Document : Prolog Element ∙RepMisc0x

			if !p.testSelect(slot.Document0R2) {
				p.parseError(slot.Document0R2, p.cI, first[slot.Document0R2])
				break
			}

			p.call(slot.Document0R3, cU, p.cI)
		case slot.Document0R3: // Document : Prolog Element RepMisc0x ∙

			if p.follow(symbols.NT_Document) {
				p.rtn(symbols.NT_Document, cU, p.cI)
			} else {
				p.parseError(slot.Document0R0, p.cI, followSets[symbols.NT_Document])
			}
		case slot.DubConClose0R0: // DubConClose : ∙dubQu

			p.bsrSet.Add(slot.DubConClose0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DubConClose) {
				p.rtn(symbols.NT_DubConClose, cU, p.cI)
			} else {
				p.parseError(slot.DubConClose0R0, p.cI, followSets[symbols.NT_DubConClose])
			}
		case slot.DubConClose1R0: // DubConClose : ∙SymRefAlts DubConClose

			p.call(slot.DubConClose1R1, cU, p.cI)
		case slot.DubConClose1R1: // DubConClose : SymRefAlts ∙DubConClose

			if !p.testSelect(slot.DubConClose1R1) {
				p.parseError(slot.DubConClose1R1, p.cI, first[slot.DubConClose1R1])
				break
			}

			p.call(slot.DubConClose1R2, cU, p.cI)
		case slot.DubConClose1R2: // DubConClose : SymRefAlts DubConClose ∙

			if p.follow(symbols.NT_DubConClose) {
				p.rtn(symbols.NT_DubConClose, cU, p.cI)
			} else {
				p.parseError(slot.DubConClose1R0, p.cI, followSets[symbols.NT_DubConClose])
			}
		case slot.ENTITY_REF0R0: // ENTITY_REF : ∙& NAME ;

			p.bsrSet.Add(slot.ENTITY_REF0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ENTITY_REF0R1) {
				p.parseError(slot.ENTITY_REF0R1, p.cI, first[slot.ENTITY_REF0R1])
				break
			}

			p.call(slot.ENTITY_REF0R2, cU, p.cI)
		case slot.ENTITY_REF0R2: // ENTITY_REF : & NAME ∙;

			if !p.testSelect(slot.ENTITY_REF0R2) {
				p.parseError(slot.ENTITY_REF0R2, p.cI, first[slot.ENTITY_REF0R2])
				break
			}

			p.bsrSet.Add(slot.ENTITY_REF0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ENTITY_REF) {
				p.rtn(symbols.NT_ENTITY_REF, cU, p.cI)
			} else {
				p.parseError(slot.ENTITY_REF0R0, p.cI, followSets[symbols.NT_ENTITY_REF])
			}
		case slot.ElemCloseAlts0R0: // ElemCloseAlts : ∙> Content </ NAME optSpaceEsc >

			p.bsrSet.Add(slot.ElemCloseAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ElemCloseAlts0R1) {
				p.parseError(slot.ElemCloseAlts0R1, p.cI, first[slot.ElemCloseAlts0R1])
				break
			}

			p.call(slot.ElemCloseAlts0R2, cU, p.cI)
		case slot.ElemCloseAlts0R2: // ElemCloseAlts : > Content ∙</ NAME optSpaceEsc >

			if !p.testSelect(slot.ElemCloseAlts0R2) {
				p.parseError(slot.ElemCloseAlts0R2, p.cI, first[slot.ElemCloseAlts0R2])
				break
			}

			p.bsrSet.Add(slot.ElemCloseAlts0R3, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ElemCloseAlts0R3) {
				p.parseError(slot.ElemCloseAlts0R3, p.cI, first[slot.ElemCloseAlts0R3])
				break
			}

			p.call(slot.ElemCloseAlts0R4, cU, p.cI)
		case slot.ElemCloseAlts0R4: // ElemCloseAlts : > Content </ NAME ∙optSpaceEsc >

			if !p.testSelect(slot.ElemCloseAlts0R4) {
				p.parseError(slot.ElemCloseAlts0R4, p.cI, first[slot.ElemCloseAlts0R4])
				break
			}

			p.call(slot.ElemCloseAlts0R5, cU, p.cI)
		case slot.ElemCloseAlts0R5: // ElemCloseAlts : angRBrk Content slashAngLBrk NAME OptSpaceEsc ∙angRBrk

			if !p.testSelect(slot.ElemCloseAlts0R5) {
				p.parseError(slot.ElemCloseAlts0R5, p.cI, first[slot.ElemCloseAlts0R5])
				break
			}

			p.bsrSet.Add(slot.ElemCloseAlts0R6, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ElemCloseAlts) {
				p.rtn(symbols.NT_ElemCloseAlts, cU, p.cI)
			} else {
				p.parseError(slot.ElemCloseAlts0R0, p.cI, followSets[symbols.NT_ElemCloseAlts])
			}
		case slot.ElemCloseAlts1R0: // ElemCloseAlts : ∙</

			p.bsrSet.Add(slot.ElemCloseAlts1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ElemCloseAlts) {
				p.rtn(symbols.NT_ElemCloseAlts, cU, p.cI)
			} else {
				p.parseError(slot.ElemCloseAlts1R0, p.cI, followSets[symbols.NT_ElemCloseAlts])
			}
		case slot.Element0R0: // Element : ∙angLBrk NAME RepSAttx0x optSpaceEsc ElemCloseAlts

			p.bsrSet.Add(slot.Element0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Element0R1) {
				p.parseError(slot.Element0R1, p.cI, first[slot.Element0R1])
				break
			}

			p.call(slot.Element0R2, cU, p.cI)
		case slot.Element0R2: // Element : angLBrk NAME ∙RepSAttx0x OptSpaceEsc ElemCloseAlts

			if !p.testSelect(slot.Element0R2) {
				p.parseError(slot.Element0R2, p.cI, first[slot.Element0R2])
				break
			}

			p.call(slot.Element0R3, cU, p.cI)
		case slot.Element0R3: // Element : angLBrk NAME RepSAttx0x ∙OptSpaceEsc ElemCloseAlts

			if !p.testSelect(slot.Element0R3) {
				p.parseError(slot.Element0R3, p.cI, first[slot.Element0R3])
				break
			}

			p.call(slot.Element0R4, cU, p.cI)
		case slot.Element0R4: // Element : angLBrk NAME RepSAttx0x OptSpaceEsc ∙ElemCloseAlts

			if !p.testSelect(slot.Element0R4) {
				p.parseError(slot.Element0R4, p.cI, first[slot.Element0R4])
				break
			}

			p.call(slot.Element0R5, cU, p.cI)
		case slot.Element0R5: // Element : angLBrk NAME RepSAttx0x OptSpaceEsc ElemCloseAlts ∙

			if p.follow(symbols.NT_Element) {
				p.rtn(symbols.NT_Element, cU, p.cI)
			} else {
				p.parseError(slot.Element0R0, p.cI, followSets[symbols.NT_Element])
			}
		case slot.EncName0R0: // EncName : ∙let RepLDSAlts0x

			p.bsrSet.Add(slot.EncName0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EncName0R1) {
				p.parseError(slot.EncName0R1, p.cI, first[slot.EncName0R1])
				break
			}

			p.call(slot.EncName0R2, cU, p.cI)
		case slot.EncName0R2: // EncName : let RepLDSAlts0x ∙

			if p.follow(symbols.NT_EncName) {
				p.rtn(symbols.NT_EncName, cU, p.cI)
			} else {
				p.parseError(slot.EncName0R0, p.cI, followSets[symbols.NT_EncName])
			}
		case slot.EncodingDecl0R0: // EncodingDecl : ∙spaceEsc encoding Eq QuoEncNam

			p.bsrSet.Add(slot.Encoding0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_Encoding, cU, p.cI)
		case slot.EncodingDecl0R0: // EncodingDecl : ∙Encoding Eq QuoEncNam

			p.call(slot.EncodingDecl0R1, cU, p.cI)
		case slot.EncodingDecl0R1: // EncodingDecl : Encoding ∙Eq QuoEncNam

			if !p.testSelect(slot.EncodingDecl0R1) {
				p.parseError(slot.EncodingDecl0R1, p.cI, first[slot.EncodingDecl0R1])
				break
			}

			p.call(slot.EncodingDecl0R2, cU, p.cI)
		case slot.EncodingDecl0R2: // EncodingDecl : Encoding Eq ∙QuoEncNam

			if !p.testSelect(slot.EncodingDecl0R2) {
				p.parseError(slot.EncodingDecl0R2, p.cI, first[slot.EncodingDecl0R2])
				break
			}

			p.call(slot.EncodingDecl0R3, cU, p.cI)
		case slot.EncodingDecl0R3: // EncodingDecl : Encoding Eq QuoEncNam ∙

			if p.follow(symbols.NT_EncodingDecl) {
				p.rtn(symbols.NT_EncodingDecl, cU, p.cI)
			} else {
				p.parseError(slot.EncodingDecl0R0, p.cI, followSets[symbols.NT_EncodingDecl])
			}
		case slot.Eq0R0: // Eq : ∙optSpaceEsc = optSpaceEsc

			if !p.testSelect(slot.Eq0R1) {
				p.parseError(slot.Eq0R1, p.cI, first[slot.Eq0R1])
				break
			}

			p.bsrSet.Add(slot.Eq0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Eq0R2) {
				p.parseError(slot.Eq0R2, p.cI, first[slot.Eq0R2])
				break
			}

			p.bsrSet.Add(slot.Eq0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Eq) {
				p.rtn(symbols.NT_Eq, cU, p.cI)
			} else {
				p.parseError(slot.Eq0R0, p.cI, followSets[symbols.NT_Eq])
			}
		case slot.Hex0R0: // Hex : ∙HexAlts RepHexAlts0x

			p.call(slot.Hex0R1, cU, p.cI)
		case slot.Hex0R1: // Hex : HexAlts ∙RepHexAlts0x

			if !p.testSelect(slot.Hex0R1) {
				p.parseError(slot.Hex0R1, p.cI, first[slot.Hex0R1])
				break
			}

			p.call(slot.Hex0R2, cU, p.cI)
		case slot.Hex0R2: // Hex : HexAlts RepHexAlts0x ∙

			if p.follow(symbols.NT_Hex) {
				p.rtn(symbols.NT_Hex, cU, p.cI)
			} else {
				p.parseError(slot.Hex0R0, p.cI, followSets[symbols.NT_Hex])
			}
		case slot.HexAlts0R0: // HexAlts : ∙num

			p.bsrSet.Add(slot.HexAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_HexAlts) {
				p.rtn(symbols.NT_HexAlts, cU, p.cI)
			} else {
				p.parseError(slot.HexAlts0R0, p.cI, followSets[symbols.NT_HexAlts])
			}
		case slot.HexAlts1R0: // HexAlts : ∙aA_fF

			p.bsrSet.Add(slot.HexAlts1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_HexAlts) {
				p.rtn(symbols.NT_HexAlts, cU, p.cI)
			} else {
				p.parseError(slot.HexAlts1R0, p.cI, followSets[symbols.NT_HexAlts])
			}
		case slot.LetColonAlts0R0: // LetColonAlts : ∙let

			p.bsrSet.Add(slot.LetColonAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetColonAlts) {
				p.rtn(symbols.NT_LetColonAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetColonAlts0R0, p.cI, followSets[symbols.NT_LetColonAlts])
			}
		case slot.LetColonAlts1R0: // LetColonAlts : ∙:

			p.bsrSet.Add(slot.LetColonAlts1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetColonAlts) {
				p.rtn(symbols.NT_LetColonAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetColonAlts1R0, p.cI, followSets[symbols.NT_LetColonAlts])
			}
		case slot.LetColonAlts2R0: // LetColonAlts : ∙_

			p.bsrSet.Add(slot.LetColonAlts2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetColonAlts) {
				p.rtn(symbols.NT_LetColonAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetColonAlts2R0, p.cI, followSets[symbols.NT_LetColonAlts])
			}
		case slot.LetDigSymAlts0R0: // LetDigSymAlts : ∙let

			p.bsrSet.Add(slot.LetDigSymAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetDigSymAlts) {
				p.rtn(symbols.NT_LetDigSymAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetDigSymAlts0R0, p.cI, followSets[symbols.NT_LetDigSymAlts])
			}
		case slot.LetDigSymAlts1R0: // LetDigSymAlts : ∙num

			p.bsrSet.Add(slot.LetDigSymAlts1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetDigSymAlts) {
				p.rtn(symbols.NT_LetDigSymAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetDigSymAlts1R0, p.cI, followSets[symbols.NT_LetDigSymAlts])
			}
		case slot.LetDigSymAlts2R0: // LetDigSymAlts : ∙_

			p.bsrSet.Add(slot.LetDigSymAlts2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetDigSymAlts) {
				p.rtn(symbols.NT_LetDigSymAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetDigSymAlts2R0, p.cI, followSets[symbols.NT_LetDigSymAlts])
			}
		case slot.LetDigSymAlts3R0: // LetDigSymAlts : ∙dot_BSlashDash

			p.bsrSet.Add(slot.LetDigSymAlts3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LetDigSymAlts) {
				p.rtn(symbols.NT_LetDigSymAlts, cU, p.cI)
			} else {
				p.parseError(slot.LetDigSymAlts3R0, p.cI, followSets[symbols.NT_LetDigSymAlts])
			}
		case slot.Misc0R0: // Misc : ∙comment

			p.bsrSet.Add(slot.Misc0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Misc) {
				p.rtn(symbols.NT_Misc, cU, p.cI)
			} else {
				p.parseError(slot.Misc0R0, p.cI, followSets[symbols.NT_Misc])
			}
		case slot.Misc1R0: // Misc : ∙spaceEsc

			p.bsrSet.Add(slot.Misc1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Misc) {
				p.rtn(symbols.NT_Misc, cU, p.cI)
			} else {
				p.parseError(slot.Misc1R0, p.cI, followSets[symbols.NT_Misc])
			}
		case slot.NAME0R0: // NAME : ∙LetColonAlts RepNameChar0x

			p.call(slot.NAME0R1, cU, p.cI)
		case slot.NAME0R1: // NAME : LetColonAlts ∙RepNameChar0x

			if !p.testSelect(slot.NAME0R1) {
				p.parseError(slot.NAME0R1, p.cI, first[slot.NAME0R1])
				break
			}

			p.call(slot.NAME0R2, cU, p.cI)
		case slot.NAME0R2: // NAME : LetColonAlts RepNameChar0x ∙

			if p.follow(symbols.NT_NAME) {
				p.rtn(symbols.NT_NAME, cU, p.cI)
			} else {
				p.parseError(slot.NAME0R0, p.cI, followSets[symbols.NT_NAME])
			}
		case slot.NAME_CHAR0R0: // NAME_CHAR : ∙let

			p.bsrSet.Add(slot.NAME_CHAR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NAME_CHAR) {
				p.rtn(symbols.NT_NAME_CHAR, cU, p.cI)
			} else {
				p.parseError(slot.NAME_CHAR0R0, p.cI, followSets[symbols.NT_NAME_CHAR])
			}
		case slot.NAME_CHAR1R0: // NAME_CHAR : ∙num

			p.bsrSet.Add(slot.NAME_CHAR1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NAME_CHAR) {
				p.rtn(symbols.NT_NAME_CHAR, cU, p.cI)
			} else {
				p.parseError(slot.NAME_CHAR1R0, p.cI, followSets[symbols.NT_NAME_CHAR])
			}
		case slot.NAME_CHAR2R0: // NAME_CHAR : ∙:

			p.bsrSet.Add(slot.NAME_CHAR2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NAME_CHAR) {
				p.rtn(symbols.NT_NAME_CHAR, cU, p.cI)
			} else {
				p.parseError(slot.NAME_CHAR2R0, p.cI, followSets[symbols.NT_NAME_CHAR])
			}
		case slot.NAME_CHAR3R0: // NAME_CHAR : ∙_

			p.bsrSet.Add(slot.NAME_CHAR3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NAME_CHAR) {
				p.rtn(symbols.NT_NAME_CHAR, cU, p.cI)
			} else {
				p.parseError(slot.NAME_CHAR3R0, p.cI, followSets[symbols.NT_NAME_CHAR])
			}
		case slot.NAME_CHAR4R0: // NAME_CHAR : ∙dot_BSlashDash

			p.bsrSet.Add(slot.NAME_CHAR4R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NAME_CHAR) {
				p.rtn(symbols.NT_NAME_CHAR, cU, p.cI)
			} else {
				p.parseError(slot.NAME_CHAR4R0, p.cI, followSets[symbols.NT_NAME_CHAR])
			}
		case slot.OptEncDecl0R0: // OptEncDecl : ∙EncodingDecl

			p.call(slot.OptEncDecl0R1, cU, p.cI)
		case slot.OptEncDecl0R1: // OptEncDecl : EncodingDecl ∙

			if p.follow(symbols.NT_OptEncDecl) {
				p.rtn(symbols.NT_OptEncDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptEncDecl0R0, p.cI, followSets[symbols.NT_OptEncDecl])
			}
		case slot.OptEncDecl1R0: // OptEncDecl : ∙
			p.bsrSet.AddEmpty(slot.OptEncDecl1R0, p.cI)

			if p.follow(symbols.NT_OptEncDecl) {
				p.rtn(symbols.NT_OptEncDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptEncDecl1R0, p.cI, followSets[symbols.NT_OptEncDecl])
			}
		case slot.OptXMLDecl0R0: // OptXMLDecl : ∙XMLDecl

			p.call(slot.OptXMLDecl0R1, cU, p.cI)
		case slot.OptXMLDecl0R1: // OptXMLDecl : XMLDecl ∙

			if p.follow(symbols.NT_OptXMLDecl) {
				p.rtn(symbols.NT_OptXMLDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptXMLDecl0R0, p.cI, followSets[symbols.NT_OptXMLDecl])
			}
		case slot.OptXMLDecl1R0: // OptXMLDecl : ∙
			p.bsrSet.AddEmpty(slot.OptXMLDecl1R0, p.cI)

			if p.follow(symbols.NT_OptXMLDecl) {
				p.rtn(symbols.NT_OptXMLDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptXMLDecl1R0, p.cI, followSets[symbols.NT_OptXMLDecl])
			}
		case slot.Prolog0R0: // Prolog : ∙OptXMLDecl RepMisc0x

			p.call(slot.Prolog0R1, cU, p.cI)
		case slot.Prolog0R1: // Prolog : OptXMLDecl ∙RepMisc0x

			if !p.testSelect(slot.Prolog0R1) {
				p.parseError(slot.Prolog0R1, p.cI, first[slot.Prolog0R1])
				break
			}

			p.call(slot.Prolog0R2, cU, p.cI)
		case slot.Prolog0R2: // Prolog : OptXMLDecl RepMisc0x ∙

			if p.follow(symbols.NT_Prolog) {
				p.rtn(symbols.NT_Prolog, cU, p.cI)
			} else {
				p.parseError(slot.Prolog0R0, p.cI, followSets[symbols.NT_Prolog])
			}
		case slot.QuoEncNam0R0: // QuoEncNam : ∙' EncName '

			p.bsrSet.Add(slot.QuoEncNam0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QuoEncNam0R1) {
				p.parseError(slot.QuoEncNam0R1, p.cI, first[slot.QuoEncNam0R1])
				break
			}

			p.call(slot.QuoEncNam0R2, cU, p.cI)
		case slot.QuoEncNam0R2: // QuoEncNam : ' EncName ∙'

			if !p.testSelect(slot.QuoEncNam0R2) {
				p.parseError(slot.QuoEncNam0R2, p.cI, first[slot.QuoEncNam0R2])
				break
			}

			p.bsrSet.Add(slot.QuoEncNam0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QuoEncNam) {
				p.rtn(symbols.NT_QuoEncNam, cU, p.cI)
			} else {
				p.parseError(slot.QuoEncNam0R0, p.cI, followSets[symbols.NT_QuoEncNam])
			}
		case slot.QuoEncNam1R0: // QuoEncNam : ∙dubQu EncName dubQu

			p.bsrSet.Add(slot.QuoEncNam1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QuoEncNam1R1) {
				p.parseError(slot.QuoEncNam1R1, p.cI, first[slot.QuoEncNam1R1])
				break
			}

			p.call(slot.QuoEncNam1R2, cU, p.cI)
		case slot.QuoEncNam1R2: // QuoEncNam : dubQu EncName ∙dubQu

			if !p.testSelect(slot.QuoEncNam1R2) {
				p.parseError(slot.QuoEncNam1R2, p.cI, first[slot.QuoEncNam1R2])
				break
			}

			p.bsrSet.Add(slot.QuoEncNam1R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QuoEncNam) {
				p.rtn(symbols.NT_QuoEncNam, cU, p.cI)
			} else {
				p.parseError(slot.QuoEncNam1R0, p.cI, followSets[symbols.NT_QuoEncNam])
			}
		case slot.QuoVerNum0R0: // QuoVerNum : ∙' VersionNum '

			p.bsrSet.Add(slot.QuoVerNum0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QuoVerNum0R1) {
				p.parseError(slot.QuoVerNum0R1, p.cI, first[slot.QuoVerNum0R1])
				break
			}

			p.call(slot.QuoVerNum0R2, cU, p.cI)
		case slot.QuoVerNum0R2: // QuoVerNum : ' VersionNum ∙'

			if !p.testSelect(slot.QuoVerNum0R2) {
				p.parseError(slot.QuoVerNum0R2, p.cI, first[slot.QuoVerNum0R2])
				break
			}

			p.bsrSet.Add(slot.QuoVerNum0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QuoVerNum) {
				p.rtn(symbols.NT_QuoVerNum, cU, p.cI)
			} else {
				p.parseError(slot.QuoVerNum0R0, p.cI, followSets[symbols.NT_QuoVerNum])
			}
		case slot.QuoVerNum1R0: // QuoVerNum : ∙dubQu VersionNum dubQu

			p.bsrSet.Add(slot.QuoVerNum1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QuoVerNum1R1) {
				p.parseError(slot.QuoVerNum1R1, p.cI, first[slot.QuoVerNum1R1])
				break
			}

			p.call(slot.QuoVerNum1R2, cU, p.cI)
		case slot.QuoVerNum1R2: // QuoVerNum : dubQu VersionNum ∙dubQu

			if !p.testSelect(slot.QuoVerNum1R2) {
				p.parseError(slot.QuoVerNum1R2, p.cI, first[slot.QuoVerNum1R2])
				break
			}

			p.bsrSet.Add(slot.QuoVerNum1R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_QuoVerNum) {
				p.rtn(symbols.NT_QuoVerNum, cU, p.cI)
			} else {
				p.parseError(slot.QuoVerNum1R0, p.cI, followSets[symbols.NT_QuoVerNum])
			}
		case slot.REFERENCE0R0: // REFERENCE : ∙ENTITY_REF

			p.call(slot.REFERENCE0R1, cU, p.cI)
		case slot.REFERENCE0R1: // REFERENCE : ENTITY_REF ∙

			if p.follow(symbols.NT_REFERENCE) {
				p.rtn(symbols.NT_REFERENCE, cU, p.cI)
			} else {
				p.parseError(slot.REFERENCE0R0, p.cI, followSets[symbols.NT_REFERENCE])
			}
		case slot.REFERENCE1R0: // REFERENCE : ∙CHAR_REF

			p.call(slot.REFERENCE1R1, cU, p.cI)
		case slot.REFERENCE1R1: // REFERENCE : CHAR_REF ∙

			if p.follow(symbols.NT_REFERENCE) {
				p.rtn(symbols.NT_REFERENCE, cU, p.cI)
			} else {
				p.parseError(slot.REFERENCE1R0, p.cI, followSets[symbols.NT_REFERENCE])
			}
		case slot.RepHexAlts0x0R0: // RepHexAlts0x : ∙HexAlts Hex

			p.call(slot.RepHexAlts0x0R1, cU, p.cI)
		case slot.RepHexAlts0x0R1: // RepHexAlts0x : HexAlts ∙Hex

			if !p.testSelect(slot.RepHexAlts0x0R1) {
				p.parseError(slot.RepHexAlts0x0R1, p.cI, first[slot.RepHexAlts0x0R1])
				break
			}

			p.call(slot.RepHexAlts0x0R2, cU, p.cI)
		case slot.RepHexAlts0x0R2: // RepHexAlts0x : HexAlts Hex ∙

			if p.follow(symbols.NT_RepHexAlts0x) {
				p.rtn(symbols.NT_RepHexAlts0x, cU, p.cI)
			} else {
				p.parseError(slot.RepHexAlts0x0R0, p.cI, followSets[symbols.NT_RepHexAlts0x])
			}
		case slot.RepHexAlts0x1R0: // RepHexAlts0x : ∙
			p.bsrSet.AddEmpty(slot.RepHexAlts0x1R0, p.cI)

			if p.follow(symbols.NT_RepHexAlts0x) {
				p.rtn(symbols.NT_RepHexAlts0x, cU, p.cI)
			} else {
				p.parseError(slot.RepHexAlts0x1R0, p.cI, followSets[symbols.NT_RepHexAlts0x])
			}
		case slot.RepLDSAlts0x0R0: // RepLDSAlts0x : ∙LetDigSymAlts RepLDSAlts0x

			p.call(slot.RepLDSAlts0x0R1, cU, p.cI)
		case slot.RepLDSAlts0x0R1: // RepLDSAlts0x : LetDigSymAlts ∙RepLDSAlts0x

			if !p.testSelect(slot.RepLDSAlts0x0R1) {
				p.parseError(slot.RepLDSAlts0x0R1, p.cI, first[slot.RepLDSAlts0x0R1])
				break
			}

			p.call(slot.RepLDSAlts0x0R2, cU, p.cI)
		case slot.RepLDSAlts0x0R2: // RepLDSAlts0x : LetDigSymAlts RepLDSAlts0x ∙

			if p.follow(symbols.NT_RepLDSAlts0x) {
				p.rtn(symbols.NT_RepLDSAlts0x, cU, p.cI)
			} else {
				p.parseError(slot.RepLDSAlts0x0R0, p.cI, followSets[symbols.NT_RepLDSAlts0x])
			}
		case slot.RepLDSAlts0x1R0: // RepLDSAlts0x : ∙
			p.bsrSet.AddEmpty(slot.RepLDSAlts0x1R0, p.cI)

			if p.follow(symbols.NT_RepLDSAlts0x) {
				p.rtn(symbols.NT_RepLDSAlts0x, cU, p.cI)
			} else {
				p.parseError(slot.RepLDSAlts0x1R0, p.cI, followSets[symbols.NT_RepLDSAlts0x])
			}
		case slot.RepMisc0x0R0: // RepMisc0x : ∙Misc RepMisc0x

			p.call(slot.RepMisc0x0R1, cU, p.cI)
		case slot.RepMisc0x0R1: // RepMisc0x : Misc ∙RepMisc0x

			if !p.testSelect(slot.RepMisc0x0R1) {
				p.parseError(slot.RepMisc0x0R1, p.cI, first[slot.RepMisc0x0R1])
				break
			}

			p.call(slot.RepMisc0x0R2, cU, p.cI)
		case slot.RepMisc0x0R2: // RepMisc0x : Misc RepMisc0x ∙

			if p.follow(symbols.NT_RepMisc0x) {
				p.rtn(symbols.NT_RepMisc0x, cU, p.cI)
			} else {
				p.parseError(slot.RepMisc0x0R0, p.cI, followSets[symbols.NT_RepMisc0x])
			}
		case slot.RepMisc0x1R0: // RepMisc0x : ∙
			p.bsrSet.AddEmpty(slot.RepMisc0x1R0, p.cI)

			if p.follow(symbols.NT_RepMisc0x) {
				p.rtn(symbols.NT_RepMisc0x, cU, p.cI)
			} else {
				p.parseError(slot.RepMisc0x1R0, p.cI, followSets[symbols.NT_RepMisc0x])
			}
		case slot.RepNameChar0x0R0: // RepNameChar0x : ∙NAME_CHAR RepNameChar0x

			p.call(slot.RepNameChar0x0R1, cU, p.cI)
		case slot.RepNameChar0x0R1: // RepNameChar0x : NAME_CHAR ∙RepNameChar0x

			if !p.testSelect(slot.RepNameChar0x0R1) {
				p.parseError(slot.RepNameChar0x0R1, p.cI, first[slot.RepNameChar0x0R1])
				break
			}

			p.call(slot.RepNameChar0x0R2, cU, p.cI)
		case slot.RepNameChar0x0R2: // RepNameChar0x : NAME_CHAR RepNameChar0x ∙

			if p.follow(symbols.NT_RepNameChar0x) {
				p.rtn(symbols.NT_RepNameChar0x, cU, p.cI)
			} else {
				p.parseError(slot.RepNameChar0x0R0, p.cI, followSets[symbols.NT_RepNameChar0x])
			}
		case slot.RepNameChar0x1R0: // RepNameChar0x : ∙
			p.bsrSet.AddEmpty(slot.RepNameChar0x1R0, p.cI)

			if p.follow(symbols.NT_RepNameChar0x) {
				p.rtn(symbols.NT_RepNameChar0x, cU, p.cI)
			} else {
				p.parseError(slot.RepNameChar0x1R0, p.cI, followSets[symbols.NT_RepNameChar0x])
			}
		case slot.RepSAttx0x0R0: // RepSAttx0x : ∙SAtt RepSAttx0x

			p.call(slot.RepSAttx0x0R1, cU, p.cI)
		case slot.RepSAttx0x0R1: // RepSAttx0x : SAtt ∙RepSAttx0x

			if !p.testSelect(slot.RepSAttx0x0R1) {
				p.parseError(slot.RepSAttx0x0R1, p.cI, first[slot.RepSAttx0x0R1])
				break
			}

			p.call(slot.RepSAttx0x0R2, cU, p.cI)
		case slot.RepSAttx0x0R2: // RepSAttx0x : SAtt RepSAttx0x ∙

			if p.follow(symbols.NT_RepSAttx0x) {
				p.rtn(symbols.NT_RepSAttx0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSAttx0x0R0, p.cI, followSets[symbols.NT_RepSAttx0x])
			}
		case slot.RepSAttx0x1R0: // RepSAttx0x : ∙
			p.bsrSet.AddEmpty(slot.RepSAttx0x1R0, p.cI)

			if p.follow(symbols.NT_RepSAttx0x) {
				p.rtn(symbols.NT_RepSAttx0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSAttx0x1R0, p.cI, followSets[symbols.NT_RepSAttx0x])
			}
		case slot.SAtt0R0: // SAtt : ∙spaceEsc Attribute

			p.bsrSet.Add(slot.SAtt0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SAtt0R1) {
				p.parseError(slot.SAtt0R1, p.cI, first[slot.SAtt0R1])
				break
			}

			p.call(slot.SAtt0R2, cU, p.cI)
		case slot.SAtt0R2: // SAtt : spaceEsc Attribute ∙

			if p.follow(symbols.NT_SAtt) {
				p.rtn(symbols.NT_SAtt, cU, p.cI)
			} else {
				p.parseError(slot.SAtt0R0, p.cI, followSets[symbols.NT_SAtt])
			}
		case slot.SinConClose0R0: // SinConClose : ∙'

			p.bsrSet.Add(slot.SinConClose0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_SinConClose) {
				p.rtn(symbols.NT_SinConClose, cU, p.cI)
			} else {
				p.parseError(slot.SinConClose0R0, p.cI, followSets[symbols.NT_SinConClose])
			}
		case slot.SinConClose1R0: // SinConClose : ∙SymRefAlts SinConClose

			p.call(slot.SinConClose1R1, cU, p.cI)
		case slot.SinConClose1R1: // SinConClose : SymRefAlts ∙SinConClose

			if !p.testSelect(slot.SinConClose1R1) {
				p.parseError(slot.SinConClose1R1, p.cI, first[slot.SinConClose1R1])
				break
			}

			p.call(slot.SinConClose1R2, cU, p.cI)
		case slot.SinConClose1R2: // SinConClose : SymRefAlts SinConClose ∙

			if p.follow(symbols.NT_SinConClose) {
				p.rtn(symbols.NT_SinConClose, cU, p.cI)
			} else {
				p.parseError(slot.SinConClose1R0, p.cI, followSets[symbols.NT_SinConClose])
			}
		case slot.SymRefAlts0R0: // SymRefAlts : ∙andCars

			p.bsrSet.Add(slot.SymRefAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_SymRefAlts) {
				p.rtn(symbols.NT_SymRefAlts, cU, p.cI)
			} else {
				p.parseError(slot.SymRefAlts0R0, p.cI, followSets[symbols.NT_SymRefAlts])
			}
		case slot.SymRefAlts1R0: // SymRefAlts : ∙REFERENCE

			p.call(slot.SymRefAlts1R1, cU, p.cI)
		case slot.SymRefAlts1R1: // SymRefAlts : REFERENCE ∙

			if p.follow(symbols.NT_SymRefAlts) {
				p.rtn(symbols.NT_SymRefAlts, cU, p.cI)
			} else {
				p.parseError(slot.SymRefAlts1R0, p.cI, followSets[symbols.NT_SymRefAlts])
			}
		case slot.VersionInfo0R0: // VersionInfo : ∙spaceEsc version Eq QuoVerNum

			p.bsrSet.Add(slot.Version0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_Version, cU, p.cI)
		case slot.VersionInfo0R0: // VersionInfo : ∙Version = QuoVerNum

			p.call(slot.VersionInfo0R1, cU, p.cI)
		case slot.VersionInfo0R1: // VersionInfo : Version ∙= QuoVerNum

			if !p.testSelect(slot.VersionInfo0R1) {
				p.parseError(slot.VersionInfo0R1, p.cI, first[slot.VersionInfo0R1])
				break
			}

			p.bsrSet.Add(slot.VersionInfo0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.VersionInfo0R2) {
				p.parseError(slot.VersionInfo0R2, p.cI, first[slot.VersionInfo0R2])
				break
			}

			p.call(slot.VersionInfo0R3, cU, p.cI)
		case slot.VersionInfo0R3: // VersionInfo : Version = QuoVerNum ∙

			if p.follow(symbols.NT_VersionInfo) {
				p.rtn(symbols.NT_VersionInfo, cU, p.cI)
			} else {
				p.parseError(slot.VersionInfo0R0, p.cI, followSets[symbols.NT_VersionInfo])
			}
		case slot.VersionNum0R0: // VersionNum : ∙NAME_CHAR RepNameChar0x

			p.call(slot.VersionNum0R1, cU, p.cI)
		case slot.VersionNum0R1: // VersionNum : NAME_CHAR ∙RepNameChar0x

			if !p.testSelect(slot.VersionNum0R1) {
				p.parseError(slot.VersionNum0R1, p.cI, first[slot.VersionNum0R1])
				break
			}

			p.call(slot.VersionNum0R2, cU, p.cI)
		case slot.VersionNum0R2: // VersionNum : NAME_CHAR RepNameChar0x ∙

			if p.follow(symbols.NT_VersionNum) {
				p.rtn(symbols.NT_VersionNum, cU, p.cI)
			} else {
				p.parseError(slot.VersionNum0R0, p.cI, followSets[symbols.NT_VersionNum])
			}
		case slot.XMLDecl0R0: // XMLDecl : ∙<?xml VersionInfo OptEncDecl optSpaceEsc ?>

			if !p.testSelect(slot.XMLDecl0R1) {
				p.parseError(slot.XMLDecl0R1, p.cI, first[slot.XMLDecl0R1])
				break
			}

			p.call(slot.XMLDecl0R2, cU, p.cI)
		case slot.XMLDecl0R2: // XMLDecl : <?xml VersionInfo ∙OptEncDecl optSpaceEsc ?>

			if !p.testSelect(slot.XMLDecl0R2) {
				p.parseError(slot.XMLDecl0R2, p.cI, first[slot.XMLDecl0R2])
				break
			}

			p.call(slot.XMLDecl0R3, cU, p.cI)
		case slot.XMLDecl0R3: // XMLDecl : <?xml VersionInfo OptEncDecl ∙optSpaceEsc ?>

			if !p.testSelect(slot.XMLDecl0R3) {
				p.parseError(slot.XMLDecl0R3, p.cI, first[slot.XMLDecl0R3])
				break
			}

			p.call(slot.XMLDecl0R4, cU, p.cI)
		case slot.XMLDecl0R4: // XMLDecl : XmlDeclStart VersionInfo OptEncodDecl OptSpaceEsc ∙XmlDeclEnd

			if !p.testSelect(slot.XMLDecl0R4) {
				p.parseError(slot.XMLDecl0R4, p.cI, first[slot.XMLDecl0R4])
				break
			}

			p.bsrSet.Add(slot.XMLDecl0R5, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_XMLDecl) {
				p.rtn(symbols.NT_XMLDecl, cU, p.cI)
			} else {
				p.parseError(slot.XMLDecl0R0, p.cI, followSets[symbols.NT_XMLDecl])
			}

		default:
			panic("This must not happen")
		}
	}
	if !p.bsrSet.Contain(symbols.NT_Document, 0, m) {
		p.sortParseErrors()
		return nil, p.parseErrors
	}
	return p.bsrSet, nil
}

func (p *parser) ntAdd(nt symbols.NT, j int) {
	// fmt.Printf("p.ntAdd(%s, %d)\n", nt, j)
	failed := true
	expected := map[token.Type]string{}
	for _, l := range slot.GetAlternates(nt) {
		if p.testSelect(l) {
			p.dscAdd(l, j, j)
			failed = false
		} else {
			for k, v := range first[l] {
				expected[k] = v
			}
		}
	}
	if failed {
		for _, l := range slot.GetAlternates(nt) {
			p.parseError(l, j, expected)
		}
	}
}

/*** Call Return Forest ***/

type poppedNode struct {
	X    symbols.NT
	k, j int
}

type clusterNode struct {
	X symbols.NT
	k int
}

type crfNode struct {
	L slot.Label
	i int
}

/*
suppose that L is Y ::=αX ·β
if there is no CRF node labelled (L,i)
	create one let u be the CRF node labelled (L,i)
if there is no CRF node labelled (X, j) {
	create a CRF node v labelled (X, j)
	create an edge from v to u
	ntAdd(X, j)
} else {
	let v be the CRF node labelled (X, j)
	if there is not an edge from v to u {
		create an edge from v to u
		for all ((X, j,h)∈P) {
			dscAdd(L, i, h);
			bsrAdd(L, i, j, h)
		}
	}
}
*/
func (p *parser) call(L slot.Label, i, j int) {
	// fmt.Printf("p.call(%s,%d,%d)\n", L,i,j)
	u, exist := p.crfNodes[crfNode{L, i}]
	// fmt.Printf("  u exist=%t\n", exist)
	if !exist {
		u = &crfNode{L, i}
		p.crfNodes[*u] = u
	}
	X := L.Symbols()[L.Pos()-1].(symbols.NT)
	ndV := clusterNode{X, j}
	v, exist := p.crf[ndV]
	if !exist {
		// fmt.Println("  v !exist")
		p.crf[ndV] = []*crfNode{u}
		p.ntAdd(X, j)
	} else {
		// fmt.Println("  v exist")
		if !existEdge(v, u) {
			// fmt.Printf("  !existEdge(%v)\n", u)
			p.crf[ndV] = append(v, u)
			// fmt.Printf("|popped|=%d\n", len(popped))
			for pnd := range p.popped {
				if pnd.X == X && pnd.k == j {
					p.dscAdd(L, i, pnd.j)
					p.bsrSet.Add(L, i, j, pnd.j)
				}
			}
		}
	}
}

func existEdge(nds []*crfNode, nd *crfNode) bool {
	for _, nd1 := range nds {
		if nd1 == nd {
			return true
		}
	}
	return false
}

func (p *parser) rtn(X symbols.NT, k, j int) {
	// fmt.Printf("p.rtn(%s,%d,%d)\n", X,k,j)
	pn := poppedNode{X, k, j}
	if _, exist := p.popped[pn]; !exist {
		p.popped[pn] = true
		for _, nd := range p.crf[clusterNode{X, k}] {
			p.dscAdd(nd.L, nd.i, j)
			p.bsrSet.Add(nd.L, nd.i, k, j)
		}
	}
}

// func CRFString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("CRF: {")
// 	for cn, nds := range crf{
// 		for _, nd := range nds {
// 			fmt.Fprintf(buf, "%s->%s, ", cn, nd)
// 		}
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

func (cn clusterNode) String() string {
	return fmt.Sprintf("(%s,%d)", cn.X, cn.k)
}

func (n crfNode) String() string {
	return fmt.Sprintf("(%s,%d)", n.L.String(), n.i)
}

// func PoppedString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("Popped: {")
// 	for p, _ := range popped {
// 		fmt.Fprintf(buf, "(%s,%d,%d) ", p.X, p.k, p.j)
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

/*** descriptors ***/

type descriptors struct {
	set []*descriptor
}

func (ds *descriptors) contain(d *descriptor) bool {
	for _, d1 := range ds.set {
		if d1 == d {
			return true
		}
	}
	return false
}

func (ds *descriptors) empty() bool {
	return len(ds.set) == 0
}

func (ds *descriptors) String() string {
	buf := new(bytes.Buffer)
	buf.WriteString("{")
	for i, d := range ds.set {
		if i > 0 {
			buf.WriteString("; ")
		}
		fmt.Fprintf(buf, "%s", d)
	}
	buf.WriteString("}")
	return buf.String()
}

type descriptor struct {
	L slot.Label
	k int
	i int
}

func (d *descriptor) String() string {
	return fmt.Sprintf("%s,%d,%d", d.L, d.k, d.i)
}

func (p *parser) dscAdd(L slot.Label, k, i int) {
	// fmt.Printf("p.dscAdd(%s,%d,%d)\n", L, k, i)
	d := &descriptor{L, k, i}
	if !p.U.contain(d) {
		p.R.set = append(p.R.set, d)
		p.U.set = append(p.U.set, d)
	}
}

func (ds *descriptors) remove() (L slot.Label, k, i int) {
	d := ds.set[len(ds.set)-1]
	ds.set = ds.set[:len(ds.set)-1]
	// fmt.Printf("remove: %s,%d,%d\n", d.L, d.k, d.i)
	return d.L, d.k, d.i
}

func (p *parser) DumpDescriptors() {
	p.DumpR()
	p.DumpU()
}

func (p *parser) DumpR() {
	fmt.Println("R:")
	for _, d := range p.R.set {
		fmt.Printf(" %s\n", d)
	}
}

func (p *parser) DumpU() {
	fmt.Println("U:")
	for _, d := range p.U.set {
		fmt.Printf(" %s\n", d)
	}
}

/*** TestSelect ***/

func (p *parser) follow(nt symbols.NT) bool {
	_, exist := followSets[nt][p.lex.Tokens[p.cI].Type()]
	return exist
}

func (p *parser) testSelect(l slot.Label) bool {
	_, exist := first[l][p.lex.Tokens[p.cI].Type()]
	// fmt.Printf("testSelect(%s) = %t\n", l, exist)
	return exist
}

var first = []map[token.Type]string{
	// ATT_VALUE : ∙dubQu DubConClose
	{
		token.T_18: "dubQu",
	},
	// ATT_VALUE : dubQu ∙DubConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_13: "andCars",
		token.T_18: "dubQu",
	},
	// ATT_VALUE : dubQu DubConClose ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// ATT_VALUE : ∙' SinConClose
	{
		token.T_3: "'",
	},
	// ATT_VALUE : ' ∙SinConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_13: "andCars",
	},
	// ATT_VALUE : ' SinConClose ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// Attribute : ∙NAME optSpaceEsc = optSpaceEsc ATT_VALUE
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// Attribute : NAME ∙optSpaceEsc = optSpaceEsc ATT_VALUE
	{
		token.T_23: "optSpaceEsc",
	},
	// Attribute : NAME optSpaceEsc ∙= optSpaceEsc ATT_VALUE
	{
		token.T_8: "=",
	},
	// Attribute : NAME optSpaceEsc = ∙optSpaceEsc ATT_VALUE
	{
		token.T_23: "optSpaceEsc",
	},
	// Attribute : NAME optSpaceEsc = optSpaceEsc ∙ATT_VALUE
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// Attribute : NAME optSpaceEsc = optSpaceEsc ATT_VALUE ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// CHAR_REF : ∙&#x Hex ;
	{
		token.T_2: "&#x",
	},
	// CHAR_REF : &#x ∙Hex ;
	{
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// CHAR_REF : &#x Hex ∙;
	{
		token.T_5: ";",
	},
	// CHAR_REF : &#x Hex ; ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// CHAR_REF : ∙&# repNum1x ;
	{
		token.T_1: "&#",
	},
	// CHAR_REF : &# ∙repNum1x ;
	{
		token.T_24: "repNum1x",
	},
	// CHAR_REF : &# repNum1x ∙;
	{
		token.T_5: ";",
	},
	// CHAR_REF : &# repNum1x ; ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// Content : ∙ContentAlts Content
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// Content : ContentAlts ∙Content
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_6:  "</",
	},
	// Content : ContentAlts Content ∙
	{
		token.T_6: "</",
	},
	// Content : ∙
	{
		token.T_6: "</",
	},
	// ContentAlts : ∙comment
	{
		token.T_16: "comment",
	},
	// ContentAlts : comment ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// ContentAlts : ∙Element
	{
		token.T_14: "angLBrk",
	},
	// ContentAlts : Element ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// ContentAlts : ∙REFERENCE
	{
		token.T_0: "&",
		token.T_1: "&#",
		token.T_2: "&#x",
	},
	// ContentAlts : REFERENCE ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// ContentAlts : ∙charData
	{
		token.T_15: "charData",
	},
	// ContentAlts : charData ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// Document : ∙Prolog Element RepMisc0x
	{
		token.T_7:  "<?xml",
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Document : Prolog ∙Element RepMisc0x
	{
		token.T_14: "angLBrk",
	},
	// Document : Prolog Element ∙RepMisc0x
	{
		token.T_16: "comment",
		token.T_26: "spaceEsc",
		token.EOF:  "$",
	},
	// Document : Prolog Element RepMisc0x ∙
	{
		token.EOF: "$",
	},
	// DubConClose : ∙dubQu
	{
		token.T_18: "dubQu",
	},
	// DubConClose : dubQu ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// DubConClose : ∙SymRefAlts DubConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_13: "andCars",
	},
	// DubConClose : SymRefAlts ∙DubConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_13: "andCars",
		token.T_18: "dubQu",
	},
	// DubConClose : SymRefAlts DubConClose ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// ENTITY_REF : ∙& NAME ;
	{
		token.T_0: "&",
	},
	// ENTITY_REF : & ∙NAME ;
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// ENTITY_REF : & NAME ∙;
	{
		token.T_5: ";",
	},
	// ENTITY_REF : & NAME ; ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// ElemCloseAlts : ∙> Content </ NAME optSpaceEsc >
	{
		token.T_9: ">",
	},
	// ElemCloseAlts : > ∙Content </ NAME optSpaceEsc >
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// ElemCloseAlts : > Content ∙</ NAME optSpaceEsc >
	{
		token.T_6: "</",
	},
	// ElemCloseAlts : > Content </ ∙NAME optSpaceEsc >
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// ElemCloseAlts : > Content </ NAME ∙optSpaceEsc >
	{
		token.T_23: "optSpaceEsc",
	},
	// ElemCloseAlts : > Content </ NAME optSpaceEsc ∙>
	{
		token.T_9: ">",
	},
	// ElemCloseAlts : > Content </ NAME optSpaceEsc > ∙
	{
		token.EOF:  "$",
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// ElemCloseAlts : ∙</
	{
		token.T_6: "</",
	},
	// ElemCloseAlts : </ ∙
	{
		token.EOF:  "$",
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Element : ∙angLBrk NAME RepSAttx0x OptSpaceEsc ElemCloseAlts
	{
		token.T_14: "angLBrk",
	},
	// Element : angLBrk ∙NAME RepSAttx0x OptSpaceEsc ElemCloseAlts
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// Element : angLBrk NAME ∙RepSAttx0x OptSpaceEsc ElemCloseAlts
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// Element : angLBrk NAME RepSAttx0x ∙OptSpaceEsc ElemCloseAlts
	{
		token.T_23: "optSpaceEsc",
	},
	// Element : angLBrk NAME RepSAttx0x OptSpaceEsc ∙ElemCloseAlts
	{
		token.T_6: "</",
		token.T_9: ">",
	},
	// Element : angLBrk NAME RepSAttx0x OptSpaceEsc ElemCloseAlts ∙
	{
		token.EOF:  "$",
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// EncName : ∙let RepLDSAlts0x
	{
		token.T_21: "let",
	},
	// EncName : let ∙RepLDSAlts0x
	{
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// EncName : let RepLDSAlts0x ∙
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// Encoding : ∙encoding
	{
		token.T_26: "spaceEsc",
	},
	// Encoding : encoding ∙
	{
		token.T_19: "encoding",
	},
	// EncodingDecl : ∙Encoding Eq QuoEncNam
	{
		token.T_23: "optSpaceEsc",
	},
	// EncodingDecl : Encoding ∙Eq QuoEncNam
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// EncodingDecl : Encoding Eq ∙QuoEncNam
	{
		token.T_23: "optSpaceEsc",
	},
	// Eq : ∙optSpaceEsc = optSpaceEsc
	{
		token.T_23: "optSpaceEsc",
	},
	// Eq : optSpaceEsc ∙= optSpaceEsc
	{
		token.T_8: "=",
	},
	// Eq : optSpaceEsc = ∙optSpaceEsc
	{
		token.T_23: "optSpaceEsc",
	},
	// Eq : optSpaceEsc = optSpaceEsc ∙
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// Hex : ∙HexAlts RepHexAlts0x
	{
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// Hex : HexAlts ∙RepHexAlts0x
	{
		token.T_12: "aA_fF",
		token.T_22: "num",
		token.T_5:  ";",
	},
	// Hex : HexAlts RepHexAlts0x ∙
	{
		token.T_5: ";",
	},
	// HexAlts : ∙num
	{
		token.T_22: "num",
	},
	// HexAlts : num ∙
	{
		token.T_5:  ";",
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// HexAlts : ∙aA_fF
	{
		token.T_12: "aA_fF",
	},
	// HexAlts : aA_fF ∙
	{
		token.T_5:  ";",
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// LetColonAlts : ∙let
	{
		token.T_21: "let",
	},
	// LetColonAlts : let ∙
	{
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// LetColonAlts : ∙:
	{
		token.T_4: ":",
	},
	// LetColonAlts : : ∙
	{
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// LetColonAlts : ∙_
	{
		token.T_11: "_",
	},
	// LetColonAlts : _ ∙
	{
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// LetDigSymAlts : ∙let
	{
		token.T_21: "let",
	},
	// LetDigSymAlts : let ∙
	{
		token.T_3:  "'",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
	},
	// LetDigSymAlts : ∙num
	{
		token.T_22: "num",
	},
	// LetDigSymAlts : num ∙
	{
		token.T_3:  "'",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
	},
	// LetDigSymAlts : ∙_
	{
		token.T_11: "_",
	},
	// LetDigSymAlts : _ ∙
	{
		token.T_3:  "'",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
	},
	// LetDigSymAlts : ∙dot_BSlashDash
	{
		token.T_17: "dot_BSlashDash",
	},
	// LetDigSymAlts : dot_BSlashDash ∙
	{
		token.T_3:  "'",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
	},
	// Misc : ∙comment
	{
		token.T_16: "comment",
	},
	// Misc : comment ∙
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Misc : ∙spaceEsc
	{
		token.T_26: "spaceEsc",
	},
	// Misc : spaceEsc ∙
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// NAME : ∙LetColonAlts RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// NAME : LetColonAlts ∙RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_5:  ";",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME : LetColonAlts RepNameChar0x ∙
	{
		token.T_5:  ";",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR : ∙let
	{
		token.T_21: "let",
	},
	// NAME_CHAR : let ∙
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR : ∙num
	{
		token.T_22: "num",
	},
	// NAME_CHAR : num ∙
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR : ∙:
	{
		token.T_4: ":",
	},
	// NAME_CHAR : : ∙
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR : ∙_
	{
		token.T_11: "_",
	},
	// NAME_CHAR : _ ∙
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR : ∙dot_BSlashDash
	{
		token.T_17: "dot_BSlashDash",
	},
	// NAME_CHAR : dot_BSlashDash ∙
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// OptEncDecl : ∙EncodingDecl
	{
		token.T_26: "spaceEsc",
	},
	// OptEncDecl : EncodingDecl ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// OptEncDecl : ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// OptXMLDecl : ∙XMLDecl
	{
		token.T_7: "<?xml",
	},
	// OptXMLDecl : XMLDecl ∙
	{
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// OptXMLDecl : ∙
	{
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Prolog : ∙OptXMLDecl RepMisc0x
	{
		token.T_7:  "<?xml",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
		token.T_14: "angLBrk",
	},
	// Prolog : OptXMLDecl ∙RepMisc0x
	{
		token.T_16: "comment",
		token.T_26: "spaceEsc",
		token.T_14: "angLBrk",
	},
	// Prolog : OptXMLDecl RepMisc0x ∙
	{
		token.T_14: "angLBrk",
	},
	// QuoEncNam : ∙' EncName '
	{
		token.T_3: "'",
	},
	// QuoEncNam : ' ∙EncName '
	{
		token.T_21: "let",
	},
	// QuoEncNam : ' EncName ∙'
	{
		token.T_3: "'",
	},
	// QuoEncNam : ' EncName ' ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// QuoEncNam : ∙dubQu EncName dubQu
	{
		token.T_18: "dubQu",
	},
	// QuoEncNam : dubQu ∙EncName dubQu
	{
		token.T_21: "let",
	},
	// QuoEncNam : dubQu EncName ∙dubQu
	{
		token.T_18: "dubQu",
	},
	// QuoEncNam : dubQu EncName dubQu ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// QuoVerNum : ∙' VersionNum '
	{
		token.T_3: "'",
	},
	// QuoVerNum : ' ∙VersionNum '
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
	},
	// QuoVerNum : ' VersionNum ∙'
	{
		token.T_3: "'",
	},
	// QuoVerNum : ' VersionNum ' ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// QuoVerNum : ∙dubQu VersionNum dubQu
	{
		token.T_18: "dubQu",
	},
	// QuoVerNum : dubQu ∙VersionNum dubQu
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
	},
	// QuoVerNum : dubQu VersionNum ∙dubQu
	{
		token.T_18: "dubQu",
	},
	// QuoVerNum : dubQu VersionNum dubQu ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// REFERENCE : ∙ENTITY_REF
	{
		token.T_0: "&",
	},
	// REFERENCE : ENTITY_REF ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// REFERENCE : ∙CHAR_REF
	{
		token.T_1: "&#",
		token.T_2: "&#x",
	},
	// REFERENCE : CHAR_REF ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// RepHexAlts0x : ∙HexAlts Hex
	{
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// RepHexAlts0x : HexAlts ∙Hex
	{
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// RepHexAlts0x : HexAlts Hex ∙
	{
		token.T_5: ";",
	},
	// RepHexAlts0x : ∙
	{
		token.T_5: ";",
	},
	// RepLDSAlts0x : ∙LetDigSymAlts RepLDSAlts0x
	{
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
	},
	// RepLDSAlts0x : LetDigSymAlts ∙RepLDSAlts0x
	{
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// RepLDSAlts0x : LetDigSymAlts RepLDSAlts0x ∙
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// RepLDSAlts0x : ∙
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// RepMisc0x : ∙Misc RepMisc0x
	{
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// RepMisc0x : Misc ∙RepMisc0x
	{
		token.T_16: "comment",
		token.T_26: "spaceEsc",
		token.EOF:  "$",
		token.T_14: "angLBrk",
	},
	// RepMisc0x : Misc RepMisc0x ∙
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
	},
	// RepMisc0x : ∙
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
	},
	// RepNameChar0x : ∙NAME_CHAR RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
	},
	// RepNameChar0x : NAME_CHAR ∙RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_3:  "'",
		token.T_5:  ";",
		token.T_18: "dubQu",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// RepNameChar0x : NAME_CHAR RepNameChar0x ∙
	{
		token.T_3:  "'",
		token.T_5:  ";",
		token.T_18: "dubQu",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// RepNameChar0x : ∙
	{
		token.T_3:  "'",
		token.T_5:  ";",
		token.T_18: "dubQu",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// RepSAttx0x : ∙SAtt RepSAttx0x
	{
		token.T_26: "spaceEsc",
	},
	// RepSAttx0x : SAtt ∙RepSAttx0x
	{
		token.T_26: "spaceEsc",
		token.T_23: "optSpaceEsc",
	},
	// RepSAttx0x : SAtt RepSAttx0x ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// RepSAttx0x : ∙
	{
		token.T_23: "optSpaceEsc",
	},
	// SAtt : ∙spaceEsc Attribute
	{
		token.T_26: "spaceEsc",
	},
	// SAtt : spaceEsc ∙Attribute
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_21: "let",
	},
	// SAtt : spaceEsc Attribute ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// SinConClose : ∙'
	{
		token.T_3: "'",
	},
	// SinConClose : ' ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// SinConClose : ∙SymRefAlts SinConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_13: "andCars",
	},
	// SinConClose : SymRefAlts ∙SinConClose
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_13: "andCars",
	},
	// SinConClose : SymRefAlts SinConClose ∙
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// SymRefAlts : ∙andCars
	{
		token.T_13: "andCars",
	},
	// SymRefAlts : andCars ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_13: "andCars",
		token.T_18: "dubQu",
	},
	// SymRefAlts : ∙REFERENCE
	{
		token.T_0: "&",
		token.T_1: "&#",
		token.T_2: "&#x",
	},
	// SymRefAlts : REFERENCE ∙
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_13: "andCars",
		token.T_18: "dubQu",
	},
	// Version : ∙version
	{
		token.T_26: "spaceEsc",
	},
	// Version : version ∙
	{
		token.T_27: "version",
	},
	// VersionInfo : ∙Version = QuoVerNum
	{
		token.T_23: "optSpaceEsc",
	},
	// VersionInfo : Version ∙= QuoVerNum
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// VersionInfo : Version = ∙QuoVerNum
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// VersionNum : ∙NAME_CHAR RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
	},
	// VersionNum : NAME_CHAR ∙RepNameChar0x
	{
		token.T_4:  ":",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// VersionNum : NAME_CHAR RepNameChar0x ∙
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// XMLDecl : ∙<?xml VersionInfo OptEncDecl optSpaceEsc ?>
	{
		token.T_7: "<?xml",
	},
	// XMLDecl : <?xml ∙VersionInfo OptEncDecl optSpaceEsc ?>
	{
		token.T_26: "spaceEsc",
	},
	// XMLDecl : <?xml VersionInfo ∙OptEncDecl optSpaceEsc ?>
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// XMLDecl : <?xml VersionInfo OptEncDecl ∙optSpaceEsc ?>
	{
		token.T_23: "optSpaceEsc",
	},
	// XMLDecl : <?xml VersionInfo OptEncDecl optSpaceEsc ∙?>
	{
		token.T_10: "?>",
	},
	// XMLDecl : <?xml VersionInfo OptEncDecl optSpaceEsc ?> ∙
	{
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
}

var followSets = []map[token.Type]string{
	// ATT_VALUE
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// Attribute
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// CHAR_REF
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// Content
	{
		token.T_6: "</",
	},
	// ContentAlts
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
	},
	// Document
	{
		token.EOF: "$",
	},
	// DubConClose
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// ENTITY_REF
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// ElemCloseAlts
	{
		token.EOF:  "$",
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Element
	{
		token.EOF:  "$",
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_6:  "</",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// EncName
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// EncodingDecl
	{
		token.T_23: "optSpaceEsc",
	},
	// Eq
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// Hex
	{
		token.T_5: ";",
	},
	// HexAlts
	{
		token.T_5:  ";",
		token.T_12: "aA_fF",
		token.T_22: "num",
	},
	// LetColonAlts
	{
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// LetDigSymAlts
	{
		token.T_3:  "'",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
	},
	// Misc
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// NAME
	{
		token.T_5:  ";",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// NAME_CHAR
	{
		token.T_3:  "'",
		token.T_4:  ":",
		token.T_5:  ";",
		token.T_11: "_",
		token.T_17: "dot_BSlashDash",
		token.T_18: "dubQu",
		token.T_21: "let",
		token.T_22: "num",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// OptEncDecl
	{
		token.T_23: "optSpaceEsc",
	},
	// OptXMLDecl
	{
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
	// Prolog
	{
		token.T_14: "angLBrk",
	},
	// QuoEncNam
	{
		token.T_23: "optSpaceEsc",
	},
	// QuoVerNum
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// REFERENCE
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_6:  "</",
		token.T_13: "andCars",
		token.T_14: "angLBrk",
		token.T_15: "charData",
		token.T_16: "comment",
		token.T_18: "dubQu",
	},
	// RepHexAlts0x
	{
		token.T_5: ";",
	},
	// RepLDSAlts0x
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// RepMisc0x
	{
		token.EOF:  "$",
		token.T_14: "angLBrk",
	},
	// RepNameChar0x
	{
		token.T_3:  "'",
		token.T_5:  ";",
		token.T_18: "dubQu",
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// RepSAttx0x
	{
		token.T_23: "optSpaceEsc",
	},
	// SAtt
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// SinConClose
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// SymRefAlts
	{
		token.T_0:  "&",
		token.T_1:  "&#",
		token.T_2:  "&#x",
		token.T_3:  "'",
		token.T_13: "andCars",
		token.T_18: "dubQu",
	},
	// VersionInfo
	{
		token.T_23: "optSpaceEsc",
		token.T_26: "spaceEsc",
	},
	// VersionNum
	{
		token.T_3:  "'",
		token.T_18: "dubQu",
	},
	// XMLDecl
	{
		token.T_14: "angLBrk",
		token.T_16: "comment",
		token.T_26: "spaceEsc",
	},
}

/*** Errors ***/

/*
Error is returned by Parse at every point at which the parser fails to parse
a grammar production. For non-LL-1 grammars there will be an error for each
alternate attempted by the parser.

The errors are sorted in descending order of input position (index of token in
the stream of tokens).

Normally the error of interest is the one that has parsed the largest number of
tokens.
*/
type Error struct {
	// Index of token that caused the error.
	cI int

	// Grammar slot at which the error occured.
	Slot slot.Label

	// The token at which the error occurred.
	Token *token.Token

	// The line and column in the input text at which the error occurred
	Line, Column int

	// The tokens expected at the point where the error occurred
	Expected map[token.Type]string
}

func (pe *Error) String() string {
	w := new(bytes.Buffer)
	fmt.Fprintf(w, "Parse Error: %s I[%d]=%s at line %d col %d\n",
		pe.Slot, pe.cI, pe.Token, pe.Line, pe.Column)
	exp := []string{}
	for _, e := range pe.Expected {
		exp = append(exp, e)
	}
	fmt.Fprintf(w, "Expected one of: [%s]", strings.Join(exp, ","))
	return w.String()
}

func (p *parser) parseError(slot slot.Label, i int, expected map[token.Type]string) {
	pe := &Error{cI: i, Slot: slot, Token: p.lex.Tokens[i], Expected: expected}
	p.parseErrors = append(p.parseErrors, pe)
}

func (p *parser) sortParseErrors() {
	sort.Slice(p.parseErrors,
		func(i, j int) bool {
			return p.parseErrors[j].Token.Lext() < p.parseErrors[i].Token.Lext()
		})
	for _, pe := range p.parseErrors {
		pe.Line, pe.Column = p.lex.GetLineColumn(pe.Token.Lext())
	}
}
