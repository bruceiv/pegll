
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"miniegg/parser/symbols"
)

type Label int

const(
	Expr0R0 Label = iota
	Expr0R1
	Expr0R2
	ExprRep0R0
	ExprRep0R1
	ExprRep0R2
	ExprRep1R0
	Grammar0R0
	Grammar0R1
	Grammar0R2
	Rule0R0
	Rule0R1
	Rule0R2
	Rule0R3
	Rule0R4
	RuleRep0R0
	RuleRep0R1
	RuleRep0R2
	RuleRep1R0
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	Expr0R0: {
		symbols.NT_Expr, 0, 0, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_3,
		}, 
		Expr0R0, 
	},
	Expr0R1: {
		symbols.NT_Expr, 0, 1, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_3,
		}, 
		Expr0R1, 
	},
	Expr0R2: {
		symbols.NT_Expr, 0, 2, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_3,
		}, 
		Expr0R2, 
	},
	ExprRep0R0: {
		symbols.NT_ExprRep, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Expr, 
			symbols.NT_ExprRep,
		}, 
		ExprRep0R0, 
	},
	ExprRep0R1: {
		symbols.NT_ExprRep, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Expr, 
			symbols.NT_ExprRep,
		}, 
		ExprRep0R1, 
	},
	ExprRep0R2: {
		symbols.NT_ExprRep, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Expr, 
			symbols.NT_ExprRep,
		}, 
		ExprRep0R2, 
	},
	ExprRep1R0: {
		symbols.NT_ExprRep, 1, 0, 
		symbols.Symbols{ 
		}, 
		ExprRep1R0, 
	},
	Grammar0R0: {
		symbols.NT_Grammar, 0, 0, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_RuleRep,
		}, 
		Grammar0R0, 
	},
	Grammar0R1: {
		symbols.NT_Grammar, 0, 1, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_RuleRep,
		}, 
		Grammar0R1, 
	},
	Grammar0R2: {
		symbols.NT_Grammar, 0, 2, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_RuleRep,
		}, 
		Grammar0R2, 
	},
	Rule0R0: {
		symbols.NT_Rule, 0, 0, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_1, 
			symbols.T_0, 
			symbols.NT_ExprRep,
		}, 
		Rule0R0, 
	},
	Rule0R1: {
		symbols.NT_Rule, 0, 1, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_1, 
			symbols.T_0, 
			symbols.NT_ExprRep,
		}, 
		Rule0R1, 
	},
	Rule0R2: {
		symbols.NT_Rule, 0, 2, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_1, 
			symbols.T_0, 
			symbols.NT_ExprRep,
		}, 
		Rule0R2, 
	},
	Rule0R3: {
		symbols.NT_Rule, 0, 3, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_1, 
			symbols.T_0, 
			symbols.NT_ExprRep,
		}, 
		Rule0R3, 
	},
	Rule0R4: {
		symbols.NT_Rule, 0, 4, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.T_1, 
			symbols.T_0, 
			symbols.NT_ExprRep,
		}, 
		Rule0R4, 
	},
	RuleRep0R0: {
		symbols.NT_RuleRep, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RuleRep,
		}, 
		RuleRep0R0, 
	},
	RuleRep0R1: {
		symbols.NT_RuleRep, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RuleRep,
		}, 
		RuleRep0R1, 
	},
	RuleRep0R2: {
		symbols.NT_RuleRep, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RuleRep,
		}, 
		RuleRep0R2, 
	},
	RuleRep1R0: {
		symbols.NT_RuleRep, 1, 0, 
		symbols.Symbols{ 
		}, 
		RuleRep1R0, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_Expr,0,0 }: Expr0R0,
	Index{ symbols.NT_Expr,0,1 }: Expr0R1,
	Index{ symbols.NT_Expr,0,2 }: Expr0R2,
	Index{ symbols.NT_ExprRep,0,0 }: ExprRep0R0,
	Index{ symbols.NT_ExprRep,0,1 }: ExprRep0R1,
	Index{ symbols.NT_ExprRep,0,2 }: ExprRep0R2,
	Index{ symbols.NT_ExprRep,1,0 }: ExprRep1R0,
	Index{ symbols.NT_Grammar,0,0 }: Grammar0R0,
	Index{ symbols.NT_Grammar,0,1 }: Grammar0R1,
	Index{ symbols.NT_Grammar,0,2 }: Grammar0R2,
	Index{ symbols.NT_Rule,0,0 }: Rule0R0,
	Index{ symbols.NT_Rule,0,1 }: Rule0R1,
	Index{ symbols.NT_Rule,0,2 }: Rule0R2,
	Index{ symbols.NT_Rule,0,3 }: Rule0R3,
	Index{ symbols.NT_Rule,0,4 }: Rule0R4,
	Index{ symbols.NT_RuleRep,0,0 }: RuleRep0R0,
	Index{ symbols.NT_RuleRep,0,1 }: RuleRep0R1,
	Index{ symbols.NT_RuleRep,0,2 }: RuleRep0R2,
	Index{ symbols.NT_RuleRep,1,0 }: RuleRep1R0,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_Grammar:[]Label{ Grammar0R0 },
	symbols.NT_RuleRep:[]Label{ RuleRep0R0,RuleRep1R0 },
	symbols.NT_Rule:[]Label{ Rule0R0 },
	symbols.NT_ExprRep:[]Label{ ExprRep0R0,ExprRep1R0 },
	symbols.NT_Expr:[]Label{ Expr0R0 },
}

