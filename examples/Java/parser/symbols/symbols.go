
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_AND NT = iota
	NT_ANDExpr 
	NT_AND_AND 
	NT_AND_EQU 
	NT_ASSERT 
	NT_AddAlts 
	NT_AddExpr 
	NT_Any0xX 
	NT_Arguments 
	NT_ArrayCreatorRest 
	NT_ArrayInitializer 
	NT_ArrayRest 
	NT_AssignOp 
	NT_BANG 
	NT_BREAK 
	NT_BSR 
	NT_BSR_EQU 
	NT_BasicType 
	NT_BasicTypeLit 
	NT_Beoptfd 
	NT_Block 
	NT_BlockStmt 
	NT_CASE 
	NT_CATCH 
	NT_COLON 
	NT_COMMA 
	NT_CONTINUE 
	NT_CarrotAlts 
	NT_Catch 
	NT_CatchBlk 
	NT_CharLiteral 
	NT_Cls 
	NT_ClsBdy 
	NT_ClsBdyDecl 
	NT_ClsCreatorRest 
	NT_ClsDecl 
	NT_ClsType 
	NT_ClsTypeList 
	NT_CompUnit 
	NT_CondANDExpr 
	NT_CondExpr 
	NT_CondORExpr 
	NT_ConstDecl 
	NT_ConstDeclRest 
	NT_ConstDeclsRest 
	NT_ConstExpr 
	NT_CreatedName 
	NT_Creator 
	NT_DEC 
	NT_DEFAULT 
	NT_DIV 
	NT_DIV_EQU 
	NT_DO 
	NT_DOT 
	NT_DecimalFloat 
	NT_DecimalNumeral 
	NT_DeclAlts 
	NT_Dim 
	NT_DimExpr 
	NT_ELSE 
	NT_EQU 
	NT_EQUAL 
	NT_ESInst 
	NT_EXTENDS 
	NT_EqAlts 
	NT_EqCheck 
	NT_EqShift 
	NT_EqualExpr 
	NT_EscOrLineOrBlock 
	NT_EscSlash 
	NT_EscUp 
	NT_Escape 
	NT_Escs 
	NT_Expr 
	NT_FINAL 
	NT_FINALLY 
	NT_FOR 
	NT_Finally 
	NT_FloatLiteral 
	NT_ForInit 
	NT_ForUpdate 
	NT_FormalParam 
	NT_FormalParamDecls 
	NT_FormalParamDeclsRest 
	NT_FormalParams 
	NT_GE 
	NT_GT 
	NT_HAT 
	NT_HAT_EQU 
	NT_HexFloat 
	NT_HexNumeral 
	NT_HexSignificand 
	NT_ID 
	NT_IDSuffix 
	NT_IF 
	NT_IMPLEMENTS 
	NT_IMPORT 
	NT_INC 
	NT_INSTANCEOF 
	NT_IORExpr 
	NT_ImportDecl 
	NT_InnerCreator 
	NT_IntegerLiteral 
	NT_Intf 
	NT_IntfBdy 
	NT_IntfBdyDecl 
	NT_IntfDecl 
	NT_IntfMemDecl 
	NT_IntfMethDeclRest 
	NT_IntfMethFieldDecl 
	NT_IntfMethFieldRest 
	NT_LBRK 
	NT_LE 
	NT_LPAR 
	NT_LT 
	NT_LWING 
	NT_Letter 
	NT_LetterLorD 
	NT_LitAlts 
	NT_Literal 
	NT_LocalVarDeclStmt 
	NT_LorD 
	NT_MINUS 
	NT_MINUS_EQU 
	NT_MOD 
	NT_MOD_EQU 
	NT_MemAlts 
	NT_MemDecl 
	NT_Modifier 
	NT_Modifs 
	NT_MultExpr 
	NT_NEW 
	NT_NOT_EQUAL 
	NT_NumeralAlts 
	NT_OR 
	NT_ORXOR 
	NT_OR_EQU 
	NT_OR_OR 
	NT_OctalEscape 
	NT_OptArgs 
	NT_OptClsBdy 
	NT_OptColExpr 
	NT_OptCom 
	NT_OptComFormPDecl 
	NT_OptDot 
	NT_OptDotStar 
	NT_OptElse 
	NT_OptEqVarInit 
	NT_OptEsc 
	NT_OptExpr 
	NT_OptExprs 
	NT_OptExtClsType 
	NT_OptExtendsClsLis 
	NT_OptFin 
	NT_OptFinType 
	NT_OptForInit 
	NT_OptForUpd 
	NT_OptFormPDecl 
	NT_OptID 
	NT_OptIDSuff 
	NT_OptImpClsLst 
	NT_OptPackDecl 
	NT_OptStatic 
	NT_OptThrowClsTypLst 
	NT_OptVarInit 
	NT_OtherAlts 
	NT_PACKAGE 
	NT_PLUS 
	NT_PLUS_EQU 
	NT_PackDecl 
	NT_ParExpr 
	NT_PostfixOp 
	NT_PrefixOp 
	NT_Primary 
	NT_QUERY 
	NT_QualifiedID 
	NT_RBRK 
	NT_RBRKAlts 
	NT_RETURN 
	NT_RPAR 
	NT_RWING 
	NT_ReferenceType 
	NT_RelateExpr 
	NT_RepANDEq0x 
	NT_RepANDIOR0x 
	NT_RepAddAltsMult0x 
	NT_RepAsscExpr0x 
	NT_RepBlkSt0x 
	NT_RepCatch0x 
	NT_RepClsBDecl0x 
	NT_RepComCls0x 
	NT_RepComCnstDecl0x 
	NT_RepComExp0x 
	NT_RepComInit0x 
	NT_RepComSExpr0x 
	NT_RepComVDecl0x 
	NT_RepCondition0x 
	NT_RepDig1xExp 
	NT_RepDig1xOptExp 
	NT_RepDim0x 
	NT_RepDimExpr0x 
	NT_RepDotID0x 
	NT_RepESInst0x 
	NT_RepEqExpr0x 
	NT_RepHatAND0x 
	NT_RepHex0xDot 
	NT_RepImpDecl0x 
	NT_RepInBodDecl0x 
	NT_RepLorD0x 
	NT_RepModif0 
	NT_RepORXOR0x 
	NT_RepORcAND0x 
	NT_RepPfOp0x 
	NT_RepSDMUExpr0x 
	NT_RepSel0x 
	NT_RepSemiModDecl0x 
	NT_RepSwBlkStmt0x 
	NT_SDM 
	NT_SEMI 
	NT_SL 
	NT_SL_EQU 
	NT_SR 
	NT_SR_EQU 
	NT_STAR 
	NT_STAR_EQU 
	NT_STATIC 
	NT_SUPER 
	NT_SWITCH 
	NT_SYNCHRONIZED 
	NT_Selector 
	NT_SemiModDecl 
	NT_ShiftAlts 
	NT_ShiftExpr 
	NT_Stmt 
	NT_StmtExpr 
	NT_StrClose 
	NT_StringLiteral 
	NT_SuperSuffix 
	NT_SwitchBlockStmtGrp 
	NT_SwitchLabel 
	NT_THIS 
	NT_THROW 
	NT_THROWS 
	NT_TILDA 
	NT_TRY 
	NT_Type 
	NT_TypeAlts 
	NT_UnaryExpr 
	NT_UnicodeEscape 
	NT_VOID 
	NT_VarDecl 
	NT_VarDeclInit 
	NT_VarDelID 
	NT_VarInitial 
	NT_VoidIntfMethDeclRst 
	NT_WHILE 
	NT_WS 
	NT_XORExpr 
)

const NumNTs = 258

type NTs []NT

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // ! 
	T_1  // != 
	T_2  // % 
	T_3  // %= 
	T_4  // & 
	T_5  // && 
	T_6  // &= 
	T_7  // ( 
	T_8  // ) 
	T_9  // * 
	T_10  // *= 
	T_11  // + 
	T_12  // ++ 
	T_13  // += 
	T_14  // , 
	T_15  // - 
	T_16  // -- 
	T_17  // -= 
	T_18  // . 
	T_19  // / 
	T_20  // /= 
	T_21  // 0 
	T_22  // : 
	T_23  // ; 
	T_24  // < 
	T_25  // << 
	T_26  // <<= 
	T_27  // <= 
	T_28  // = 
	T_29  // == 
	T_30  // > 
	T_31  // >= 
	T_32  // >> 
	T_33  // >>= 
	T_34  // >>> 
	T_35  // >>>= 
	T_36  // ? 
	T_37  // Cls 
	T_38  // Intf 
	T_39  // X 
	T_40  // [ 
	T_41  // ] 
	T_42  // ^ 
	T_43  // ^= 
	T_44  // abstract 
	T_45  // any4567 
	T_46  // anyCarSl 
	T_47  // assert 
	T_48  // binaryExponent 
	T_49  // block_comment 
	T_50  // boolean 
	T_51  // break 
	T_52  // byte 
	T_53  // carrot 
	T_54  // case 
	T_55  // catch 
	T_56  // char 
	T_57  // continue 
	T_58  // default 
	T_59  // do 
	T_60  // dot 
	T_61  // double 
	T_62  // dubQuo 
	T_63  // dubSlash 
	T_64  // else 
	T_65  // esc 
	T_66  // escCharSp 
	T_67  // exponent 
	T_68  // extends 
	T_69  // fF_dD 
	T_70  // false 
	T_71  // final 
	T_72  // finally 
	T_73  // float 
	T_74  // for 
	T_75  // hexDigit 
	T_76  // if 
	T_77  // implements 
	T_78  // import 
	T_79  // instanceof 
	T_80  // int 
	T_81  // int03 
	T_82  // int03Two07 
	T_83  // int07 
	T_84  // let 
	T_85  // line_comment 
	T_86  // long 
	T_87  // nEq 
	T_88  // native 
	T_89  // new 
	T_90  // newline 
	T_91  // notEqAnd 
	T_92  // notEqCar 
	T_93  // notEqCar2 
	T_94  // notEqPipe 
	T_95  // notEqPlus 
	T_96  // notEqSlDash 
	T_97  // notKeyword 
	T_98  // notLorD 
	T_99  // null 
	T_100  // num 
	T_101  // octalNumeral 
	T_102  // onenine 
	T_103  // optExpo 
	T_104  // optOneL 
	T_105  // optfFdD 
	T_106  // package 
	T_107  // private 
	T_108  // protected 
	T_109  // public 
	T_110  // repDig0x 
	T_111  // repDig1x 
	T_112  // repHex0x 
	T_113  // repHex1x 
	T_114  // repNumx0 
	T_115  // return 
	T_116  // short 
	T_117  // sinQuo 
	T_118  // static 
	T_119  // strictfp 
	T_120  // super 
	T_121  // switch 
	T_122  // synchronized 
	T_123  // this 
	T_124  // throw 
	T_125  // throws 
	T_126  // transient 
	T_127  // true 
	T_128  // try 
	T_129  // two07 
	T_130  // u 
	T_131  // void 
	T_132  // volatile 
	T_133  // while 
	T_134  // x 
	T_135  // ze 
	T_136  // { 
	T_137  // | 
	T_138  // |= 
	T_139  // || 
	T_140  // } 
	T_141  // ~ 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

func (nt NT) LeftRec() NTs {
	return leftRec[nt]
}

var ntToString = []string { 
	"AND", /* NT_AND */
	"ANDExpr", /* NT_ANDExpr */
	"AND_AND", /* NT_AND_AND */
	"AND_EQU", /* NT_AND_EQU */
	"ASSERT", /* NT_ASSERT */
	"AddAlts", /* NT_AddAlts */
	"AddExpr", /* NT_AddExpr */
	"Any0xX", /* NT_Any0xX */
	"Arguments", /* NT_Arguments */
	"ArrayCreatorRest", /* NT_ArrayCreatorRest */
	"ArrayInitializer", /* NT_ArrayInitializer */
	"ArrayRest", /* NT_ArrayRest */
	"AssignOp", /* NT_AssignOp */
	"BANG", /* NT_BANG */
	"BREAK", /* NT_BREAK */
	"BSR", /* NT_BSR */
	"BSR_EQU", /* NT_BSR_EQU */
	"BasicType", /* NT_BasicType */
	"BasicTypeLit", /* NT_BasicTypeLit */
	"Beoptfd", /* NT_Beoptfd */
	"Block", /* NT_Block */
	"BlockStmt", /* NT_BlockStmt */
	"CASE", /* NT_CASE */
	"CATCH", /* NT_CATCH */
	"COLON", /* NT_COLON */
	"COMMA", /* NT_COMMA */
	"CONTINUE", /* NT_CONTINUE */
	"CarrotAlts", /* NT_CarrotAlts */
	"Catch", /* NT_Catch */
	"CatchBlk", /* NT_CatchBlk */
	"CharLiteral", /* NT_CharLiteral */
	"Cls", /* NT_Cls */
	"ClsBdy", /* NT_ClsBdy */
	"ClsBdyDecl", /* NT_ClsBdyDecl */
	"ClsCreatorRest", /* NT_ClsCreatorRest */
	"ClsDecl", /* NT_ClsDecl */
	"ClsType", /* NT_ClsType */
	"ClsTypeList", /* NT_ClsTypeList */
	"CompUnit", /* NT_CompUnit */
	"CondANDExpr", /* NT_CondANDExpr */
	"CondExpr", /* NT_CondExpr */
	"CondORExpr", /* NT_CondORExpr */
	"ConstDecl", /* NT_ConstDecl */
	"ConstDeclRest", /* NT_ConstDeclRest */
	"ConstDeclsRest", /* NT_ConstDeclsRest */
	"ConstExpr", /* NT_ConstExpr */
	"CreatedName", /* NT_CreatedName */
	"Creator", /* NT_Creator */
	"DEC", /* NT_DEC */
	"DEFAULT", /* NT_DEFAULT */
	"DIV", /* NT_DIV */
	"DIV_EQU", /* NT_DIV_EQU */
	"DO", /* NT_DO */
	"DOT", /* NT_DOT */
	"DecimalFloat", /* NT_DecimalFloat */
	"DecimalNumeral", /* NT_DecimalNumeral */
	"DeclAlts", /* NT_DeclAlts */
	"Dim", /* NT_Dim */
	"DimExpr", /* NT_DimExpr */
	"ELSE", /* NT_ELSE */
	"EQU", /* NT_EQU */
	"EQUAL", /* NT_EQUAL */
	"ESInst", /* NT_ESInst */
	"EXTENDS", /* NT_EXTENDS */
	"EqAlts", /* NT_EqAlts */
	"EqCheck", /* NT_EqCheck */
	"EqShift", /* NT_EqShift */
	"EqualExpr", /* NT_EqualExpr */
	"EscOrLineOrBlock", /* NT_EscOrLineOrBlock */
	"EscSlash", /* NT_EscSlash */
	"EscUp", /* NT_EscUp */
	"Escape", /* NT_Escape */
	"Escs", /* NT_Escs */
	"Expr", /* NT_Expr */
	"FINAL", /* NT_FINAL */
	"FINALLY", /* NT_FINALLY */
	"FOR", /* NT_FOR */
	"Finally", /* NT_Finally */
	"FloatLiteral", /* NT_FloatLiteral */
	"ForInit", /* NT_ForInit */
	"ForUpdate", /* NT_ForUpdate */
	"FormalParam", /* NT_FormalParam */
	"FormalParamDecls", /* NT_FormalParamDecls */
	"FormalParamDeclsRest", /* NT_FormalParamDeclsRest */
	"FormalParams", /* NT_FormalParams */
	"GE", /* NT_GE */
	"GT", /* NT_GT */
	"HAT", /* NT_HAT */
	"HAT_EQU", /* NT_HAT_EQU */
	"HexFloat", /* NT_HexFloat */
	"HexNumeral", /* NT_HexNumeral */
	"HexSignificand", /* NT_HexSignificand */
	"ID", /* NT_ID */
	"IDSuffix", /* NT_IDSuffix */
	"IF", /* NT_IF */
	"IMPLEMENTS", /* NT_IMPLEMENTS */
	"IMPORT", /* NT_IMPORT */
	"INC", /* NT_INC */
	"INSTANCEOF", /* NT_INSTANCEOF */
	"IORExpr", /* NT_IORExpr */
	"ImportDecl", /* NT_ImportDecl */
	"InnerCreator", /* NT_InnerCreator */
	"IntegerLiteral", /* NT_IntegerLiteral */
	"Intf", /* NT_Intf */
	"IntfBdy", /* NT_IntfBdy */
	"IntfBdyDecl", /* NT_IntfBdyDecl */
	"IntfDecl", /* NT_IntfDecl */
	"IntfMemDecl", /* NT_IntfMemDecl */
	"IntfMethDeclRest", /* NT_IntfMethDeclRest */
	"IntfMethFieldDecl", /* NT_IntfMethFieldDecl */
	"IntfMethFieldRest", /* NT_IntfMethFieldRest */
	"LBRK", /* NT_LBRK */
	"LE", /* NT_LE */
	"LPAR", /* NT_LPAR */
	"LT", /* NT_LT */
	"LWING", /* NT_LWING */
	"Letter", /* NT_Letter */
	"LetterLorD", /* NT_LetterLorD */
	"LitAlts", /* NT_LitAlts */
	"Literal", /* NT_Literal */
	"LocalVarDeclStmt", /* NT_LocalVarDeclStmt */
	"LorD", /* NT_LorD */
	"MINUS", /* NT_MINUS */
	"MINUS_EQU", /* NT_MINUS_EQU */
	"MOD", /* NT_MOD */
	"MOD_EQU", /* NT_MOD_EQU */
	"MemAlts", /* NT_MemAlts */
	"MemDecl", /* NT_MemDecl */
	"Modifier", /* NT_Modifier */
	"Modifs", /* NT_Modifs */
	"MultExpr", /* NT_MultExpr */
	"NEW", /* NT_NEW */
	"NOT_EQUAL", /* NT_NOT_EQUAL */
	"NumeralAlts", /* NT_NumeralAlts */
	"OR", /* NT_OR */
	"ORXOR", /* NT_ORXOR */
	"OR_EQU", /* NT_OR_EQU */
	"OR_OR", /* NT_OR_OR */
	"OctalEscape", /* NT_OctalEscape */
	"OptArgs", /* NT_OptArgs */
	"OptClsBdy", /* NT_OptClsBdy */
	"OptColExpr", /* NT_OptColExpr */
	"OptCom", /* NT_OptCom */
	"OptComFormPDecl", /* NT_OptComFormPDecl */
	"OptDot", /* NT_OptDot */
	"OptDotStar", /* NT_OptDotStar */
	"OptElse", /* NT_OptElse */
	"OptEqVarInit", /* NT_OptEqVarInit */
	"OptEsc", /* NT_OptEsc */
	"OptExpr", /* NT_OptExpr */
	"OptExprs", /* NT_OptExprs */
	"OptExtClsType", /* NT_OptExtClsType */
	"OptExtendsClsLis", /* NT_OptExtendsClsLis */
	"OptFin", /* NT_OptFin */
	"OptFinType", /* NT_OptFinType */
	"OptForInit", /* NT_OptForInit */
	"OptForUpd", /* NT_OptForUpd */
	"OptFormPDecl", /* NT_OptFormPDecl */
	"OptID", /* NT_OptID */
	"OptIDSuff", /* NT_OptIDSuff */
	"OptImpClsLst", /* NT_OptImpClsLst */
	"OptPackDecl", /* NT_OptPackDecl */
	"OptStatic", /* NT_OptStatic */
	"OptThrowClsTypLst", /* NT_OptThrowClsTypLst */
	"OptVarInit", /* NT_OptVarInit */
	"OtherAlts", /* NT_OtherAlts */
	"PACKAGE", /* NT_PACKAGE */
	"PLUS", /* NT_PLUS */
	"PLUS_EQU", /* NT_PLUS_EQU */
	"PackDecl", /* NT_PackDecl */
	"ParExpr", /* NT_ParExpr */
	"PostfixOp", /* NT_PostfixOp */
	"PrefixOp", /* NT_PrefixOp */
	"Primary", /* NT_Primary */
	"QUERY", /* NT_QUERY */
	"QualifiedID", /* NT_QualifiedID */
	"RBRK", /* NT_RBRK */
	"RBRKAlts", /* NT_RBRKAlts */
	"RETURN", /* NT_RETURN */
	"RPAR", /* NT_RPAR */
	"RWING", /* NT_RWING */
	"ReferenceType", /* NT_ReferenceType */
	"RelateExpr", /* NT_RelateExpr */
	"RepANDEq0x", /* NT_RepANDEq0x */
	"RepANDIOR0x", /* NT_RepANDIOR0x */
	"RepAddAltsMult0x", /* NT_RepAddAltsMult0x */
	"RepAsscExpr0x", /* NT_RepAsscExpr0x */
	"RepBlkSt0x", /* NT_RepBlkSt0x */
	"RepCatch0x", /* NT_RepCatch0x */
	"RepClsBDecl0x", /* NT_RepClsBDecl0x */
	"RepComCls0x", /* NT_RepComCls0x */
	"RepComCnstDecl0x", /* NT_RepComCnstDecl0x */
	"RepComExp0x", /* NT_RepComExp0x */
	"RepComInit0x", /* NT_RepComInit0x */
	"RepComSExpr0x", /* NT_RepComSExpr0x */
	"RepComVDecl0x", /* NT_RepComVDecl0x */
	"RepCondition0x", /* NT_RepCondition0x */
	"RepDig1xExp", /* NT_RepDig1xExp */
	"RepDig1xOptExp", /* NT_RepDig1xOptExp */
	"RepDim0x", /* NT_RepDim0x */
	"RepDimExpr0x", /* NT_RepDimExpr0x */
	"RepDotID0x", /* NT_RepDotID0x */
	"RepESInst0x", /* NT_RepESInst0x */
	"RepEqExpr0x", /* NT_RepEqExpr0x */
	"RepHatAND0x", /* NT_RepHatAND0x */
	"RepHex0xDot", /* NT_RepHex0xDot */
	"RepImpDecl0x", /* NT_RepImpDecl0x */
	"RepInBodDecl0x", /* NT_RepInBodDecl0x */
	"RepLorD0x", /* NT_RepLorD0x */
	"RepModif0", /* NT_RepModif0 */
	"RepORXOR0x", /* NT_RepORXOR0x */
	"RepORcAND0x", /* NT_RepORcAND0x */
	"RepPfOp0x", /* NT_RepPfOp0x */
	"RepSDMUExpr0x", /* NT_RepSDMUExpr0x */
	"RepSel0x", /* NT_RepSel0x */
	"RepSemiModDecl0x", /* NT_RepSemiModDecl0x */
	"RepSwBlkStmt0x", /* NT_RepSwBlkStmt0x */
	"SDM", /* NT_SDM */
	"SEMI", /* NT_SEMI */
	"SL", /* NT_SL */
	"SL_EQU", /* NT_SL_EQU */
	"SR", /* NT_SR */
	"SR_EQU", /* NT_SR_EQU */
	"STAR", /* NT_STAR */
	"STAR_EQU", /* NT_STAR_EQU */
	"STATIC", /* NT_STATIC */
	"SUPER", /* NT_SUPER */
	"SWITCH", /* NT_SWITCH */
	"SYNCHRONIZED", /* NT_SYNCHRONIZED */
	"Selector", /* NT_Selector */
	"SemiModDecl", /* NT_SemiModDecl */
	"ShiftAlts", /* NT_ShiftAlts */
	"ShiftExpr", /* NT_ShiftExpr */
	"Stmt", /* NT_Stmt */
	"StmtExpr", /* NT_StmtExpr */
	"StrClose", /* NT_StrClose */
	"StringLiteral", /* NT_StringLiteral */
	"SuperSuffix", /* NT_SuperSuffix */
	"SwitchBlockStmtGrp", /* NT_SwitchBlockStmtGrp */
	"SwitchLabel", /* NT_SwitchLabel */
	"THIS", /* NT_THIS */
	"THROW", /* NT_THROW */
	"THROWS", /* NT_THROWS */
	"TILDA", /* NT_TILDA */
	"TRY", /* NT_TRY */
	"Type", /* NT_Type */
	"TypeAlts", /* NT_TypeAlts */
	"UnaryExpr", /* NT_UnaryExpr */
	"UnicodeEscape", /* NT_UnicodeEscape */
	"VOID", /* NT_VOID */
	"VarDecl", /* NT_VarDecl */
	"VarDeclInit", /* NT_VarDeclInit */
	"VarDelID", /* NT_VarDelID */
	"VarInitial", /* NT_VarInitial */
	"VoidIntfMethDeclRst", /* NT_VoidIntfMethDeclRst */
	"WHILE", /* NT_WHILE */
	"WS", /* NT_WS */
	"XORExpr", /* NT_XORExpr */ 
}

var tToString = []string { 
	"!", /* T_0 */
	"!=", /* T_1 */
	"%", /* T_2 */
	"%=", /* T_3 */
	"&", /* T_4 */
	"&&", /* T_5 */
	"&=", /* T_6 */
	"(", /* T_7 */
	")", /* T_8 */
	"*", /* T_9 */
	"*=", /* T_10 */
	"+", /* T_11 */
	"++", /* T_12 */
	"+=", /* T_13 */
	",", /* T_14 */
	"-", /* T_15 */
	"--", /* T_16 */
	"-=", /* T_17 */
	".", /* T_18 */
	"/", /* T_19 */
	"/=", /* T_20 */
	"0", /* T_21 */
	":", /* T_22 */
	";", /* T_23 */
	"<", /* T_24 */
	"<<", /* T_25 */
	"<<=", /* T_26 */
	"<=", /* T_27 */
	"=", /* T_28 */
	"==", /* T_29 */
	">", /* T_30 */
	">=", /* T_31 */
	">>", /* T_32 */
	">>=", /* T_33 */
	">>>", /* T_34 */
	">>>=", /* T_35 */
	"?", /* T_36 */
	"Cls", /* T_37 */
	"Intf", /* T_38 */
	"X", /* T_39 */
	"[", /* T_40 */
	"]", /* T_41 */
	"^", /* T_42 */
	"^=", /* T_43 */
	"abstract", /* T_44 */
	"any4567", /* T_45 */
	"anyCarSl", /* T_46 */
	"assert", /* T_47 */
	"binaryExponent", /* T_48 */
	"block_comment", /* T_49 */
	"boolean", /* T_50 */
	"break", /* T_51 */
	"byte", /* T_52 */
	"carrot", /* T_53 */
	"case", /* T_54 */
	"catch", /* T_55 */
	"char", /* T_56 */
	"continue", /* T_57 */
	"default", /* T_58 */
	"do", /* T_59 */
	"dot", /* T_60 */
	"double", /* T_61 */
	"dubQuo", /* T_62 */
	"dubSlash", /* T_63 */
	"else", /* T_64 */
	"esc", /* T_65 */
	"escCharSp", /* T_66 */
	"exponent", /* T_67 */
	"extends", /* T_68 */
	"fF_dD", /* T_69 */
	"false", /* T_70 */
	"final", /* T_71 */
	"finally", /* T_72 */
	"float", /* T_73 */
	"for", /* T_74 */
	"hexDigit", /* T_75 */
	"if", /* T_76 */
	"implements", /* T_77 */
	"import", /* T_78 */
	"instanceof", /* T_79 */
	"int", /* T_80 */
	"int03", /* T_81 */
	"int03Two07", /* T_82 */
	"int07", /* T_83 */
	"let", /* T_84 */
	"line_comment", /* T_85 */
	"long", /* T_86 */
	"nEq", /* T_87 */
	"native", /* T_88 */
	"new", /* T_89 */
	"newline", /* T_90 */
	"notEqAnd", /* T_91 */
	"notEqCar", /* T_92 */
	"notEqCar2", /* T_93 */
	"notEqPipe", /* T_94 */
	"notEqPlus", /* T_95 */
	"notEqSlDash", /* T_96 */
	"notKeyword", /* T_97 */
	"notLorD", /* T_98 */
	"null", /* T_99 */
	"num", /* T_100 */
	"octalNumeral", /* T_101 */
	"onenine", /* T_102 */
	"optExpo", /* T_103 */
	"optOneL", /* T_104 */
	"optfFdD", /* T_105 */
	"package", /* T_106 */
	"private", /* T_107 */
	"protected", /* T_108 */
	"public", /* T_109 */
	"repDig0x", /* T_110 */
	"repDig1x", /* T_111 */
	"repHex0x", /* T_112 */
	"repHex1x", /* T_113 */
	"repNumx0", /* T_114 */
	"return", /* T_115 */
	"short", /* T_116 */
	"sinQuo", /* T_117 */
	"static", /* T_118 */
	"strictfp", /* T_119 */
	"super", /* T_120 */
	"switch", /* T_121 */
	"synchronized", /* T_122 */
	"this", /* T_123 */
	"throw", /* T_124 */
	"throws", /* T_125 */
	"transient", /* T_126 */
	"true", /* T_127 */
	"try", /* T_128 */
	"two07", /* T_129 */
	"u", /* T_130 */
	"void", /* T_131 */
	"volatile", /* T_132 */
	"while", /* T_133 */
	"x", /* T_134 */
	"ze", /* T_135 */
	"{", /* T_136 */
	"|", /* T_137 */
	"|=", /* T_138 */
	"||", /* T_139 */
	"}", /* T_140 */
	"~", /* T_141 */ 
}

var stringNT = map[string]NT{ 
	"AND":NT_AND,
	"ANDExpr":NT_ANDExpr,
	"AND_AND":NT_AND_AND,
	"AND_EQU":NT_AND_EQU,
	"ASSERT":NT_ASSERT,
	"AddAlts":NT_AddAlts,
	"AddExpr":NT_AddExpr,
	"Any0xX":NT_Any0xX,
	"Arguments":NT_Arguments,
	"ArrayCreatorRest":NT_ArrayCreatorRest,
	"ArrayInitializer":NT_ArrayInitializer,
	"ArrayRest":NT_ArrayRest,
	"AssignOp":NT_AssignOp,
	"BANG":NT_BANG,
	"BREAK":NT_BREAK,
	"BSR":NT_BSR,
	"BSR_EQU":NT_BSR_EQU,
	"BasicType":NT_BasicType,
	"BasicTypeLit":NT_BasicTypeLit,
	"Beoptfd":NT_Beoptfd,
	"Block":NT_Block,
	"BlockStmt":NT_BlockStmt,
	"CASE":NT_CASE,
	"CATCH":NT_CATCH,
	"COLON":NT_COLON,
	"COMMA":NT_COMMA,
	"CONTINUE":NT_CONTINUE,
	"CarrotAlts":NT_CarrotAlts,
	"Catch":NT_Catch,
	"CatchBlk":NT_CatchBlk,
	"CharLiteral":NT_CharLiteral,
	"Cls":NT_Cls,
	"ClsBdy":NT_ClsBdy,
	"ClsBdyDecl":NT_ClsBdyDecl,
	"ClsCreatorRest":NT_ClsCreatorRest,
	"ClsDecl":NT_ClsDecl,
	"ClsType":NT_ClsType,
	"ClsTypeList":NT_ClsTypeList,
	"CompUnit":NT_CompUnit,
	"CondANDExpr":NT_CondANDExpr,
	"CondExpr":NT_CondExpr,
	"CondORExpr":NT_CondORExpr,
	"ConstDecl":NT_ConstDecl,
	"ConstDeclRest":NT_ConstDeclRest,
	"ConstDeclsRest":NT_ConstDeclsRest,
	"ConstExpr":NT_ConstExpr,
	"CreatedName":NT_CreatedName,
	"Creator":NT_Creator,
	"DEC":NT_DEC,
	"DEFAULT":NT_DEFAULT,
	"DIV":NT_DIV,
	"DIV_EQU":NT_DIV_EQU,
	"DO":NT_DO,
	"DOT":NT_DOT,
	"DecimalFloat":NT_DecimalFloat,
	"DecimalNumeral":NT_DecimalNumeral,
	"DeclAlts":NT_DeclAlts,
	"Dim":NT_Dim,
	"DimExpr":NT_DimExpr,
	"ELSE":NT_ELSE,
	"EQU":NT_EQU,
	"EQUAL":NT_EQUAL,
	"ESInst":NT_ESInst,
	"EXTENDS":NT_EXTENDS,
	"EqAlts":NT_EqAlts,
	"EqCheck":NT_EqCheck,
	"EqShift":NT_EqShift,
	"EqualExpr":NT_EqualExpr,
	"EscOrLineOrBlock":NT_EscOrLineOrBlock,
	"EscSlash":NT_EscSlash,
	"EscUp":NT_EscUp,
	"Escape":NT_Escape,
	"Escs":NT_Escs,
	"Expr":NT_Expr,
	"FINAL":NT_FINAL,
	"FINALLY":NT_FINALLY,
	"FOR":NT_FOR,
	"Finally":NT_Finally,
	"FloatLiteral":NT_FloatLiteral,
	"ForInit":NT_ForInit,
	"ForUpdate":NT_ForUpdate,
	"FormalParam":NT_FormalParam,
	"FormalParamDecls":NT_FormalParamDecls,
	"FormalParamDeclsRest":NT_FormalParamDeclsRest,
	"FormalParams":NT_FormalParams,
	"GE":NT_GE,
	"GT":NT_GT,
	"HAT":NT_HAT,
	"HAT_EQU":NT_HAT_EQU,
	"HexFloat":NT_HexFloat,
	"HexNumeral":NT_HexNumeral,
	"HexSignificand":NT_HexSignificand,
	"ID":NT_ID,
	"IDSuffix":NT_IDSuffix,
	"IF":NT_IF,
	"IMPLEMENTS":NT_IMPLEMENTS,
	"IMPORT":NT_IMPORT,
	"INC":NT_INC,
	"INSTANCEOF":NT_INSTANCEOF,
	"IORExpr":NT_IORExpr,
	"ImportDecl":NT_ImportDecl,
	"InnerCreator":NT_InnerCreator,
	"IntegerLiteral":NT_IntegerLiteral,
	"Intf":NT_Intf,
	"IntfBdy":NT_IntfBdy,
	"IntfBdyDecl":NT_IntfBdyDecl,
	"IntfDecl":NT_IntfDecl,
	"IntfMemDecl":NT_IntfMemDecl,
	"IntfMethDeclRest":NT_IntfMethDeclRest,
	"IntfMethFieldDecl":NT_IntfMethFieldDecl,
	"IntfMethFieldRest":NT_IntfMethFieldRest,
	"LBRK":NT_LBRK,
	"LE":NT_LE,
	"LPAR":NT_LPAR,
	"LT":NT_LT,
	"LWING":NT_LWING,
	"Letter":NT_Letter,
	"LetterLorD":NT_LetterLorD,
	"LitAlts":NT_LitAlts,
	"Literal":NT_Literal,
	"LocalVarDeclStmt":NT_LocalVarDeclStmt,
	"LorD":NT_LorD,
	"MINUS":NT_MINUS,
	"MINUS_EQU":NT_MINUS_EQU,
	"MOD":NT_MOD,
	"MOD_EQU":NT_MOD_EQU,
	"MemAlts":NT_MemAlts,
	"MemDecl":NT_MemDecl,
	"Modifier":NT_Modifier,
	"Modifs":NT_Modifs,
	"MultExpr":NT_MultExpr,
	"NEW":NT_NEW,
	"NOT_EQUAL":NT_NOT_EQUAL,
	"NumeralAlts":NT_NumeralAlts,
	"OR":NT_OR,
	"ORXOR":NT_ORXOR,
	"OR_EQU":NT_OR_EQU,
	"OR_OR":NT_OR_OR,
	"OctalEscape":NT_OctalEscape,
	"OptArgs":NT_OptArgs,
	"OptClsBdy":NT_OptClsBdy,
	"OptColExpr":NT_OptColExpr,
	"OptCom":NT_OptCom,
	"OptComFormPDecl":NT_OptComFormPDecl,
	"OptDot":NT_OptDot,
	"OptDotStar":NT_OptDotStar,
	"OptElse":NT_OptElse,
	"OptEqVarInit":NT_OptEqVarInit,
	"OptEsc":NT_OptEsc,
	"OptExpr":NT_OptExpr,
	"OptExprs":NT_OptExprs,
	"OptExtClsType":NT_OptExtClsType,
	"OptExtendsClsLis":NT_OptExtendsClsLis,
	"OptFin":NT_OptFin,
	"OptFinType":NT_OptFinType,
	"OptForInit":NT_OptForInit,
	"OptForUpd":NT_OptForUpd,
	"OptFormPDecl":NT_OptFormPDecl,
	"OptID":NT_OptID,
	"OptIDSuff":NT_OptIDSuff,
	"OptImpClsLst":NT_OptImpClsLst,
	"OptPackDecl":NT_OptPackDecl,
	"OptStatic":NT_OptStatic,
	"OptThrowClsTypLst":NT_OptThrowClsTypLst,
	"OptVarInit":NT_OptVarInit,
	"OtherAlts":NT_OtherAlts,
	"PACKAGE":NT_PACKAGE,
	"PLUS":NT_PLUS,
	"PLUS_EQU":NT_PLUS_EQU,
	"PackDecl":NT_PackDecl,
	"ParExpr":NT_ParExpr,
	"PostfixOp":NT_PostfixOp,
	"PrefixOp":NT_PrefixOp,
	"Primary":NT_Primary,
	"QUERY":NT_QUERY,
	"QualifiedID":NT_QualifiedID,
	"RBRK":NT_RBRK,
	"RBRKAlts":NT_RBRKAlts,
	"RETURN":NT_RETURN,
	"RPAR":NT_RPAR,
	"RWING":NT_RWING,
	"ReferenceType":NT_ReferenceType,
	"RelateExpr":NT_RelateExpr,
	"RepANDEq0x":NT_RepANDEq0x,
	"RepANDIOR0x":NT_RepANDIOR0x,
	"RepAddAltsMult0x":NT_RepAddAltsMult0x,
	"RepAsscExpr0x":NT_RepAsscExpr0x,
	"RepBlkSt0x":NT_RepBlkSt0x,
	"RepCatch0x":NT_RepCatch0x,
	"RepClsBDecl0x":NT_RepClsBDecl0x,
	"RepComCls0x":NT_RepComCls0x,
	"RepComCnstDecl0x":NT_RepComCnstDecl0x,
	"RepComExp0x":NT_RepComExp0x,
	"RepComInit0x":NT_RepComInit0x,
	"RepComSExpr0x":NT_RepComSExpr0x,
	"RepComVDecl0x":NT_RepComVDecl0x,
	"RepCondition0x":NT_RepCondition0x,
	"RepDig1xExp":NT_RepDig1xExp,
	"RepDig1xOptExp":NT_RepDig1xOptExp,
	"RepDim0x":NT_RepDim0x,
	"RepDimExpr0x":NT_RepDimExpr0x,
	"RepDotID0x":NT_RepDotID0x,
	"RepESInst0x":NT_RepESInst0x,
	"RepEqExpr0x":NT_RepEqExpr0x,
	"RepHatAND0x":NT_RepHatAND0x,
	"RepHex0xDot":NT_RepHex0xDot,
	"RepImpDecl0x":NT_RepImpDecl0x,
	"RepInBodDecl0x":NT_RepInBodDecl0x,
	"RepLorD0x":NT_RepLorD0x,
	"RepModif0":NT_RepModif0,
	"RepORXOR0x":NT_RepORXOR0x,
	"RepORcAND0x":NT_RepORcAND0x,
	"RepPfOp0x":NT_RepPfOp0x,
	"RepSDMUExpr0x":NT_RepSDMUExpr0x,
	"RepSel0x":NT_RepSel0x,
	"RepSemiModDecl0x":NT_RepSemiModDecl0x,
	"RepSwBlkStmt0x":NT_RepSwBlkStmt0x,
	"SDM":NT_SDM,
	"SEMI":NT_SEMI,
	"SL":NT_SL,
	"SL_EQU":NT_SL_EQU,
	"SR":NT_SR,
	"SR_EQU":NT_SR_EQU,
	"STAR":NT_STAR,
	"STAR_EQU":NT_STAR_EQU,
	"STATIC":NT_STATIC,
	"SUPER":NT_SUPER,
	"SWITCH":NT_SWITCH,
	"SYNCHRONIZED":NT_SYNCHRONIZED,
	"Selector":NT_Selector,
	"SemiModDecl":NT_SemiModDecl,
	"ShiftAlts":NT_ShiftAlts,
	"ShiftExpr":NT_ShiftExpr,
	"Stmt":NT_Stmt,
	"StmtExpr":NT_StmtExpr,
	"StrClose":NT_StrClose,
	"StringLiteral":NT_StringLiteral,
	"SuperSuffix":NT_SuperSuffix,
	"SwitchBlockStmtGrp":NT_SwitchBlockStmtGrp,
	"SwitchLabel":NT_SwitchLabel,
	"THIS":NT_THIS,
	"THROW":NT_THROW,
	"THROWS":NT_THROWS,
	"TILDA":NT_TILDA,
	"TRY":NT_TRY,
	"Type":NT_Type,
	"TypeAlts":NT_TypeAlts,
	"UnaryExpr":NT_UnaryExpr,
	"UnicodeEscape":NT_UnicodeEscape,
	"VOID":NT_VOID,
	"VarDecl":NT_VarDecl,
	"VarDeclInit":NT_VarDeclInit,
	"VarDelID":NT_VarDelID,
	"VarInitial":NT_VarInitial,
	"VoidIntfMethDeclRst":NT_VoidIntfMethDeclRst,
	"WHILE":NT_WHILE,
	"WS":NT_WS,
	"XORExpr":NT_XORExpr,
}

var leftRec = map[NT]NTs { 
	NT_AND: NTs {  },
	NT_ANDExpr: NTs {  NT_IntegerLiteral,  NT_HexNumeral,  NT_BasicTypeLit,  NT_Literal,  NT_ShiftExpr,  NT_SUPER,  NT_THIS,  NT_UnaryExpr,  NT_LPAR,  NT_BANG,  NT_HexFloat,  NT_QualifiedID,  NT_DecimalNumeral,  NT_VOID,  NT_MultExpr,  NT_StringLiteral,  NT_RepHex0xDot,  NT_RelateExpr,  NT_MINUS,  NT_PLUS,  NT_NumeralAlts,  NT_INC,  NT_DEC,  NT_Primary,  NT_DecimalFloat,  NT_HexSignificand,  NT_Any0xX,  NT_LitAlts,  NT_CharLiteral,  NT_BasicType,  NT_AddExpr,  NT_EqualExpr,  NT_FloatLiteral,  NT_NEW,  NT_RepDig1xExp,  NT_ParExpr,  NT_ID,  NT_TILDA,  NT_PrefixOp,  NT_RepDig1xOptExp,  },
	NT_AND_AND: NTs {  },
	NT_AND_EQU: NTs {  },
	NT_ASSERT: NTs {  },
	NT_AddAlts: NTs {  NT_PLUS,  NT_MINUS,  },
	NT_AddExpr: NTs {  NT_ID,  NT_MINUS,  NT_HexFloat,  NT_VOID,  NT_Any0xX,  NT_Literal,  NT_BasicType,  NT_RepDig1xExp,  NT_THIS,  NT_NumeralAlts,  NT_PLUS,  NT_StringLiteral,  NT_FloatLiteral,  NT_PrefixOp,  NT_HexNumeral,  NT_HexSignificand,  NT_IntegerLiteral,  NT_Primary,  NT_BasicTypeLit,  NT_RepDig1xOptExp,  NT_NEW,  NT_CharLiteral,  NT_SUPER,  NT_DEC,  NT_BANG,  NT_UnaryExpr,  NT_DecimalNumeral,  NT_LPAR,  NT_LitAlts,  NT_ParExpr,  NT_DecimalFloat,  NT_TILDA,  NT_QualifiedID,  NT_RepHex0xDot,  NT_MultExpr,  NT_INC,  },
	NT_Any0xX: NTs {  },
	NT_Arguments: NTs {  NT_LPAR,  },
	NT_ArrayCreatorRest: NTs {  NT_LBRK,  },
	NT_ArrayInitializer: NTs {  NT_LWING,  },
	NT_ArrayRest: NTs {  NT_SUPER,  NT_BANG,  NT_RelateExpr,  NT_FloatLiteral,  NT_UnaryExpr,  NT_HexSignificand,  NT_RBRK,  NT_NumeralAlts,  NT_CondORExpr,  NT_CondExpr,  NT_ParExpr,  NT_THIS,  NT_LitAlts,  NT_BasicType,  NT_IntegerLiteral,  NT_ShiftExpr,  NT_PLUS,  NT_DecimalNumeral,  NT_INC,  NT_TILDA,  NT_HexNumeral,  NT_ANDExpr,  NT_QualifiedID,  NT_VOID,  NT_DecimalFloat,  NT_ID,  NT_StringLiteral,  NT_EqualExpr,  NT_MultExpr,  NT_Any0xX,  NT_RepDig1xExp,  NT_AddExpr,  NT_XORExpr,  NT_RepHex0xDot,  NT_LPAR,  NT_MINUS,  NT_HexFloat,  NT_Primary,  NT_BasicTypeLit,  NT_NEW,  NT_PrefixOp,  NT_Expr,  NT_IORExpr,  NT_DEC,  NT_RepDig1xOptExp,  NT_CondANDExpr,  NT_Literal,  NT_CharLiteral,  },
	NT_AssignOp: NTs {  NT_MINUS_EQU,  NT_STAR_EQU,  NT_HAT_EQU,  NT_SL_EQU,  NT_EQU,  NT_PLUS_EQU,  NT_DIV_EQU,  NT_AND_EQU,  NT_OR_EQU,  NT_MOD_EQU,  NT_SR_EQU,  NT_BSR_EQU,  },
	NT_BANG: NTs {  },
	NT_BREAK: NTs {  },
	NT_BSR: NTs {  },
	NT_BSR_EQU: NTs {  },
	NT_BasicType: NTs {  NT_BasicTypeLit,  },
	NT_BasicTypeLit: NTs {  },
	NT_Beoptfd: NTs {  },
	NT_Block: NTs {  NT_LWING,  },
	NT_BlockStmt: NTs {  NT_Stmt,  NT_MultExpr,  NT_ASSERT,  NT_FloatLiteral,  NT_TILDA,  NT_PrefixOp,  NT_RepHex0xDot,  NT_CharLiteral,  NT_ShiftExpr,  NT_SUPER,  NT_RepDig1xExp,  NT_BasicTypeLit,  NT_Literal,  NT_UnaryExpr,  NT_LWING,  NT_SEMI,  NT_FINAL,  NT_IF,  NT_DecimalNumeral,  NT_OptFinType,  NT_WHILE,  NT_HexNumeral,  NT_SWITCH,  NT_RelateExpr,  NT_NumeralAlts,  NT_IORExpr,  NT_LPAR,  NT_NEW,  NT_DecimalFloat,  NT_Block,  NT_HexSignificand,  NT_ParExpr,  NT_ANDExpr,  NT_StmtExpr,  NT_DO,  NT_LitAlts,  NT_CondORExpr,  NT_SYNCHRONIZED,  NT_CondANDExpr,  NT_RepModif0,  NT_Modifier,  NT_BREAK,  NT_VOID,  NT_TRY,  NT_THROW,  NT_ID,  NT_BANG,  NT_Modifs,  NT_AddExpr,  NT_Expr,  NT_CondExpr,  NT_INC,  NT_IntegerLiteral,  NT_DEC,  NT_EqualExpr,  NT_Any0xX,  NT_QualifiedID,  NT_PLUS,  NT_RepDig1xOptExp,  NT_THIS,  NT_BasicType,  NT_RETURN,  NT_HexFloat,  NT_XORExpr,  NT_FOR,  NT_CONTINUE,  NT_MINUS,  NT_LocalVarDeclStmt,  NT_ClsDecl,  NT_Cls,  NT_StringLiteral,  NT_Primary,  },
	NT_CASE: NTs {  },
	NT_CATCH: NTs {  },
	NT_COLON: NTs {  },
	NT_COMMA: NTs {  },
	NT_CONTINUE: NTs {  },
	NT_CarrotAlts: NTs {  NT_SL,  NT_SR,  NT_BSR,  },
	NT_Catch: NTs {  NT_CATCH,  },
	NT_CatchBlk: NTs {  NT_CATCH,  NT_Finally,  NT_FINALLY,  NT_Catch,  },
	NT_CharLiteral: NTs {  },
	NT_Cls: NTs {  },
	NT_ClsBdy: NTs {  NT_LWING,  },
	NT_ClsBdyDecl: NTs {  NT_OptStatic,  NT_LWING,  NT_Modifier,  NT_Modifs,  NT_Block,  NT_BasicTypeLit,  NT_ClsType,  NT_ClsDecl,  NT_SEMI,  NT_STATIC,  NT_MemDecl,  NT_Type,  NT_TypeAlts,  NT_IntfDecl,  NT_RepModif0,  NT_Cls,  NT_ID,  NT_BasicType,  NT_VOID,  NT_Intf,  },
	NT_ClsCreatorRest: NTs {  NT_Arguments,  NT_LPAR,  },
	NT_ClsDecl: NTs {  NT_Cls,  },
	NT_ClsType: NTs {  NT_ID,  },
	NT_ClsTypeList: NTs {  NT_ClsType,  NT_ID,  },
	NT_CompUnit: NTs {  NT_SemiModDecl,  NT_Modifs,  NT_DeclAlts,  NT_WS,  NT_PACKAGE,  NT_RepImpDecl0x,  NT_IMPORT,  NT_RepSemiModDecl0x,  NT_PackDecl,  NT_Cls,  NT_IntfDecl,  NT_SEMI,  NT_Modifier,  NT_EscOrLineOrBlock,  NT_OptPackDecl,  NT_ImportDecl,  NT_Intf,  NT_RepModif0,  NT_ClsDecl,  },
	NT_CondANDExpr: NTs {  NT_TILDA,  NT_ShiftExpr,  NT_NEW,  NT_LitAlts,  NT_HexFloat,  NT_AddExpr,  NT_PLUS,  NT_HexNumeral,  NT_NumeralAlts,  NT_XORExpr,  NT_FloatLiteral,  NT_THIS,  NT_RepDig1xOptExp,  NT_DecimalNumeral,  NT_DEC,  NT_IntegerLiteral,  NT_MultExpr,  NT_MINUS,  NT_ANDExpr,  NT_VOID,  NT_IORExpr,  NT_INC,  NT_RepDig1xExp,  NT_Primary,  NT_Any0xX,  NT_RepHex0xDot,  NT_Literal,  NT_DecimalFloat,  NT_RelateExpr,  NT_ID,  NT_UnaryExpr,  NT_CharLiteral,  NT_BasicType,  NT_SUPER,  NT_PrefixOp,  NT_LPAR,  NT_BasicTypeLit,  NT_EqualExpr,  NT_BANG,  NT_QualifiedID,  NT_HexSignificand,  NT_ParExpr,  NT_StringLiteral,  },
	NT_CondExpr: NTs {  NT_ANDExpr,  NT_PLUS,  NT_DecimalNumeral,  NT_HexFloat,  NT_LitAlts,  NT_ShiftExpr,  NT_PrefixOp,  NT_EqualExpr,  NT_AddExpr,  NT_StringLiteral,  NT_RelateExpr,  NT_XORExpr,  NT_RepDig1xExp,  NT_ID,  NT_QualifiedID,  NT_Primary,  NT_NumeralAlts,  NT_BasicType,  NT_TILDA,  NT_VOID,  NT_CharLiteral,  NT_RepDig1xOptExp,  NT_MINUS,  NT_ParExpr,  NT_DEC,  NT_Any0xX,  NT_UnaryExpr,  NT_CondORExpr,  NT_HexSignificand,  NT_RepHex0xDot,  NT_IntegerLiteral,  NT_BasicTypeLit,  NT_CondANDExpr,  NT_FloatLiteral,  NT_THIS,  NT_NEW,  NT_LPAR,  NT_Literal,  NT_HexNumeral,  NT_SUPER,  NT_INC,  NT_DecimalFloat,  NT_BANG,  NT_MultExpr,  NT_IORExpr,  },
	NT_CondORExpr: NTs {  NT_CondANDExpr,  NT_ID,  NT_SUPER,  NT_ParExpr,  NT_ShiftExpr,  NT_LitAlts,  NT_NumeralAlts,  NT_BasicType,  NT_PrefixOp,  NT_StringLiteral,  NT_TILDA,  NT_DEC,  NT_VOID,  NT_LPAR,  NT_AddExpr,  NT_RepDig1xOptExp,  NT_MultExpr,  NT_Any0xX,  NT_Literal,  NT_UnaryExpr,  NT_CharLiteral,  NT_QualifiedID,  NT_FloatLiteral,  NT_ANDExpr,  NT_IORExpr,  NT_DecimalFloat,  NT_RelateExpr,  NT_EqualExpr,  NT_PLUS,  NT_HexNumeral,  NT_MINUS,  NT_INC,  NT_RepHex0xDot,  NT_HexSignificand,  NT_THIS,  NT_DecimalNumeral,  NT_IntegerLiteral,  NT_Primary,  NT_BANG,  NT_XORExpr,  NT_RepDig1xExp,  NT_BasicTypeLit,  NT_NEW,  NT_HexFloat,  },
	NT_ConstDecl: NTs {  NT_ID,  },
	NT_ConstDeclRest: NTs {  NT_RepDim0x,  NT_Dim,  NT_LBRK,  NT_EQU,  },
	NT_ConstDeclsRest: NTs {  NT_ConstDeclRest,  NT_LBRK,  NT_EQU,  NT_RepDim0x,  NT_Dim,  },
	NT_ConstExpr: NTs {  NT_NEW,  NT_CondORExpr,  NT_SUPER,  NT_Expr,  NT_QualifiedID,  NT_RepDig1xOptExp,  NT_DecimalNumeral,  NT_BasicType,  NT_IORExpr,  NT_FloatLiteral,  NT_IntegerLiteral,  NT_ID,  NT_HexFloat,  NT_THIS,  NT_BANG,  NT_DecimalFloat,  NT_ParExpr,  NT_LPAR,  NT_LitAlts,  NT_MultExpr,  NT_CondANDExpr,  NT_ShiftExpr,  NT_StringLiteral,  NT_RepDig1xExp,  NT_CondExpr,  NT_AddExpr,  NT_XORExpr,  NT_UnaryExpr,  NT_BasicTypeLit,  NT_RelateExpr,  NT_VOID,  NT_Any0xX,  NT_MINUS,  NT_Primary,  NT_DEC,  NT_NumeralAlts,  NT_RepHex0xDot,  NT_Literal,  NT_ANDExpr,  NT_CharLiteral,  NT_HexNumeral,  NT_HexSignificand,  NT_PLUS,  NT_INC,  NT_PrefixOp,  NT_EqualExpr,  NT_TILDA,  },
	NT_CreatedName: NTs {  NT_ID,  },
	NT_Creator: NTs {  NT_BasicType,  NT_BasicTypeLit,  NT_ClsType,  NT_CreatedName,  NT_ID,  NT_TypeAlts,  },
	NT_DEC: NTs {  },
	NT_DEFAULT: NTs {  },
	NT_DIV: NTs {  },
	NT_DIV_EQU: NTs {  },
	NT_DO: NTs {  },
	NT_DOT: NTs {  },
	NT_DecimalFloat: NTs {  NT_RepDig1xOptExp,  NT_RepDig1xExp,  },
	NT_DecimalNumeral: NTs {  },
	NT_DeclAlts: NTs {  NT_Intf,  NT_ClsDecl,  NT_Cls,  NT_IntfDecl,  },
	NT_Dim: NTs {  NT_LBRK,  },
	NT_DimExpr: NTs {  NT_LBRK,  },
	NT_ELSE: NTs {  },
	NT_EQU: NTs {  },
	NT_EQUAL: NTs {  },
	NT_ESInst: NTs {  NT_GE,  NT_EqCheck,  NT_LT,  NT_GT,  NT_INSTANCEOF,  NT_EqShift,  NT_LE,  },
	NT_EXTENDS: NTs {  },
	NT_EqAlts: NTs {  NT_EQUAL,  NT_NOT_EQUAL,  },
	NT_EqCheck: NTs {  NT_LE,  NT_GE,  NT_LT,  NT_GT,  },
	NT_EqShift: NTs {  NT_EqCheck,  NT_LT,  NT_GT,  NT_LE,  NT_GE,  },
	NT_EqualExpr: NTs {  NT_Primary,  NT_MINUS,  NT_HexSignificand,  NT_DEC,  NT_ParExpr,  NT_TILDA,  NT_THIS,  NT_BasicType,  NT_PLUS,  NT_AddExpr,  NT_ID,  NT_UnaryExpr,  NT_VOID,  NT_LPAR,  NT_BANG,  NT_IntegerLiteral,  NT_PrefixOp,  NT_RepDig1xOptExp,  NT_NEW,  NT_BasicTypeLit,  NT_HexFloat,  NT_Literal,  NT_LitAlts,  NT_FloatLiteral,  NT_Any0xX,  NT_NumeralAlts,  NT_StringLiteral,  NT_INC,  NT_DecimalNumeral,  NT_RelateExpr,  NT_QualifiedID,  NT_RepHex0xDot,  NT_HexNumeral,  NT_MultExpr,  NT_SUPER,  NT_ShiftExpr,  NT_CharLiteral,  NT_RepDig1xExp,  NT_DecimalFloat,  },
	NT_EscOrLineOrBlock: NTs {  },
	NT_EscSlash: NTs {  NT_Escape,  NT_EscUp,  },
	NT_EscUp: NTs {  },
	NT_Escape: NTs {  },
	NT_Escs: NTs {  NT_OctalEscape,  NT_UnicodeEscape,  },
	NT_Expr: NTs {  NT_ParExpr,  NT_Any0xX,  NT_RepHex0xDot,  NT_CondANDExpr,  NT_LPAR,  NT_ID,  NT_ShiftExpr,  NT_StringLiteral,  NT_MINUS,  NT_Literal,  NT_PLUS,  NT_DecimalNumeral,  NT_HexFloat,  NT_Primary,  NT_UnaryExpr,  NT_THIS,  NT_INC,  NT_ANDExpr,  NT_EqualExpr,  NT_RepDig1xExp,  NT_TILDA,  NT_CharLiteral,  NT_HexSignificand,  NT_HexNumeral,  NT_PrefixOp,  NT_BasicType,  NT_BasicTypeLit,  NT_NEW,  NT_LitAlts,  NT_NumeralAlts,  NT_CondORExpr,  NT_SUPER,  NT_MultExpr,  NT_IORExpr,  NT_BANG,  NT_RelateExpr,  NT_DEC,  NT_FloatLiteral,  NT_CondExpr,  NT_AddExpr,  NT_QualifiedID,  NT_XORExpr,  NT_RepDig1xOptExp,  NT_VOID,  NT_IntegerLiteral,  NT_DecimalFloat,  },
	NT_FINAL: NTs {  },
	NT_FINALLY: NTs {  },
	NT_FOR: NTs {  },
	NT_Finally: NTs {  NT_FINALLY,  },
	NT_FloatLiteral: NTs {  NT_RepDig1xExp,  NT_RepDig1xOptExp,  NT_HexFloat,  NT_HexNumeral,  NT_RepHex0xDot,  NT_HexSignificand,  NT_Any0xX,  NT_DecimalFloat,  },
	NT_ForInit: NTs {  NT_QualifiedID,  NT_RepHex0xDot,  NT_DecimalFloat,  NT_ShiftExpr,  NT_NumeralAlts,  NT_DEC,  NT_XORExpr,  NT_Expr,  NT_LitAlts,  NT_HexFloat,  NT_UnaryExpr,  NT_EqualExpr,  NT_PLUS,  NT_AddExpr,  NT_ANDExpr,  NT_CondANDExpr,  NT_DecimalNumeral,  NT_BasicTypeLit,  NT_VOID,  NT_CondORExpr,  NT_MINUS,  NT_RepDig1xOptExp,  NT_OptFinType,  NT_IntegerLiteral,  NT_PrefixOp,  NT_Primary,  NT_StringLiteral,  NT_IORExpr,  NT_INC,  NT_RepDig1xExp,  NT_Any0xX,  NT_ID,  NT_NEW,  NT_ParExpr,  NT_FINAL,  NT_CondExpr,  NT_FloatLiteral,  NT_HexNumeral,  NT_TILDA,  NT_BANG,  NT_MultExpr,  NT_Literal,  NT_BasicType,  NT_THIS,  NT_HexSignificand,  NT_LPAR,  NT_RelateExpr,  NT_StmtExpr,  NT_CharLiteral,  NT_SUPER,  },
	NT_ForUpdate: NTs {  NT_RepDig1xOptExp,  NT_Literal,  NT_CharLiteral,  NT_QualifiedID,  NT_HexFloat,  NT_NumeralAlts,  NT_Expr,  NT_HexNumeral,  NT_RepDig1xExp,  NT_CondExpr,  NT_Any0xX,  NT_MINUS,  NT_SUPER,  NT_DecimalNumeral,  NT_HexSignificand,  NT_AddExpr,  NT_Primary,  NT_RepHex0xDot,  NT_LitAlts,  NT_BasicType,  NT_ShiftExpr,  NT_CondORExpr,  NT_RelateExpr,  NT_PrefixOp,  NT_FloatLiteral,  NT_DecimalFloat,  NT_IORExpr,  NT_StmtExpr,  NT_BasicTypeLit,  NT_CondANDExpr,  NT_UnaryExpr,  NT_EqualExpr,  NT_BANG,  NT_INC,  NT_StringLiteral,  NT_ANDExpr,  NT_VOID,  NT_ID,  NT_THIS,  NT_TILDA,  NT_DEC,  NT_LPAR,  NT_PLUS,  NT_ParExpr,  NT_MultExpr,  NT_IntegerLiteral,  NT_NEW,  NT_XORExpr,  },
	NT_FormalParam: NTs {  NT_OptFinType,  NT_FINAL,  },
	NT_FormalParamDecls: NTs {  NT_OptFinType,  NT_FINAL,  },
	NT_FormalParamDeclsRest: NTs {  NT_VarDelID,  NT_ID,  },
	NT_FormalParams: NTs {  NT_LPAR,  },
	NT_GE: NTs {  },
	NT_GT: NTs {  },
	NT_HAT: NTs {  },
	NT_HAT_EQU: NTs {  },
	NT_HexFloat: NTs {  NT_HexNumeral,  NT_RepHex0xDot,  NT_HexSignificand,  NT_Any0xX,  },
	NT_HexNumeral: NTs {  NT_Any0xX,  },
	NT_HexSignificand: NTs {  NT_HexNumeral,  NT_RepHex0xDot,  NT_Any0xX,  },
	NT_ID: NTs {  },
	NT_IDSuffix: NTs {  NT_LBRK,  NT_Arguments,  NT_LPAR,  NT_DOT,  },
	NT_IF: NTs {  },
	NT_IMPLEMENTS: NTs {  },
	NT_IMPORT: NTs {  },
	NT_INC: NTs {  },
	NT_INSTANCEOF: NTs {  },
	NT_IORExpr: NTs {  NT_MINUS,  NT_BasicType,  NT_IntegerLiteral,  NT_HexSignificand,  NT_MultExpr,  NT_DecimalNumeral,  NT_SUPER,  NT_RepDig1xOptExp,  NT_AddExpr,  NT_PrefixOp,  NT_CharLiteral,  NT_Literal,  NT_ANDExpr,  NT_Primary,  NT_VOID,  NT_RelateExpr,  NT_DEC,  NT_LPAR,  NT_XORExpr,  NT_FloatLiteral,  NT_TILDA,  NT_PLUS,  NT_Any0xX,  NT_BasicTypeLit,  NT_THIS,  NT_ShiftExpr,  NT_DecimalFloat,  NT_ParExpr,  NT_NEW,  NT_StringLiteral,  NT_RepDig1xExp,  NT_EqualExpr,  NT_LitAlts,  NT_ID,  NT_INC,  NT_HexNumeral,  NT_UnaryExpr,  NT_BANG,  NT_RepHex0xDot,  NT_NumeralAlts,  NT_HexFloat,  NT_QualifiedID,  },
	NT_ImportDecl: NTs {  NT_IMPORT,  },
	NT_InnerCreator: NTs {  NT_ID,  },
	NT_IntegerLiteral: NTs {  NT_NumeralAlts,  NT_DecimalNumeral,  NT_HexNumeral,  NT_Any0xX,  },
	NT_Intf: NTs {  },
	NT_IntfBdy: NTs {  NT_LWING,  },
	NT_IntfBdyDecl: NTs {  NT_VOID,  NT_IntfDecl,  NT_BasicTypeLit,  NT_BasicType,  NT_TypeAlts,  NT_Modifs,  NT_ClsDecl,  NT_Type,  NT_IntfMethFieldDecl,  NT_SEMI,  NT_RepModif0,  NT_ID,  NT_IntfMemDecl,  NT_ClsType,  NT_Intf,  NT_Cls,  NT_Modifier,  },
	NT_IntfDecl: NTs {  NT_Intf,  },
	NT_IntfMemDecl: NTs {  NT_TypeAlts,  NT_Intf,  NT_Cls,  NT_IntfMethFieldDecl,  NT_ID,  NT_BasicType,  NT_Type,  NT_ClsDecl,  NT_BasicTypeLit,  NT_ClsType,  NT_VOID,  NT_IntfDecl,  },
	NT_IntfMethDeclRest: NTs {  NT_FormalParams,  NT_LPAR,  },
	NT_IntfMethFieldDecl: NTs {  NT_Type,  NT_TypeAlts,  NT_ID,  NT_BasicType,  NT_BasicTypeLit,  NT_ClsType,  },
	NT_IntfMethFieldRest: NTs {  NT_ConstDeclsRest,  NT_LBRK,  NT_EQU,  NT_Dim,  NT_IntfMethDeclRest,  NT_FormalParams,  NT_ConstDeclRest,  NT_RepDim0x,  NT_LPAR,  },
	NT_LBRK: NTs {  },
	NT_LE: NTs {  },
	NT_LPAR: NTs {  },
	NT_LT: NTs {  },
	NT_LWING: NTs {  },
	NT_Letter: NTs {  NT_WS,  NT_EscOrLineOrBlock,  },
	NT_LetterLorD: NTs {  NT_Letter,  NT_WS,  NT_EscOrLineOrBlock,  NT_RepLorD0x,  NT_LorD,  },
	NT_LitAlts: NTs {  NT_HexSignificand,  NT_HexFloat,  NT_RepHex0xDot,  NT_NumeralAlts,  NT_StringLiteral,  NT_FloatLiteral,  NT_HexNumeral,  NT_DecimalNumeral,  NT_CharLiteral,  NT_Any0xX,  NT_RepDig1xExp,  NT_RepDig1xOptExp,  NT_IntegerLiteral,  NT_DecimalFloat,  },
	NT_Literal: NTs {  NT_FloatLiteral,  NT_RepDig1xOptExp,  NT_Any0xX,  NT_DecimalFloat,  NT_LitAlts,  NT_RepHex0xDot,  NT_StringLiteral,  NT_HexSignificand,  NT_DecimalNumeral,  NT_CharLiteral,  NT_RepDig1xExp,  NT_HexNumeral,  NT_IntegerLiteral,  NT_NumeralAlts,  NT_HexFloat,  },
	NT_LocalVarDeclStmt: NTs {  NT_OptFinType,  NT_FINAL,  },
	NT_LorD: NTs {  NT_Letter,  NT_WS,  NT_EscOrLineOrBlock,  },
	NT_MINUS: NTs {  },
	NT_MINUS_EQU: NTs {  },
	NT_MOD: NTs {  },
	NT_MOD_EQU: NTs {  },
	NT_MemAlts: NTs {  NT_LWING,  NT_SEMI,  NT_Block,  },
	NT_MemDecl: NTs {  NT_Intf,  NT_ClsDecl,  NT_VOID,  NT_ID,  NT_BasicType,  NT_BasicTypeLit,  NT_ClsType,  NT_TypeAlts,  NT_IntfDecl,  NT_Cls,  NT_Type,  },
	NT_Modifier: NTs {  NT_Modifs,  },
	NT_Modifs: NTs {  },
	NT_MultExpr: NTs {  NT_FloatLiteral,  NT_DecimalNumeral,  NT_RepHex0xDot,  NT_ID,  NT_PrefixOp,  NT_SUPER,  NT_LPAR,  NT_Primary,  NT_LitAlts,  NT_MINUS,  NT_HexFloat,  NT_BasicType,  NT_ParExpr,  NT_DEC,  NT_PLUS,  NT_StringLiteral,  NT_VOID,  NT_RepDig1xExp,  NT_HexNumeral,  NT_BANG,  NT_INC,  NT_BasicTypeLit,  NT_Any0xX,  NT_DecimalFloat,  NT_THIS,  NT_RepDig1xOptExp,  NT_TILDA,  NT_IntegerLiteral,  NT_NumeralAlts,  NT_HexSignificand,  NT_UnaryExpr,  NT_NEW,  NT_Literal,  NT_QualifiedID,  NT_CharLiteral,  },
	NT_NEW: NTs {  },
	NT_NOT_EQUAL: NTs {  },
	NT_NumeralAlts: NTs {  NT_HexNumeral,  NT_Any0xX,  NT_DecimalNumeral,  },
	NT_OR: NTs {  },
	NT_ORXOR: NTs {  NT_OR,  },
	NT_OR_EQU: NTs {  },
	NT_OR_OR: NTs {  },
	NT_OctalEscape: NTs {  },
	NT_OptArgs: NTs {  NT_Arguments,  NT_LPAR,  },
	NT_OptClsBdy: NTs {  NT_ClsBdy,  NT_LWING,  },
	NT_OptColExpr: NTs {  NT_COLON,  },
	NT_OptCom: NTs {  NT_COMMA,  },
	NT_OptComFormPDecl: NTs {  NT_COMMA,  },
	NT_OptDot: NTs {  },
	NT_OptDotStar: NTs {  NT_DOT,  },
	NT_OptElse: NTs {  NT_ELSE,  },
	NT_OptEqVarInit: NTs {  NT_EQU,  },
	NT_OptEsc: NTs {  NT_Escape,  },
	NT_OptExpr: NTs {  NT_EqualExpr,  NT_CharLiteral,  NT_IORExpr,  NT_HexSignificand,  NT_NEW,  NT_DecimalFloat,  NT_AddExpr,  NT_XORExpr,  NT_Any0xX,  NT_ShiftExpr,  NT_HexFloat,  NT_SUPER,  NT_BANG,  NT_FloatLiteral,  NT_QualifiedID,  NT_ANDExpr,  NT_INC,  NT_TILDA,  NT_LitAlts,  NT_NumeralAlts,  NT_RepDig1xExp,  NT_BasicTypeLit,  NT_Expr,  NT_RepDig1xOptExp,  NT_VOID,  NT_ID,  NT_StringLiteral,  NT_MINUS,  NT_LPAR,  NT_PLUS,  NT_THIS,  NT_PrefixOp,  NT_CondORExpr,  NT_CondExpr,  NT_Literal,  NT_Primary,  NT_HexNumeral,  NT_DEC,  NT_ParExpr,  NT_CondANDExpr,  NT_DecimalNumeral,  NT_BasicType,  NT_IntegerLiteral,  NT_RepHex0xDot,  NT_UnaryExpr,  NT_MultExpr,  NT_RelateExpr,  },
	NT_OptExprs: NTs {  NT_DEC,  NT_QualifiedID,  NT_ParExpr,  NT_DecimalNumeral,  NT_MultExpr,  NT_RelateExpr,  NT_CondORExpr,  NT_PLUS,  NT_StringLiteral,  NT_THIS,  NT_PrefixOp,  NT_TILDA,  NT_XORExpr,  NT_RepDig1xOptExp,  NT_CondANDExpr,  NT_LPAR,  NT_ANDExpr,  NT_RepDig1xExp,  NT_IntegerLiteral,  NT_BasicType,  NT_NumeralAlts,  NT_SUPER,  NT_BANG,  NT_FloatLiteral,  NT_VOID,  NT_EqualExpr,  NT_LitAlts,  NT_HexFloat,  NT_Primary,  NT_RepHex0xDot,  NT_Literal,  NT_NEW,  NT_ID,  NT_Expr,  NT_HexSignificand,  NT_INC,  NT_Any0xX,  NT_MINUS,  NT_BasicTypeLit,  NT_CondExpr,  NT_ShiftExpr,  NT_HexNumeral,  NT_CharLiteral,  NT_AddExpr,  NT_UnaryExpr,  NT_IORExpr,  NT_DecimalFloat,  },
	NT_OptExtClsType: NTs {  NT_EXTENDS,  },
	NT_OptExtendsClsLis: NTs {  NT_EXTENDS,  },
	NT_OptFin: NTs {  NT_FINAL,  },
	NT_OptFinType: NTs {  NT_FINAL,  },
	NT_OptForInit: NTs {  NT_HexFloat,  NT_PLUS,  NT_IntegerLiteral,  NT_ID,  NT_SUPER,  NT_ForInit,  NT_XORExpr,  NT_StmtExpr,  NT_DecimalFloat,  NT_Primary,  NT_RepDig1xExp,  NT_Literal,  NT_THIS,  NT_RepDig1xOptExp,  NT_StringLiteral,  NT_VOID,  NT_MINUS,  NT_OptFinType,  NT_NEW,  NT_FINAL,  NT_BANG,  NT_LitAlts,  NT_BasicTypeLit,  NT_MultExpr,  NT_RepHex0xDot,  NT_IORExpr,  NT_ParExpr,  NT_HexNumeral,  NT_HexSignificand,  NT_Expr,  NT_ANDExpr,  NT_CondExpr,  NT_BasicType,  NT_LPAR,  NT_CondANDExpr,  NT_PrefixOp,  NT_DecimalNumeral,  NT_INC,  NT_FloatLiteral,  NT_QualifiedID,  NT_ShiftExpr,  NT_DEC,  NT_EqualExpr,  NT_AddExpr,  NT_CondORExpr,  NT_Any0xX,  NT_TILDA,  NT_RelateExpr,  NT_NumeralAlts,  NT_UnaryExpr,  NT_CharLiteral,  },
	NT_OptForUpd: NTs {  NT_UnaryExpr,  NT_DEC,  NT_NEW,  NT_RepDig1xExp,  NT_RepHex0xDot,  NT_FloatLiteral,  NT_AddExpr,  NT_StringLiteral,  NT_ParExpr,  NT_Literal,  NT_CharLiteral,  NT_HexFloat,  NT_HexNumeral,  NT_CondExpr,  NT_Primary,  NT_LitAlts,  NT_IORExpr,  NT_StmtExpr,  NT_ID,  NT_NumeralAlts,  NT_ShiftExpr,  NT_PrefixOp,  NT_THIS,  NT_HexSignificand,  NT_BasicType,  NT_CondORExpr,  NT_CondANDExpr,  NT_ForUpdate,  NT_EqualExpr,  NT_ANDExpr,  NT_MINUS,  NT_SUPER,  NT_DecimalNumeral,  NT_BasicTypeLit,  NT_BANG,  NT_VOID,  NT_PLUS,  NT_MultExpr,  NT_RepDig1xOptExp,  NT_QualifiedID,  NT_Any0xX,  NT_LPAR,  NT_IntegerLiteral,  NT_XORExpr,  NT_RelateExpr,  NT_DecimalFloat,  NT_INC,  NT_TILDA,  NT_Expr,  },
	NT_OptFormPDecl: NTs {  NT_OptFinType,  NT_FINAL,  NT_FormalParamDecls,  },
	NT_OptID: NTs {  NT_ID,  },
	NT_OptIDSuff: NTs {  NT_IDSuffix,  NT_LPAR,  NT_DOT,  NT_LBRK,  NT_Arguments,  },
	NT_OptImpClsLst: NTs {  NT_IMPLEMENTS,  },
	NT_OptPackDecl: NTs {  NT_PACKAGE,  NT_PackDecl,  },
	NT_OptStatic: NTs {  NT_STATIC,  },
	NT_OptThrowClsTypLst: NTs {  NT_THROWS,  },
	NT_OptVarInit: NTs {  NT_StringLiteral,  NT_QualifiedID,  NT_LitAlts,  NT_CondExpr,  NT_NEW,  NT_Literal,  NT_VarInitial,  NT_HexNumeral,  NT_Primary,  NT_RelateExpr,  NT_AddExpr,  NT_RepDig1xOptExp,  NT_VOID,  NT_SUPER,  NT_HexSignificand,  NT_XORExpr,  NT_MultExpr,  NT_DEC,  NT_DecimalNumeral,  NT_Any0xX,  NT_RepHex0xDot,  NT_CondANDExpr,  NT_CharLiteral,  NT_RepDig1xExp,  NT_DecimalFloat,  NT_LWING,  NT_IORExpr,  NT_BasicTypeLit,  NT_INC,  NT_ANDExpr,  NT_MINUS,  NT_THIS,  NT_TILDA,  NT_UnaryExpr,  NT_PLUS,  NT_HexFloat,  NT_CondORExpr,  NT_NumeralAlts,  NT_Expr,  NT_ParExpr,  NT_ArrayInitializer,  NT_ID,  NT_IntegerLiteral,  NT_EqualExpr,  NT_PrefixOp,  NT_ShiftExpr,  NT_LPAR,  NT_BasicType,  NT_BANG,  NT_FloatLiteral,  },
	NT_OtherAlts: NTs {  NT_THIS,  NT_SUPER,  NT_NEW,  NT_Cls,  },
	NT_PACKAGE: NTs {  },
	NT_PLUS: NTs {  },
	NT_PLUS_EQU: NTs {  },
	NT_PackDecl: NTs {  NT_PACKAGE,  },
	NT_ParExpr: NTs {  NT_LPAR,  },
	NT_PostfixOp: NTs {  NT_INC,  NT_DEC,  },
	NT_PrefixOp: NTs {  NT_TILDA,  NT_PLUS,  NT_MINUS,  NT_INC,  NT_DEC,  NT_BANG,  },
	NT_Primary: NTs {  NT_BasicType,  NT_ParExpr,  NT_LPAR,  NT_LitAlts,  NT_RepHex0xDot,  NT_HexFloat,  NT_QualifiedID,  NT_ID,  NT_VOID,  NT_THIS,  NT_FloatLiteral,  NT_RepDig1xExp,  NT_SUPER,  NT_Any0xX,  NT_DecimalFloat,  NT_CharLiteral,  NT_HexNumeral,  NT_NEW,  NT_Literal,  NT_RepDig1xOptExp,  NT_StringLiteral,  NT_HexSignificand,  NT_DecimalNumeral,  NT_IntegerLiteral,  NT_NumeralAlts,  NT_BasicTypeLit,  },
	NT_QUERY: NTs {  },
	NT_QualifiedID: NTs {  NT_ID,  },
	NT_RBRK: NTs {  },
	NT_RBRKAlts: NTs {  NT_HexNumeral,  NT_LitAlts,  NT_CondANDExpr,  NT_StringLiteral,  NT_RepDig1xExp,  NT_CondExpr,  NT_AddExpr,  NT_RepDig1xOptExp,  NT_ParExpr,  NT_RepHex0xDot,  NT_MINUS,  NT_Literal,  NT_TILDA,  NT_DecimalNumeral,  NT_THIS,  NT_ANDExpr,  NT_BasicTypeLit,  NT_BANG,  NT_PLUS,  NT_HexFloat,  NT_Primary,  NT_INC,  NT_Expr,  NT_DEC,  NT_XORExpr,  NT_ID,  NT_BasicType,  NT_VOID,  NT_UnaryExpr,  NT_SUPER,  NT_EqualExpr,  NT_CharLiteral,  NT_MultExpr,  NT_CondORExpr,  NT_PrefixOp,  NT_NEW,  NT_FloatLiteral,  NT_QualifiedID,  NT_IntegerLiteral,  NT_LPAR,  NT_ShiftExpr,  NT_HexSignificand,  NT_NumeralAlts,  NT_IORExpr,  NT_RelateExpr,  NT_DecimalFloat,  NT_Any0xX,  NT_RBRK,  },
	NT_RETURN: NTs {  },
	NT_RPAR: NTs {  },
	NT_RWING: NTs {  },
	NT_ReferenceType: NTs {  NT_BasicTypeLit,  NT_ClsType,  NT_ID,  NT_BasicType,  },
	NT_RelateExpr: NTs {  NT_MultExpr,  NT_Literal,  NT_NumeralAlts,  NT_StringLiteral,  NT_HexSignificand,  NT_ID,  NT_RepDig1xExp,  NT_DecimalFloat,  NT_DEC,  NT_UnaryExpr,  NT_ParExpr,  NT_INC,  NT_IntegerLiteral,  NT_VOID,  NT_Primary,  NT_LitAlts,  NT_MINUS,  NT_SUPER,  NT_QualifiedID,  NT_PrefixOp,  NT_ShiftExpr,  NT_TILDA,  NT_RepDig1xOptExp,  NT_FloatLiteral,  NT_NEW,  NT_LPAR,  NT_THIS,  NT_BasicTypeLit,  NT_Any0xX,  NT_DecimalNumeral,  NT_CharLiteral,  NT_HexFloat,  NT_BasicType,  NT_PLUS,  NT_RepHex0xDot,  NT_AddExpr,  NT_HexNumeral,  NT_BANG,  },
	NT_RepANDEq0x: NTs {  NT_AND,  },
	NT_RepANDIOR0x: NTs {  NT_AND_AND,  },
	NT_RepAddAltsMult0x: NTs {  NT_AddAlts,  NT_PLUS,  NT_MINUS,  },
	NT_RepAsscExpr0x: NTs {  NT_EQU,  NT_DIV_EQU,  NT_AND_EQU,  NT_OR_EQU,  NT_STAR_EQU,  NT_MOD_EQU,  NT_SR_EQU,  NT_BSR_EQU,  NT_SL_EQU,  NT_HAT_EQU,  NT_AssignOp,  NT_PLUS_EQU,  NT_MINUS_EQU,  },
	NT_RepBlkSt0x: NTs {  NT_SYNCHRONIZED,  NT_EqualExpr,  NT_XORExpr,  NT_HexSignificand,  NT_StringLiteral,  NT_ShiftExpr,  NT_RepDig1xExp,  NT_WHILE,  NT_ParExpr,  NT_BasicTypeLit,  NT_OptFinType,  NT_IORExpr,  NT_Any0xX,  NT_FINAL,  NT_DecimalFloat,  NT_PLUS,  NT_CONTINUE,  NT_CharLiteral,  NT_SWITCH,  NT_RelateExpr,  NT_CondANDExpr,  NT_TRY,  NT_QualifiedID,  NT_Cls,  NT_LWING,  NT_DO,  NT_BANG,  NT_Modifs,  NT_ASSERT,  NT_HexNumeral,  NT_Modifier,  NT_THROW,  NT_DEC,  NT_Block,  NT_Expr,  NT_MINUS,  NT_TILDA,  NT_NEW,  NT_THIS,  NT_RepHex0xDot,  NT_FloatLiteral,  NT_NumeralAlts,  NT_IF,  NT_StmtExpr,  NT_RepModif0,  NT_ID,  NT_RETURN,  NT_FOR,  NT_ClsDecl,  NT_SUPER,  NT_BREAK,  NT_VOID,  NT_INC,  NT_IntegerLiteral,  NT_HexFloat,  NT_BasicType,  NT_LPAR,  NT_LitAlts,  NT_AddExpr,  NT_CondExpr,  NT_LocalVarDeclStmt,  NT_Primary,  NT_PrefixOp,  NT_Literal,  NT_Stmt,  NT_MultExpr,  NT_UnaryExpr,  NT_SEMI,  NT_DecimalNumeral,  NT_BlockStmt,  NT_ANDExpr,  NT_CondORExpr,  NT_RepDig1xOptExp,  },
	NT_RepCatch0x: NTs {  NT_Catch,  NT_CATCH,  },
	NT_RepClsBDecl0x: NTs {  NT_ClsBdyDecl,  NT_IntfDecl,  NT_BasicType,  NT_Block,  NT_Type,  NT_Cls,  NT_Modifier,  NT_BasicTypeLit,  NT_SEMI,  NT_STATIC,  NT_ID,  NT_Intf,  NT_OptStatic,  NT_Modifs,  NT_ClsType,  NT_ClsDecl,  NT_MemDecl,  NT_TypeAlts,  NT_RepModif0,  NT_VOID,  NT_LWING,  },
	NT_RepComCls0x: NTs {  NT_COMMA,  },
	NT_RepComCnstDecl0x: NTs {  NT_COMMA,  },
	NT_RepComExp0x: NTs {  NT_COMMA,  },
	NT_RepComInit0x: NTs {  NT_COMMA,  },
	NT_RepComSExpr0x: NTs {  NT_COMMA,  },
	NT_RepComVDecl0x: NTs {  NT_COMMA,  },
	NT_RepCondition0x: NTs {  NT_QUERY,  },
	NT_RepDig1xExp: NTs {  },
	NT_RepDig1xOptExp: NTs {  },
	NT_RepDim0x: NTs {  NT_Dim,  NT_LBRK,  },
	NT_RepDimExpr0x: NTs {  NT_LBRK,  NT_DimExpr,  },
	NT_RepDotID0x: NTs {  NT_DOT,  },
	NT_RepESInst0x: NTs {  NT_INSTANCEOF,  NT_EqShift,  NT_LE,  NT_GE,  NT_EqCheck,  NT_LT,  NT_ESInst,  NT_GT,  },
	NT_RepEqExpr0x: NTs {  NT_NOT_EQUAL,  NT_EqAlts,  NT_EQUAL,  },
	NT_RepHatAND0x: NTs {  NT_HAT,  },
	NT_RepHex0xDot: NTs {  NT_Any0xX,  },
	NT_RepImpDecl0x: NTs {  NT_ImportDecl,  NT_IMPORT,  },
	NT_RepInBodDecl0x: NTs {  NT_TypeAlts,  NT_Modifs,  NT_SEMI,  NT_Intf,  NT_BasicTypeLit,  NT_ClsDecl,  NT_Cls,  NT_VOID,  NT_RepModif0,  NT_Type,  NT_ID,  NT_IntfBdyDecl,  NT_Modifier,  NT_ClsType,  NT_IntfDecl,  NT_BasicType,  NT_IntfMethFieldDecl,  NT_IntfMemDecl,  },
	NT_RepLorD0x: NTs {  NT_RepLorD0x,  NT_LorD,  NT_Letter,  NT_WS,  NT_EscOrLineOrBlock,  },
	NT_RepModif0: NTs {  NT_Modifier,  NT_Modifs,  },
	NT_RepORXOR0x: NTs {  NT_ORXOR,  NT_OR,  },
	NT_RepORcAND0x: NTs {  NT_OR_OR,  },
	NT_RepPfOp0x: NTs {  NT_PostfixOp,  NT_INC,  NT_DEC,  },
	NT_RepSDMUExpr0x: NTs {  NT_STAR,  NT_DIV,  NT_MOD,  NT_SDM,  },
	NT_RepSel0x: NTs {  NT_Selector,  NT_LBRK,  NT_DOT,  NT_DimExpr,  },
	NT_RepSemiModDecl0x: NTs {  NT_SemiModDecl,  NT_ClsDecl,  NT_Intf,  NT_RepModif0,  NT_Modifs,  NT_Cls,  NT_SEMI,  NT_Modifier,  NT_DeclAlts,  NT_IntfDecl,  },
	NT_RepSwBlkStmt0x: NTs {  NT_SwitchBlockStmtGrp,  NT_SwitchLabel,  NT_CASE,  NT_DEFAULT,  },
	NT_SDM: NTs {  NT_STAR,  NT_DIV,  NT_MOD,  },
	NT_SEMI: NTs {  },
	NT_SL: NTs {  },
	NT_SL_EQU: NTs {  },
	NT_SR: NTs {  },
	NT_SR_EQU: NTs {  },
	NT_STAR: NTs {  },
	NT_STAR_EQU: NTs {  },
	NT_STATIC: NTs {  },
	NT_SUPER: NTs {  },
	NT_SWITCH: NTs {  },
	NT_SYNCHRONIZED: NTs {  },
	NT_Selector: NTs {  NT_DOT,  NT_DimExpr,  NT_LBRK,  },
	NT_SemiModDecl: NTs {  NT_DeclAlts,  NT_ClsDecl,  NT_Intf,  NT_SEMI,  NT_Modifier,  NT_Cls,  NT_IntfDecl,  NT_RepModif0,  NT_Modifs,  },
	NT_ShiftAlts: NTs {  NT_CarrotAlts,  NT_SL,  NT_SR,  NT_BSR,  },
	NT_ShiftExpr: NTs {  NT_SUPER,  NT_DecimalNumeral,  NT_HexSignificand,  NT_MultExpr,  NT_QualifiedID,  NT_PrefixOp,  NT_Primary,  NT_CharLiteral,  NT_VOID,  NT_Literal,  NT_NumeralAlts,  NT_StringLiteral,  NT_DEC,  NT_NEW,  NT_LitAlts,  NT_TILDA,  NT_RepHex0xDot,  NT_INC,  NT_HexFloat,  NT_ID,  NT_AddExpr,  NT_HexNumeral,  NT_UnaryExpr,  NT_ParExpr,  NT_LPAR,  NT_RepDig1xOptExp,  NT_Any0xX,  NT_MINUS,  NT_BasicType,  NT_PLUS,  NT_DecimalFloat,  NT_THIS,  NT_RepDig1xExp,  NT_FloatLiteral,  NT_BasicTypeLit,  NT_IntegerLiteral,  NT_BANG,  },
	NT_Stmt: NTs {  NT_AddExpr,  NT_RepHex0xDot,  NT_HexFloat,  NT_BasicType,  NT_BasicTypeLit,  NT_CondORExpr,  NT_SYNCHRONIZED,  NT_RETURN,  NT_IORExpr,  NT_LPAR,  NT_MINUS,  NT_DO,  NT_ID,  NT_CondANDExpr,  NT_PLUS,  NT_Literal,  NT_Any0xX,  NT_CharLiteral,  NT_ASSERT,  NT_SWITCH,  NT_HexSignificand,  NT_NEW,  NT_UnaryExpr,  NT_ShiftExpr,  NT_RelateExpr,  NT_RepDig1xOptExp,  NT_Primary,  NT_DecimalNumeral,  NT_TRY,  NT_SEMI,  NT_SUPER,  NT_QualifiedID,  NT_INC,  NT_FloatLiteral,  NT_Expr,  NT_IntegerLiteral,  NT_BANG,  NT_DecimalFloat,  NT_StringLiteral,  NT_BREAK,  NT_ParExpr,  NT_ANDExpr,  NT_TILDA,  NT_XORExpr,  NT_LWING,  NT_FOR,  NT_PrefixOp,  NT_MultExpr,  NT_THROW,  NT_CONTINUE,  NT_RepDig1xExp,  NT_StmtExpr,  NT_EqualExpr,  NT_VOID,  NT_DEC,  NT_IF,  NT_WHILE,  NT_HexNumeral,  NT_CondExpr,  NT_NumeralAlts,  NT_THIS,  NT_Block,  NT_LitAlts,  },
	NT_StmtExpr: NTs {  NT_CondANDExpr,  NT_ID,  NT_NEW,  NT_CondORExpr,  NT_DEC,  NT_IORExpr,  NT_THIS,  NT_DecimalNumeral,  NT_HexSignificand,  NT_TILDA,  NT_XORExpr,  NT_LPAR,  NT_PLUS,  NT_MINUS,  NT_AddExpr,  NT_UnaryExpr,  NT_EqualExpr,  NT_RelateExpr,  NT_RepDig1xOptExp,  NT_Primary,  NT_BANG,  NT_ParExpr,  NT_RepHex0xDot,  NT_MultExpr,  NT_IntegerLiteral,  NT_QualifiedID,  NT_Literal,  NT_Expr,  NT_CharLiteral,  NT_PrefixOp,  NT_LitAlts,  NT_HexFloat,  NT_BasicType,  NT_SUPER,  NT_CondExpr,  NT_INC,  NT_HexNumeral,  NT_RepDig1xExp,  NT_BasicTypeLit,  NT_DecimalFloat,  NT_Any0xX,  NT_ShiftExpr,  NT_StringLiteral,  NT_ANDExpr,  NT_NumeralAlts,  NT_FloatLiteral,  NT_VOID,  },
	NT_StrClose: NTs {  NT_Escape,  NT_OptEsc,  },
	NT_StringLiteral: NTs {  },
	NT_SuperSuffix: NTs {  NT_Arguments,  NT_LPAR,  NT_DOT,  },
	NT_SwitchBlockStmtGrp: NTs {  NT_SwitchLabel,  NT_CASE,  NT_DEFAULT,  },
	NT_SwitchLabel: NTs {  NT_CASE,  NT_DEFAULT,  },
	NT_THIS: NTs {  },
	NT_THROW: NTs {  },
	NT_THROWS: NTs {  },
	NT_TILDA: NTs {  },
	NT_TRY: NTs {  },
	NT_Type: NTs {  NT_ID,  NT_BasicType,  NT_BasicTypeLit,  NT_ClsType,  NT_TypeAlts,  },
	NT_TypeAlts: NTs {  NT_BasicTypeLit,  NT_ClsType,  NT_ID,  NT_BasicType,  },
	NT_UnaryExpr: NTs {  NT_NumeralAlts,  NT_RepHex0xDot,  NT_SUPER,  NT_Any0xX,  NT_ID,  NT_PrefixOp,  NT_LPAR,  NT_Primary,  NT_HexSignificand,  NT_NEW,  NT_Literal,  NT_StringLiteral,  NT_LitAlts,  NT_QualifiedID,  NT_MINUS,  NT_FloatLiteral,  NT_HexNumeral,  NT_BANG,  NT_DecimalFloat,  NT_THIS,  NT_CharLiteral,  NT_BasicType,  NT_ParExpr,  NT_INC,  NT_DEC,  NT_RepDig1xOptExp,  NT_BasicTypeLit,  NT_HexFloat,  NT_VOID,  NT_TILDA,  NT_PLUS,  NT_IntegerLiteral,  NT_RepDig1xExp,  NT_DecimalNumeral,  },
	NT_UnicodeEscape: NTs {  },
	NT_VOID: NTs {  },
	NT_VarDecl: NTs {  NT_ID,  },
	NT_VarDeclInit: NTs {  NT_VarDecl,  NT_ID,  },
	NT_VarDelID: NTs {  NT_ID,  },
	NT_VarInitial: NTs {  NT_Any0xX,  NT_RepHex0xDot,  NT_MINUS,  NT_THIS,  NT_TILDA,  NT_ArrayInitializer,  NT_QualifiedID,  NT_AddExpr,  NT_BasicType,  NT_CondANDExpr,  NT_LPAR,  NT_IntegerLiteral,  NT_UnaryExpr,  NT_EqualExpr,  NT_LitAlts,  NT_BANG,  NT_RepDig1xOptExp,  NT_VOID,  NT_ID,  NT_Literal,  NT_PLUS,  NT_HexFloat,  NT_LWING,  NT_SUPER,  NT_CondExpr,  NT_CharLiteral,  NT_HexSignificand,  NT_PrefixOp,  NT_XORExpr,  NT_ShiftExpr,  NT_INC,  NT_CondORExpr,  NT_NumeralAlts,  NT_FloatLiteral,  NT_MultExpr,  NT_DEC,  NT_IORExpr,  NT_RepDig1xExp,  NT_Expr,  NT_BasicTypeLit,  NT_NEW,  NT_DecimalFloat,  NT_ANDExpr,  NT_HexNumeral,  NT_Primary,  NT_DecimalNumeral,  NT_RelateExpr,  NT_ParExpr,  NT_StringLiteral,  },
	NT_VoidIntfMethDeclRst: NTs {  NT_FormalParams,  NT_LPAR,  },
	NT_WHILE: NTs {  },
	NT_WS: NTs {  NT_EscOrLineOrBlock,  },
	NT_XORExpr: NTs {  NT_BANG,  NT_RepHex0xDot,  NT_INC,  NT_HexSignificand,  NT_Any0xX,  NT_CharLiteral,  NT_Literal,  NT_UnaryExpr,  NT_NEW,  NT_ParExpr,  NT_NumeralAlts,  NT_RepDig1xExp,  NT_BasicTypeLit,  NT_HexNumeral,  NT_Primary,  NT_EqualExpr,  NT_FloatLiteral,  NT_ANDExpr,  NT_StringLiteral,  NT_MultExpr,  NT_MINUS,  NT_THIS,  NT_DecimalNumeral,  NT_ShiftExpr,  NT_BasicType,  NT_IntegerLiteral,  NT_QualifiedID,  NT_VOID,  NT_RepDig1xOptExp,  NT_TILDA,  NT_HexFloat,  NT_SUPER,  NT_DecimalFloat,  NT_LitAlts,  NT_AddExpr,  NT_ID,  NT_RelateExpr,  NT_PLUS,  NT_PrefixOp,  NT_LPAR,  NT_DEC,  },
}
