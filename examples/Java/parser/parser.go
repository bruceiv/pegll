// Package parser is generated by gogll. Do not edit.
package parser

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"Java/lexer"
	"Java/parser/bsr"
	"Java/parser/slot"
	"Java/parser/symbols"
	"Java/token"
)

type parser struct {
	cI int

	R *descriptors
	U *descriptors

	popped   map[poppedNode]bool
	crf      map[clusterNode][]*crfNode
	crfNodes map[crfNode]*crfNode

	lex         *lexer.Lexer
	parseErrors []*Error

	bsrSet *bsr.Set
}

func newParser(l *lexer.Lexer) *parser {
	return &parser{
		cI:     0,
		lex:    l,
		R:      &descriptors{},
		U:      &descriptors{},
		popped: make(map[poppedNode]bool),
		crf: map[clusterNode][]*crfNode{
			{symbols.NT_CompUnit, 0}: {},
		},
		crfNodes:    map[crfNode]*crfNode{},
		bsrSet:      bsr.New(symbols.NT_CompUnit, l),
		parseErrors: nil,
	}
}

// Parse returns the BSR set containing the parse forest.
// If the parse was successfull []*Error is nil
func Parse(l *lexer.Lexer) (*bsr.Set, []*Error) {
	return newParser(l).parse()
}

func (p *parser) parse() (*bsr.Set, []*Error) {
	var L slot.Label
	m, cU := len(p.lex.Tokens)-1, 0
	p.ntAdd(symbols.NT_CompUnit, 0)
	// p.DumpDescriptors()
	for !p.R.empty() {
		L, cU, p.cI = p.R.remove()

		// fmt.Println()
		// fmt.Printf("L:%s, cI:%d, I[p.cI]:%s, cU:%d\n", L, p.cI, p.lex.Tokens[p.cI], cU)
		// p.DumpDescriptors()

		switch L {
		case slot.AND0R0: // AND : ∙& notEqAnd WS

			p.bsrSet.Add(slot.AND0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AND0R1) {
				p.parseError(slot.AND0R1, p.cI, first[slot.AND0R1])
				break
			}

			p.bsrSet.Add(slot.AND0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AND0R2) {
				p.parseError(slot.AND0R2, p.cI, first[slot.AND0R2])
				break
			}

			p.call(slot.AND0R3, cU, p.cI)
		case slot.AND0R3: // AND : & notEqAnd WS ∙

			if p.follow(symbols.NT_AND) {
				p.rtn(symbols.NT_AND, cU, p.cI)
			} else {
				p.parseError(slot.AND0R0, p.cI, followSets[symbols.NT_AND])
			}
		case slot.ANDExpr0R0: // ANDExpr : ∙EqualExpr RepANDEq0x

			p.call(slot.ANDExpr0R1, cU, p.cI)
		case slot.ANDExpr0R1: // ANDExpr : EqualExpr ∙RepANDEq0x

			if !p.testSelect(slot.ANDExpr0R1) {
				p.parseError(slot.ANDExpr0R1, p.cI, first[slot.ANDExpr0R1])
				break
			}

			p.call(slot.ANDExpr0R2, cU, p.cI)
		case slot.ANDExpr0R2: // ANDExpr : EqualExpr RepANDEq0x ∙

			if p.follow(symbols.NT_ANDExpr) {
				p.rtn(symbols.NT_ANDExpr, cU, p.cI)
			} else {
				p.parseError(slot.ANDExpr0R0, p.cI, followSets[symbols.NT_ANDExpr])
			}
		case slot.AND_AND0R0: // AND_AND : ∙&& WS

			p.bsrSet.Add(slot.AND_AND0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AND_AND0R1) {
				p.parseError(slot.AND_AND0R1, p.cI, first[slot.AND_AND0R1])
				break
			}

			p.call(slot.AND_AND0R2, cU, p.cI)
		case slot.AND_AND0R2: // AND_AND : && WS ∙

			if p.follow(symbols.NT_AND_AND) {
				p.rtn(symbols.NT_AND_AND, cU, p.cI)
			} else {
				p.parseError(slot.AND_AND0R0, p.cI, followSets[symbols.NT_AND_AND])
			}
		case slot.AND_EQU0R0: // AND_EQU : ∙&= WS

			p.bsrSet.Add(slot.AND_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.AND_EQU0R1) {
				p.parseError(slot.AND_EQU0R1, p.cI, first[slot.AND_EQU0R1])
				break
			}

			p.call(slot.AND_EQU0R2, cU, p.cI)
		case slot.AND_EQU0R2: // AND_EQU : &= WS ∙

			if p.follow(symbols.NT_AND_EQU) {
				p.rtn(symbols.NT_AND_EQU, cU, p.cI)
			} else {
				p.parseError(slot.AND_EQU0R0, p.cI, followSets[symbols.NT_AND_EQU])
			}
		case slot.ASSERT0R0: // ASSERT : ∙assert notLorD

			p.bsrSet.Add(slot.ASSERT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ASSERT0R1) {
				p.parseError(slot.ASSERT0R1, p.cI, first[slot.ASSERT0R1])
				break
			}

			p.bsrSet.Add(slot.ASSERT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ASSERT) {
				p.rtn(symbols.NT_ASSERT, cU, p.cI)
			} else {
				p.parseError(slot.ASSERT0R0, p.cI, followSets[symbols.NT_ASSERT])
			}
		case slot.AddAlts0R0: // AddAlts : ∙PLUS

			p.call(slot.AddAlts0R1, cU, p.cI)
		case slot.AddAlts0R1: // AddAlts : PLUS ∙

			if p.follow(symbols.NT_AddAlts) {
				p.rtn(symbols.NT_AddAlts, cU, p.cI)
			} else {
				p.parseError(slot.AddAlts0R0, p.cI, followSets[symbols.NT_AddAlts])
			}
		case slot.AddAlts1R0: // AddAlts : ∙MINUS

			p.call(slot.AddAlts1R1, cU, p.cI)
		case slot.AddAlts1R1: // AddAlts : MINUS ∙

			if p.follow(symbols.NT_AddAlts) {
				p.rtn(symbols.NT_AddAlts, cU, p.cI)
			} else {
				p.parseError(slot.AddAlts1R0, p.cI, followSets[symbols.NT_AddAlts])
			}
		case slot.AddExpr0R0: // AddExpr : ∙MultExpr RepAddAltsMult0x

			p.call(slot.AddExpr0R1, cU, p.cI)
		case slot.AddExpr0R1: // AddExpr : MultExpr ∙RepAddAltsMult0x

			if !p.testSelect(slot.AddExpr0R1) {
				p.parseError(slot.AddExpr0R1, p.cI, first[slot.AddExpr0R1])
				break
			}

			p.call(slot.AddExpr0R2, cU, p.cI)
		case slot.AddExpr0R2: // AddExpr : MultExpr RepAddAltsMult0x ∙

			if p.follow(symbols.NT_AddExpr) {
				p.rtn(symbols.NT_AddExpr, cU, p.cI)
			} else {
				p.parseError(slot.AddExpr0R0, p.cI, followSets[symbols.NT_AddExpr])
			}
		case slot.Any0xX0R0: // Any0xX : ∙0

			p.bsrSet.Add(slot.Any0xX0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Any0xX) {
				p.rtn(symbols.NT_Any0xX, cU, p.cI)
			} else {
				p.parseError(slot.Any0xX0R0, p.cI, followSets[symbols.NT_Any0xX])
			}
		case slot.Any0xX1R0: // Any0xX : ∙x

			p.bsrSet.Add(slot.Any0xX1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Any0xX) {
				p.rtn(symbols.NT_Any0xX, cU, p.cI)
			} else {
				p.parseError(slot.Any0xX1R0, p.cI, followSets[symbols.NT_Any0xX])
			}
		case slot.Any0xX2R0: // Any0xX : ∙X

			p.bsrSet.Add(slot.Any0xX2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Any0xX) {
				p.rtn(symbols.NT_Any0xX, cU, p.cI)
			} else {
				p.parseError(slot.Any0xX2R0, p.cI, followSets[symbols.NT_Any0xX])
			}
		case slot.Arguments0R0: // Arguments : ∙LPAR OptExprs RPAR

			p.call(slot.Arguments0R1, cU, p.cI)
		case slot.Arguments0R1: // Arguments : LPAR ∙OptExprs RPAR

			if !p.testSelect(slot.Arguments0R1) {
				p.parseError(slot.Arguments0R1, p.cI, first[slot.Arguments0R1])
				break
			}

			p.call(slot.Arguments0R2, cU, p.cI)
		case slot.Arguments0R2: // Arguments : LPAR OptExprs ∙RPAR

			if !p.testSelect(slot.Arguments0R2) {
				p.parseError(slot.Arguments0R2, p.cI, first[slot.Arguments0R2])
				break
			}

			p.call(slot.Arguments0R3, cU, p.cI)
		case slot.Arguments0R3: // Arguments : LPAR OptExprs RPAR ∙

			if p.follow(symbols.NT_Arguments) {
				p.rtn(symbols.NT_Arguments, cU, p.cI)
			} else {
				p.parseError(slot.Arguments0R0, p.cI, followSets[symbols.NT_Arguments])
			}
		case slot.ArrayCreatorRest0R0: // ArrayCreatorRest : ∙LBRK ArrayRest

			p.call(slot.ArrayCreatorRest0R1, cU, p.cI)
		case slot.ArrayCreatorRest0R1: // ArrayCreatorRest : LBRK ∙ArrayRest

			if !p.testSelect(slot.ArrayCreatorRest0R1) {
				p.parseError(slot.ArrayCreatorRest0R1, p.cI, first[slot.ArrayCreatorRest0R1])
				break
			}

			p.call(slot.ArrayCreatorRest0R2, cU, p.cI)
		case slot.ArrayCreatorRest0R2: // ArrayCreatorRest : LBRK ArrayRest ∙

			if p.follow(symbols.NT_ArrayCreatorRest) {
				p.rtn(symbols.NT_ArrayCreatorRest, cU, p.cI)
			} else {
				p.parseError(slot.ArrayCreatorRest0R0, p.cI, followSets[symbols.NT_ArrayCreatorRest])
			}
		case slot.ArrayInitializer0R0: // ArrayInitializer : ∙LWING OptVarInit RWING

			p.call(slot.ArrayInitializer0R1, cU, p.cI)
		case slot.ArrayInitializer0R1: // ArrayInitializer : LWING ∙OptVarInit RWING

			if !p.testSelect(slot.ArrayInitializer0R1) {
				p.parseError(slot.ArrayInitializer0R1, p.cI, first[slot.ArrayInitializer0R1])
				break
			}

			p.call(slot.ArrayInitializer0R2, cU, p.cI)
		case slot.ArrayInitializer0R2: // ArrayInitializer : LWING OptVarInit ∙RWING

			if !p.testSelect(slot.ArrayInitializer0R2) {
				p.parseError(slot.ArrayInitializer0R2, p.cI, first[slot.ArrayInitializer0R2])
				break
			}

			p.call(slot.ArrayInitializer0R3, cU, p.cI)
		case slot.ArrayInitializer0R3: // ArrayInitializer : LWING OptVarInit RWING ∙

			if p.follow(symbols.NT_ArrayInitializer) {
				p.rtn(symbols.NT_ArrayInitializer, cU, p.cI)
			} else {
				p.parseError(slot.ArrayInitializer0R0, p.cI, followSets[symbols.NT_ArrayInitializer])
			}
		case slot.ArrayRest0R0: // ArrayRest : ∙RBRK RepDim0x ArrayInitializer

			p.call(slot.ArrayRest0R1, cU, p.cI)
		case slot.ArrayRest0R1: // ArrayRest : RBRK ∙RepDim0x ArrayInitializer

			if !p.testSelect(slot.ArrayRest0R1) {
				p.parseError(slot.ArrayRest0R1, p.cI, first[slot.ArrayRest0R1])
				break
			}

			p.call(slot.ArrayRest0R2, cU, p.cI)
		case slot.ArrayRest0R2: // ArrayRest : RBRK RepDim0x ∙ArrayInitializer

			if !p.testSelect(slot.ArrayRest0R2) {
				p.parseError(slot.ArrayRest0R2, p.cI, first[slot.ArrayRest0R2])
				break
			}

			p.call(slot.ArrayRest0R3, cU, p.cI)
		case slot.ArrayRest0R3: // ArrayRest : RBRK RepDim0x ArrayInitializer ∙

			if p.follow(symbols.NT_ArrayRest) {
				p.rtn(symbols.NT_ArrayRest, cU, p.cI)
			} else {
				p.parseError(slot.ArrayRest0R0, p.cI, followSets[symbols.NT_ArrayRest])
			}
		case slot.ArrayRest1R0: // ArrayRest : ∙Expr RBRK RepDimExpr0x RepDim0x

			p.call(slot.ArrayRest1R1, cU, p.cI)
		case slot.ArrayRest1R1: // ArrayRest : Expr ∙RBRK RepDimExpr0x RepDim0x

			if !p.testSelect(slot.ArrayRest1R1) {
				p.parseError(slot.ArrayRest1R1, p.cI, first[slot.ArrayRest1R1])
				break
			}

			p.call(slot.ArrayRest1R2, cU, p.cI)
		case slot.ArrayRest1R2: // ArrayRest : Expr RBRK ∙RepDimExpr0x RepDim0x

			if !p.testSelect(slot.ArrayRest1R2) {
				p.parseError(slot.ArrayRest1R2, p.cI, first[slot.ArrayRest1R2])
				break
			}

			p.call(slot.ArrayRest1R3, cU, p.cI)
		case slot.ArrayRest1R3: // ArrayRest : Expr RBRK RepDimExpr0x ∙RepDim0x

			if !p.testSelect(slot.ArrayRest1R3) {
				p.parseError(slot.ArrayRest1R3, p.cI, first[slot.ArrayRest1R3])
				break
			}

			p.call(slot.ArrayRest1R4, cU, p.cI)
		case slot.ArrayRest1R4: // ArrayRest : Expr RBRK RepDimExpr0x RepDim0x ∙

			if p.follow(symbols.NT_ArrayRest) {
				p.rtn(symbols.NT_ArrayRest, cU, p.cI)
			} else {
				p.parseError(slot.ArrayRest1R0, p.cI, followSets[symbols.NT_ArrayRest])
			}
		case slot.AssignOp0R0: // AssignOp : ∙EQU

			p.call(slot.AssignOp0R1, cU, p.cI)
		case slot.AssignOp0R1: // AssignOp : EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp0R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp1R0: // AssignOp : ∙PLUS_EQU

			p.call(slot.AssignOp1R1, cU, p.cI)
		case slot.AssignOp1R1: // AssignOp : PLUS_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp1R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp2R0: // AssignOp : ∙MINUS_EQU

			p.call(slot.AssignOp2R1, cU, p.cI)
		case slot.AssignOp2R1: // AssignOp : MINUS_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp2R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp3R0: // AssignOp : ∙STAR_EQU

			p.call(slot.AssignOp3R1, cU, p.cI)
		case slot.AssignOp3R1: // AssignOp : STAR_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp3R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp4R0: // AssignOp : ∙DIV_EQU

			p.call(slot.AssignOp4R1, cU, p.cI)
		case slot.AssignOp4R1: // AssignOp : DIV_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp4R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp5R0: // AssignOp : ∙AND_EQU

			p.call(slot.AssignOp5R1, cU, p.cI)
		case slot.AssignOp5R1: // AssignOp : AND_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp5R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp6R0: // AssignOp : ∙OR_EQU

			p.call(slot.AssignOp6R1, cU, p.cI)
		case slot.AssignOp6R1: // AssignOp : OR_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp6R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp7R0: // AssignOp : ∙HAT_EQU

			p.call(slot.AssignOp7R1, cU, p.cI)
		case slot.AssignOp7R1: // AssignOp : HAT_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp7R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp8R0: // AssignOp : ∙MOD_EQU

			p.call(slot.AssignOp8R1, cU, p.cI)
		case slot.AssignOp8R1: // AssignOp : MOD_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp8R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp9R0: // AssignOp : ∙SL_EQU

			p.call(slot.AssignOp9R1, cU, p.cI)
		case slot.AssignOp9R1: // AssignOp : SL_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp9R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp10R0: // AssignOp : ∙SR_EQU

			p.call(slot.AssignOp10R1, cU, p.cI)
		case slot.AssignOp10R1: // AssignOp : SR_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp10R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.AssignOp11R0: // AssignOp : ∙BSR_EQU

			p.call(slot.AssignOp11R1, cU, p.cI)
		case slot.AssignOp11R1: // AssignOp : BSR_EQU ∙

			if p.follow(symbols.NT_AssignOp) {
				p.rtn(symbols.NT_AssignOp, cU, p.cI)
			} else {
				p.parseError(slot.AssignOp11R0, p.cI, followSets[symbols.NT_AssignOp])
			}
		case slot.BANG0R0: // BANG : ∙! nEq WS

			p.bsrSet.Add(slot.BANG0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BANG0R1) {
				p.parseError(slot.BANG0R1, p.cI, first[slot.BANG0R1])
				break
			}

			p.bsrSet.Add(slot.BANG0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BANG0R2) {
				p.parseError(slot.BANG0R2, p.cI, first[slot.BANG0R2])
				break
			}

			p.call(slot.BANG0R3, cU, p.cI)
		case slot.BANG0R3: // BANG : ! nEq WS ∙

			if p.follow(symbols.NT_BANG) {
				p.rtn(symbols.NT_BANG, cU, p.cI)
			} else {
				p.parseError(slot.BANG0R0, p.cI, followSets[symbols.NT_BANG])
			}
		case slot.BREAK0R0: // BREAK : ∙break notLorD

			p.bsrSet.Add(slot.BREAK0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BREAK0R1) {
				p.parseError(slot.BREAK0R1, p.cI, first[slot.BREAK0R1])
				break
			}

			p.bsrSet.Add(slot.BREAK0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BREAK) {
				p.rtn(symbols.NT_BREAK, cU, p.cI)
			} else {
				p.parseError(slot.BREAK0R0, p.cI, followSets[symbols.NT_BREAK])
			}
		case slot.BSR0R0: // BSR : ∙>>> nEq WS

			p.bsrSet.Add(slot.BSR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BSR0R1) {
				p.parseError(slot.BSR0R1, p.cI, first[slot.BSR0R1])
				break
			}

			p.bsrSet.Add(slot.BSR0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BSR0R2) {
				p.parseError(slot.BSR0R2, p.cI, first[slot.BSR0R2])
				break
			}

			p.call(slot.BSR0R3, cU, p.cI)
		case slot.BSR0R3: // BSR : >>> nEq WS ∙

			if p.follow(symbols.NT_BSR) {
				p.rtn(symbols.NT_BSR, cU, p.cI)
			} else {
				p.parseError(slot.BSR0R0, p.cI, followSets[symbols.NT_BSR])
			}
		case slot.BSR_EQU0R0: // BSR_EQU : ∙>>>= WS

			p.bsrSet.Add(slot.BSR_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.BSR_EQU0R1) {
				p.parseError(slot.BSR_EQU0R1, p.cI, first[slot.BSR_EQU0R1])
				break
			}

			p.call(slot.BSR_EQU0R2, cU, p.cI)
		case slot.BSR_EQU0R2: // BSR_EQU : >>>= WS ∙

			if p.follow(symbols.NT_BSR_EQU) {
				p.rtn(symbols.NT_BSR_EQU, cU, p.cI)
			} else {
				p.parseError(slot.BSR_EQU0R0, p.cI, followSets[symbols.NT_BSR_EQU])
			}
		case slot.BasicType0R0: // BasicType : ∙BasicTypeLit notLorD

			p.call(slot.BasicType0R1, cU, p.cI)
		case slot.BasicType0R1: // BasicType : BasicTypeLit ∙notLorD

			if !p.testSelect(slot.BasicType0R1) {
				p.parseError(slot.BasicType0R1, p.cI, first[slot.BasicType0R1])
				break
			}

			p.bsrSet.Add(slot.BasicType0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicType) {
				p.rtn(symbols.NT_BasicType, cU, p.cI)
			} else {
				p.parseError(slot.BasicType0R0, p.cI, followSets[symbols.NT_BasicType])
			}
		case slot.BasicTypeLit0R0: // BasicTypeLit : ∙byte

			p.bsrSet.Add(slot.BasicTypeLit0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit0R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit1R0: // BasicTypeLit : ∙short

			p.bsrSet.Add(slot.BasicTypeLit1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit1R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit2R0: // BasicTypeLit : ∙char

			p.bsrSet.Add(slot.BasicTypeLit2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit2R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit3R0: // BasicTypeLit : ∙int

			p.bsrSet.Add(slot.BasicTypeLit3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit3R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit4R0: // BasicTypeLit : ∙long

			p.bsrSet.Add(slot.BasicTypeLit4R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit4R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit5R0: // BasicTypeLit : ∙float

			p.bsrSet.Add(slot.BasicTypeLit5R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit5R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit6R0: // BasicTypeLit : ∙double

			p.bsrSet.Add(slot.BasicTypeLit6R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit6R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.BasicTypeLit7R0: // BasicTypeLit : ∙boolean

			p.bsrSet.Add(slot.BasicTypeLit7R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_BasicTypeLit) {
				p.rtn(symbols.NT_BasicTypeLit, cU, p.cI)
			} else {
				p.parseError(slot.BasicTypeLit7R0, p.cI, followSets[symbols.NT_BasicTypeLit])
			}
		case slot.Beoptfd0R0: // Beoptfd : ∙binaryExponent optfFdD

			p.bsrSet.Add(slot.Beoptfd0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Beoptfd0R1) {
				p.parseError(slot.Beoptfd0R1, p.cI, first[slot.Beoptfd0R1])
				break
			}

			p.bsrSet.Add(slot.Beoptfd0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Beoptfd) {
				p.rtn(symbols.NT_Beoptfd, cU, p.cI)
			} else {
				p.parseError(slot.Beoptfd0R0, p.cI, followSets[symbols.NT_Beoptfd])
			}
		case slot.Block0R0: // Block : ∙LWING RepBlkSt0x RWING

			p.call(slot.Block0R1, cU, p.cI)
		case slot.Block0R1: // Block : LWING ∙RepBlkSt0x RWING

			if !p.testSelect(slot.Block0R1) {
				p.parseError(slot.Block0R1, p.cI, first[slot.Block0R1])
				break
			}

			p.call(slot.Block0R2, cU, p.cI)
		case slot.Block0R2: // Block : LWING RepBlkSt0x ∙RWING

			if !p.testSelect(slot.Block0R2) {
				p.parseError(slot.Block0R2, p.cI, first[slot.Block0R2])
				break
			}

			p.call(slot.Block0R3, cU, p.cI)
		case slot.Block0R3: // Block : LWING RepBlkSt0x RWING ∙

			if p.follow(symbols.NT_Block) {
				p.rtn(symbols.NT_Block, cU, p.cI)
			} else {
				p.parseError(slot.Block0R0, p.cI, followSets[symbols.NT_Block])
			}
		case slot.BlockStmt0R0: // BlockStmt : ∙LocalVarDeclStmt

			p.call(slot.BlockStmt0R1, cU, p.cI)
		case slot.BlockStmt0R1: // BlockStmt : LocalVarDeclStmt ∙

			if p.follow(symbols.NT_BlockStmt) {
				p.rtn(symbols.NT_BlockStmt, cU, p.cI)
			} else {
				p.parseError(slot.BlockStmt0R0, p.cI, followSets[symbols.NT_BlockStmt])
			}
		case slot.BlockStmt1R0: // BlockStmt : ∙RepModif0 ClsDecl

			p.call(slot.BlockStmt1R1, cU, p.cI)
		case slot.BlockStmt1R1: // BlockStmt : RepModif0 ∙ClsDecl

			if !p.testSelect(slot.BlockStmt1R1) {
				p.parseError(slot.BlockStmt1R1, p.cI, first[slot.BlockStmt1R1])
				break
			}

			p.call(slot.BlockStmt1R2, cU, p.cI)
		case slot.BlockStmt1R2: // BlockStmt : RepModif0 ClsDecl ∙

			if p.follow(symbols.NT_BlockStmt) {
				p.rtn(symbols.NT_BlockStmt, cU, p.cI)
			} else {
				p.parseError(slot.BlockStmt1R0, p.cI, followSets[symbols.NT_BlockStmt])
			}
		case slot.BlockStmt2R0: // BlockStmt : ∙Stmt

			p.call(slot.BlockStmt2R1, cU, p.cI)
		case slot.BlockStmt2R1: // BlockStmt : Stmt ∙

			if p.follow(symbols.NT_BlockStmt) {
				p.rtn(symbols.NT_BlockStmt, cU, p.cI)
			} else {
				p.parseError(slot.BlockStmt2R0, p.cI, followSets[symbols.NT_BlockStmt])
			}
		case slot.CASE0R0: // CASE : ∙case notLorD

			p.bsrSet.Add(slot.CASE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CASE0R1) {
				p.parseError(slot.CASE0R1, p.cI, first[slot.CASE0R1])
				break
			}

			p.bsrSet.Add(slot.CASE0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CASE) {
				p.rtn(symbols.NT_CASE, cU, p.cI)
			} else {
				p.parseError(slot.CASE0R0, p.cI, followSets[symbols.NT_CASE])
			}
		case slot.CATCH0R0: // CATCH : ∙catch notLorD

			p.bsrSet.Add(slot.CATCH0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CATCH0R1) {
				p.parseError(slot.CATCH0R1, p.cI, first[slot.CATCH0R1])
				break
			}

			p.bsrSet.Add(slot.CATCH0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CATCH) {
				p.rtn(symbols.NT_CATCH, cU, p.cI)
			} else {
				p.parseError(slot.CATCH0R0, p.cI, followSets[symbols.NT_CATCH])
			}
		case slot.COLON0R0: // COLON : ∙: WS

			p.bsrSet.Add(slot.COLON0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.COLON0R1) {
				p.parseError(slot.COLON0R1, p.cI, first[slot.COLON0R1])
				break
			}

			p.call(slot.COLON0R2, cU, p.cI)
		case slot.COLON0R2: // COLON : : WS ∙

			if p.follow(symbols.NT_COLON) {
				p.rtn(symbols.NT_COLON, cU, p.cI)
			} else {
				p.parseError(slot.COLON0R0, p.cI, followSets[symbols.NT_COLON])
			}
		case slot.COMMA0R0: // COMMA : ∙, WS

			p.bsrSet.Add(slot.COMMA0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.COMMA0R1) {
				p.parseError(slot.COMMA0R1, p.cI, first[slot.COMMA0R1])
				break
			}

			p.call(slot.COMMA0R2, cU, p.cI)
		case slot.COMMA0R2: // COMMA : , WS ∙

			if p.follow(symbols.NT_COMMA) {
				p.rtn(symbols.NT_COMMA, cU, p.cI)
			} else {
				p.parseError(slot.COMMA0R0, p.cI, followSets[symbols.NT_COMMA])
			}
		case slot.CONTINUE0R0: // CONTINUE : ∙continue notLorD

			p.bsrSet.Add(slot.CONTINUE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CONTINUE0R1) {
				p.parseError(slot.CONTINUE0R1, p.cI, first[slot.CONTINUE0R1])
				break
			}

			p.bsrSet.Add(slot.CONTINUE0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CONTINUE) {
				p.rtn(symbols.NT_CONTINUE, cU, p.cI)
			} else {
				p.parseError(slot.CONTINUE0R0, p.cI, followSets[symbols.NT_CONTINUE])
			}
		case slot.CarrotAlts0R0: // CarrotAlts : ∙SL

			p.call(slot.CarrotAlts0R1, cU, p.cI)
		case slot.CarrotAlts0R1: // CarrotAlts : SL ∙

			if p.follow(symbols.NT_CarrotAlts) {
				p.rtn(symbols.NT_CarrotAlts, cU, p.cI)
			} else {
				p.parseError(slot.CarrotAlts0R0, p.cI, followSets[symbols.NT_CarrotAlts])
			}
		case slot.CarrotAlts1R0: // CarrotAlts : ∙SR

			p.call(slot.CarrotAlts1R1, cU, p.cI)
		case slot.CarrotAlts1R1: // CarrotAlts : SR ∙

			if p.follow(symbols.NT_CarrotAlts) {
				p.rtn(symbols.NT_CarrotAlts, cU, p.cI)
			} else {
				p.parseError(slot.CarrotAlts1R0, p.cI, followSets[symbols.NT_CarrotAlts])
			}
		case slot.CarrotAlts2R0: // CarrotAlts : ∙BSR

			p.call(slot.CarrotAlts2R1, cU, p.cI)
		case slot.CarrotAlts2R1: // CarrotAlts : BSR ∙

			if p.follow(symbols.NT_CarrotAlts) {
				p.rtn(symbols.NT_CarrotAlts, cU, p.cI)
			} else {
				p.parseError(slot.CarrotAlts2R0, p.cI, followSets[symbols.NT_CarrotAlts])
			}
		case slot.Catch0R0: // Catch : ∙CATCH LPAR FormalParam RPAR Block

			p.call(slot.Catch0R1, cU, p.cI)
		case slot.Catch0R1: // Catch : CATCH ∙LPAR FormalParam RPAR Block

			if !p.testSelect(slot.Catch0R1) {
				p.parseError(slot.Catch0R1, p.cI, first[slot.Catch0R1])
				break
			}

			p.call(slot.Catch0R2, cU, p.cI)
		case slot.Catch0R2: // Catch : CATCH LPAR ∙FormalParam RPAR Block

			if !p.testSelect(slot.Catch0R2) {
				p.parseError(slot.Catch0R2, p.cI, first[slot.Catch0R2])
				break
			}

			p.call(slot.Catch0R3, cU, p.cI)
		case slot.Catch0R3: // Catch : CATCH LPAR FormalParam ∙RPAR Block

			if !p.testSelect(slot.Catch0R3) {
				p.parseError(slot.Catch0R3, p.cI, first[slot.Catch0R3])
				break
			}

			p.call(slot.Catch0R4, cU, p.cI)
		case slot.Catch0R4: // Catch : CATCH LPAR FormalParam RPAR ∙Block

			if !p.testSelect(slot.Catch0R4) {
				p.parseError(slot.Catch0R4, p.cI, first[slot.Catch0R4])
				break
			}

			p.call(slot.Catch0R5, cU, p.cI)
		case slot.Catch0R5: // Catch : CATCH LPAR FormalParam RPAR Block ∙

			if p.follow(symbols.NT_Catch) {
				p.rtn(symbols.NT_Catch, cU, p.cI)
			} else {
				p.parseError(slot.Catch0R0, p.cI, followSets[symbols.NT_Catch])
			}
		case slot.CatchBlk0R0: // CatchBlk : ∙Catch RepCatch0x OptFin

			p.call(slot.CatchBlk0R1, cU, p.cI)
		case slot.CatchBlk0R1: // CatchBlk : Catch ∙RepCatch0x OptFin

			if !p.testSelect(slot.CatchBlk0R1) {
				p.parseError(slot.CatchBlk0R1, p.cI, first[slot.CatchBlk0R1])
				break
			}

			p.call(slot.CatchBlk0R2, cU, p.cI)
		case slot.CatchBlk0R2: // CatchBlk : Catch RepCatch0x ∙OptFin

			if !p.testSelect(slot.CatchBlk0R2) {
				p.parseError(slot.CatchBlk0R2, p.cI, first[slot.CatchBlk0R2])
				break
			}

			p.call(slot.CatchBlk0R3, cU, p.cI)
		case slot.CatchBlk0R3: // CatchBlk : Catch RepCatch0x OptFin ∙

			if p.follow(symbols.NT_CatchBlk) {
				p.rtn(symbols.NT_CatchBlk, cU, p.cI)
			} else {
				p.parseError(slot.CatchBlk0R0, p.cI, followSets[symbols.NT_CatchBlk])
			}
		case slot.CatchBlk1R0: // CatchBlk : ∙Finally

			p.call(slot.CatchBlk1R1, cU, p.cI)
		case slot.CatchBlk1R1: // CatchBlk : Finally ∙

			if p.follow(symbols.NT_CatchBlk) {
				p.rtn(symbols.NT_CatchBlk, cU, p.cI)
			} else {
				p.parseError(slot.CatchBlk1R0, p.cI, followSets[symbols.NT_CatchBlk])
			}
		case slot.CharLiteral0R0: // CharLiteral : ∙sinQuo EscSlash sinQuo

			p.bsrSet.Add(slot.CharLiteral0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.CharLiteral0R1) {
				p.parseError(slot.CharLiteral0R1, p.cI, first[slot.CharLiteral0R1])
				break
			}

			p.call(slot.CharLiteral0R2, cU, p.cI)
		case slot.CharLiteral0R2: // CharLiteral : sinQuo EscSlash ∙sinQuo

			if !p.testSelect(slot.CharLiteral0R2) {
				p.parseError(slot.CharLiteral0R2, p.cI, first[slot.CharLiteral0R2])
				break
			}

			p.bsrSet.Add(slot.CharLiteral0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_CharLiteral) {
				p.rtn(symbols.NT_CharLiteral, cU, p.cI)
			} else {
				p.parseError(slot.CharLiteral0R0, p.cI, followSets[symbols.NT_CharLiteral])
			}
		case slot.Cls0R0: // Cls : ∙Cls notLorD

			p.bsrSet.Add(slot.Cls0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Cls0R1) {
				p.parseError(slot.Cls0R1, p.cI, first[slot.Cls0R1])
				break
			}

			p.bsrSet.Add(slot.Cls0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Cls) {
				p.rtn(symbols.NT_Cls, cU, p.cI)
			} else {
				p.parseError(slot.Cls0R0, p.cI, followSets[symbols.NT_Cls])
			}
		case slot.ClsBdy0R0: // ClsBdy : ∙LWING RepClsBDecl0x RWING

			p.call(slot.ClsBdy0R1, cU, p.cI)
		case slot.ClsBdy0R1: // ClsBdy : LWING ∙RepClsBDecl0x RWING

			if !p.testSelect(slot.ClsBdy0R1) {
				p.parseError(slot.ClsBdy0R1, p.cI, first[slot.ClsBdy0R1])
				break
			}

			p.call(slot.ClsBdy0R2, cU, p.cI)
		case slot.ClsBdy0R2: // ClsBdy : LWING RepClsBDecl0x ∙RWING

			if !p.testSelect(slot.ClsBdy0R2) {
				p.parseError(slot.ClsBdy0R2, p.cI, first[slot.ClsBdy0R2])
				break
			}

			p.call(slot.ClsBdy0R3, cU, p.cI)
		case slot.ClsBdy0R3: // ClsBdy : LWING RepClsBDecl0x RWING ∙

			if p.follow(symbols.NT_ClsBdy) {
				p.rtn(symbols.NT_ClsBdy, cU, p.cI)
			} else {
				p.parseError(slot.ClsBdy0R0, p.cI, followSets[symbols.NT_ClsBdy])
			}
		case slot.ClsBdyDecl0R0: // ClsBdyDecl : ∙SEMI

			p.call(slot.ClsBdyDecl0R1, cU, p.cI)
		case slot.ClsBdyDecl0R1: // ClsBdyDecl : SEMI ∙

			if p.follow(symbols.NT_ClsBdyDecl) {
				p.rtn(symbols.NT_ClsBdyDecl, cU, p.cI)
			} else {
				p.parseError(slot.ClsBdyDecl0R0, p.cI, followSets[symbols.NT_ClsBdyDecl])
			}
		case slot.ClsBdyDecl1R0: // ClsBdyDecl : ∙OptStatic Block

			p.call(slot.ClsBdyDecl1R1, cU, p.cI)
		case slot.ClsBdyDecl1R1: // ClsBdyDecl : OptStatic ∙Block

			if !p.testSelect(slot.ClsBdyDecl1R1) {
				p.parseError(slot.ClsBdyDecl1R1, p.cI, first[slot.ClsBdyDecl1R1])
				break
			}

			p.call(slot.ClsBdyDecl1R2, cU, p.cI)
		case slot.ClsBdyDecl1R2: // ClsBdyDecl : OptStatic Block ∙

			if p.follow(symbols.NT_ClsBdyDecl) {
				p.rtn(symbols.NT_ClsBdyDecl, cU, p.cI)
			} else {
				p.parseError(slot.ClsBdyDecl1R0, p.cI, followSets[symbols.NT_ClsBdyDecl])
			}
		case slot.ClsBdyDecl2R0: // ClsBdyDecl : ∙RepModif0 MemDecl

			p.call(slot.ClsBdyDecl2R1, cU, p.cI)
		case slot.ClsBdyDecl2R1: // ClsBdyDecl : RepModif0 ∙MemDecl

			if !p.testSelect(slot.ClsBdyDecl2R1) {
				p.parseError(slot.ClsBdyDecl2R1, p.cI, first[slot.ClsBdyDecl2R1])
				break
			}

			p.call(slot.ClsBdyDecl2R2, cU, p.cI)
		case slot.ClsBdyDecl2R2: // ClsBdyDecl : RepModif0 MemDecl ∙

			if p.follow(symbols.NT_ClsBdyDecl) {
				p.rtn(symbols.NT_ClsBdyDecl, cU, p.cI)
			} else {
				p.parseError(slot.ClsBdyDecl2R0, p.cI, followSets[symbols.NT_ClsBdyDecl])
			}
		case slot.ClsCreatorRest0R0: // ClsCreatorRest : ∙Arguments OptClsBdy

			p.call(slot.ClsCreatorRest0R1, cU, p.cI)
		case slot.ClsCreatorRest0R1: // ClsCreatorRest : Arguments ∙OptClsBdy

			if !p.testSelect(slot.ClsCreatorRest0R1) {
				p.parseError(slot.ClsCreatorRest0R1, p.cI, first[slot.ClsCreatorRest0R1])
				break
			}

			p.call(slot.ClsCreatorRest0R2, cU, p.cI)
		case slot.ClsCreatorRest0R2: // ClsCreatorRest : Arguments OptClsBdy ∙

			if p.follow(symbols.NT_ClsCreatorRest) {
				p.rtn(symbols.NT_ClsCreatorRest, cU, p.cI)
			} else {
				p.parseError(slot.ClsCreatorRest0R0, p.cI, followSets[symbols.NT_ClsCreatorRest])
			}
		case slot.ClsDecl0R0: // ClsDecl : ∙Cls ID OptExtClsType OptImpClsLst ClsBdy

			p.bsrSet.Add(slot.ClsDecl0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ClsDecl0R1) {
				p.parseError(slot.ClsDecl0R1, p.cI, first[slot.ClsDecl0R1])
				break
			}

			p.call(slot.ClsDecl0R2, cU, p.cI)
		case slot.ClsDecl0R2: // ClsDecl : Cls ID ∙OptExtClsType OptImpClsLst ClsBdy

			if !p.testSelect(slot.ClsDecl0R2) {
				p.parseError(slot.ClsDecl0R2, p.cI, first[slot.ClsDecl0R2])
				break
			}

			p.call(slot.ClsDecl0R3, cU, p.cI)
		case slot.ClsDecl0R3: // ClsDecl : Cls ID OptExtClsType ∙OptImpClsLst ClsBdy

			if !p.testSelect(slot.ClsDecl0R3) {
				p.parseError(slot.ClsDecl0R3, p.cI, first[slot.ClsDecl0R3])
				break
			}

			p.call(slot.ClsDecl0R4, cU, p.cI)
		case slot.ClsDecl0R4: // ClsDecl : Cls ID OptExtClsType OptImpClsLst ∙ClsBdy

			if !p.testSelect(slot.ClsDecl0R4) {
				p.parseError(slot.ClsDecl0R4, p.cI, first[slot.ClsDecl0R4])
				break
			}

			p.call(slot.ClsDecl0R5, cU, p.cI)
		case slot.ClsDecl0R5: // ClsDecl : Cls ID OptExtClsType OptImpClsLst ClsBdy ∙

			if p.follow(symbols.NT_ClsDecl) {
				p.rtn(symbols.NT_ClsDecl, cU, p.cI)
			} else {
				p.parseError(slot.ClsDecl0R0, p.cI, followSets[symbols.NT_ClsDecl])
			}
		case slot.ClsType0R0: // ClsType : ∙ID RepDotID0x

			p.call(slot.ClsType0R1, cU, p.cI)
		case slot.ClsType0R1: // ClsType : ID ∙RepDotID0x

			if !p.testSelect(slot.ClsType0R1) {
				p.parseError(slot.ClsType0R1, p.cI, first[slot.ClsType0R1])
				break
			}

			p.call(slot.ClsType0R2, cU, p.cI)
		case slot.ClsType0R2: // ClsType : ID RepDotID0x ∙

			if p.follow(symbols.NT_ClsType) {
				p.rtn(symbols.NT_ClsType, cU, p.cI)
			} else {
				p.parseError(slot.ClsType0R0, p.cI, followSets[symbols.NT_ClsType])
			}
		case slot.ClsTypeList0R0: // ClsTypeList : ∙ClsType RepComCls0x

			p.call(slot.ClsTypeList0R1, cU, p.cI)
		case slot.ClsTypeList0R1: // ClsTypeList : ClsType ∙RepComCls0x

			if !p.testSelect(slot.ClsTypeList0R1) {
				p.parseError(slot.ClsTypeList0R1, p.cI, first[slot.ClsTypeList0R1])
				break
			}

			p.call(slot.ClsTypeList0R2, cU, p.cI)
		case slot.ClsTypeList0R2: // ClsTypeList : ClsType RepComCls0x ∙

			if p.follow(symbols.NT_ClsTypeList) {
				p.rtn(symbols.NT_ClsTypeList, cU, p.cI)
			} else {
				p.parseError(slot.ClsTypeList0R0, p.cI, followSets[symbols.NT_ClsTypeList])
			}
		case slot.CompUnit0R0: // CompUnit : ∙WS OptPackDecl RepImpDecl0x RepSemiModDecl0x

			p.call(slot.CompUnit0R1, cU, p.cI)
		case slot.CompUnit0R1: // CompUnit : WS ∙OptPackDecl RepImpDecl0x RepSemiModDecl0x

			if !p.testSelect(slot.CompUnit0R1) {
				p.parseError(slot.CompUnit0R1, p.cI, first[slot.CompUnit0R1])
				break
			}

			p.call(slot.CompUnit0R2, cU, p.cI)
		case slot.CompUnit0R2: // CompUnit : WS OptPackDecl ∙RepImpDecl0x RepSemiModDecl0x

			if !p.testSelect(slot.CompUnit0R2) {
				p.parseError(slot.CompUnit0R2, p.cI, first[slot.CompUnit0R2])
				break
			}

			p.call(slot.CompUnit0R3, cU, p.cI)
		case slot.CompUnit0R3: // CompUnit : WS OptPackDecl RepImpDecl0x ∙RepSemiModDecl0x

			if !p.testSelect(slot.CompUnit0R3) {
				p.parseError(slot.CompUnit0R3, p.cI, first[slot.CompUnit0R3])
				break
			}

			p.call(slot.CompUnit0R4, cU, p.cI)
		case slot.CompUnit0R4: // CompUnit : WS OptPackDecl RepImpDecl0x RepSemiModDecl0x ∙

			if p.follow(symbols.NT_CompUnit) {
				p.rtn(symbols.NT_CompUnit, cU, p.cI)
			} else {
				p.parseError(slot.CompUnit0R0, p.cI, followSets[symbols.NT_CompUnit])
			}
		case slot.CondANDExpr0R0: // CondANDExpr : ∙IORExpr RepANDIOR0x

			p.call(slot.CondANDExpr0R1, cU, p.cI)
		case slot.CondANDExpr0R1: // CondANDExpr : IORExpr ∙RepANDIOR0x

			if !p.testSelect(slot.CondANDExpr0R1) {
				p.parseError(slot.CondANDExpr0R1, p.cI, first[slot.CondANDExpr0R1])
				break
			}

			p.call(slot.CondANDExpr0R2, cU, p.cI)
		case slot.CondANDExpr0R2: // CondANDExpr : IORExpr RepANDIOR0x ∙

			if p.follow(symbols.NT_CondANDExpr) {
				p.rtn(symbols.NT_CondANDExpr, cU, p.cI)
			} else {
				p.parseError(slot.CondANDExpr0R0, p.cI, followSets[symbols.NT_CondANDExpr])
			}
		case slot.CondExpr0R0: // CondExpr : ∙CondORExpr RepCondition0x

			p.call(slot.CondExpr0R1, cU, p.cI)
		case slot.CondExpr0R1: // CondExpr : CondORExpr ∙RepCondition0x

			if !p.testSelect(slot.CondExpr0R1) {
				p.parseError(slot.CondExpr0R1, p.cI, first[slot.CondExpr0R1])
				break
			}

			p.call(slot.CondExpr0R2, cU, p.cI)
		case slot.CondExpr0R2: // CondExpr : CondORExpr RepCondition0x ∙

			if p.follow(symbols.NT_CondExpr) {
				p.rtn(symbols.NT_CondExpr, cU, p.cI)
			} else {
				p.parseError(slot.CondExpr0R0, p.cI, followSets[symbols.NT_CondExpr])
			}
		case slot.CondORExpr0R0: // CondORExpr : ∙CondANDExpr RepORcAND0x

			p.call(slot.CondORExpr0R1, cU, p.cI)
		case slot.CondORExpr0R1: // CondORExpr : CondANDExpr ∙RepORcAND0x

			if !p.testSelect(slot.CondORExpr0R1) {
				p.parseError(slot.CondORExpr0R1, p.cI, first[slot.CondORExpr0R1])
				break
			}

			p.call(slot.CondORExpr0R2, cU, p.cI)
		case slot.CondORExpr0R2: // CondORExpr : CondANDExpr RepORcAND0x ∙

			if p.follow(symbols.NT_CondORExpr) {
				p.rtn(symbols.NT_CondORExpr, cU, p.cI)
			} else {
				p.parseError(slot.CondORExpr0R0, p.cI, followSets[symbols.NT_CondORExpr])
			}
		case slot.ConstDecl0R0: // ConstDecl : ∙ID ConstDeclRest

			p.call(slot.ConstDecl0R1, cU, p.cI)
		case slot.ConstDecl0R1: // ConstDecl : ID ∙ConstDeclRest

			if !p.testSelect(slot.ConstDecl0R1) {
				p.parseError(slot.ConstDecl0R1, p.cI, first[slot.ConstDecl0R1])
				break
			}

			p.call(slot.ConstDecl0R2, cU, p.cI)
		case slot.ConstDecl0R2: // ConstDecl : ID ConstDeclRest ∙

			if p.follow(symbols.NT_ConstDecl) {
				p.rtn(symbols.NT_ConstDecl, cU, p.cI)
			} else {
				p.parseError(slot.ConstDecl0R0, p.cI, followSets[symbols.NT_ConstDecl])
			}
		case slot.ConstDeclRest0R0: // ConstDeclRest : ∙RepDim0x EQU VarInitial

			p.call(slot.ConstDeclRest0R1, cU, p.cI)
		case slot.ConstDeclRest0R1: // ConstDeclRest : RepDim0x ∙EQU VarInitial

			if !p.testSelect(slot.ConstDeclRest0R1) {
				p.parseError(slot.ConstDeclRest0R1, p.cI, first[slot.ConstDeclRest0R1])
				break
			}

			p.call(slot.ConstDeclRest0R2, cU, p.cI)
		case slot.ConstDeclRest0R2: // ConstDeclRest : RepDim0x EQU ∙VarInitial

			if !p.testSelect(slot.ConstDeclRest0R2) {
				p.parseError(slot.ConstDeclRest0R2, p.cI, first[slot.ConstDeclRest0R2])
				break
			}

			p.call(slot.ConstDeclRest0R3, cU, p.cI)
		case slot.ConstDeclRest0R3: // ConstDeclRest : RepDim0x EQU VarInitial ∙

			if p.follow(symbols.NT_ConstDeclRest) {
				p.rtn(symbols.NT_ConstDeclRest, cU, p.cI)
			} else {
				p.parseError(slot.ConstDeclRest0R0, p.cI, followSets[symbols.NT_ConstDeclRest])
			}
		case slot.ConstDeclsRest0R0: // ConstDeclsRest : ∙ConstDeclRest RepComCnstDecl0x

			p.call(slot.ConstDeclsRest0R1, cU, p.cI)
		case slot.ConstDeclsRest0R1: // ConstDeclsRest : ConstDeclRest ∙RepComCnstDecl0x

			if !p.testSelect(slot.ConstDeclsRest0R1) {
				p.parseError(slot.ConstDeclsRest0R1, p.cI, first[slot.ConstDeclsRest0R1])
				break
			}

			p.call(slot.ConstDeclsRest0R2, cU, p.cI)
		case slot.ConstDeclsRest0R2: // ConstDeclsRest : ConstDeclRest RepComCnstDecl0x ∙

			if p.follow(symbols.NT_ConstDeclsRest) {
				p.rtn(symbols.NT_ConstDeclsRest, cU, p.cI)
			} else {
				p.parseError(slot.ConstDeclsRest0R0, p.cI, followSets[symbols.NT_ConstDeclsRest])
			}
		case slot.ConstExpr0R0: // ConstExpr : ∙Expr

			p.call(slot.ConstExpr0R1, cU, p.cI)
		case slot.ConstExpr0R1: // ConstExpr : Expr ∙

			if p.follow(symbols.NT_ConstExpr) {
				p.rtn(symbols.NT_ConstExpr, cU, p.cI)
			} else {
				p.parseError(slot.ConstExpr0R0, p.cI, followSets[symbols.NT_ConstExpr])
			}
		case slot.CreatedName0R0: // CreatedName : ∙ID RepDotID0x

			p.call(slot.CreatedName0R1, cU, p.cI)
		case slot.CreatedName0R1: // CreatedName : ID ∙RepDotID0x

			if !p.testSelect(slot.CreatedName0R1) {
				p.parseError(slot.CreatedName0R1, p.cI, first[slot.CreatedName0R1])
				break
			}

			p.call(slot.CreatedName0R2, cU, p.cI)
		case slot.CreatedName0R2: // CreatedName : ID RepDotID0x ∙

			if p.follow(symbols.NT_CreatedName) {
				p.rtn(symbols.NT_CreatedName, cU, p.cI)
			} else {
				p.parseError(slot.CreatedName0R0, p.cI, followSets[symbols.NT_CreatedName])
			}
		case slot.Creator0R0: // Creator : ∙CreatedName ClsCreatorRest

			p.call(slot.Creator0R1, cU, p.cI)
		case slot.Creator0R1: // Creator : CreatedName ∙ClsCreatorRest

			if !p.testSelect(slot.Creator0R1) {
				p.parseError(slot.Creator0R1, p.cI, first[slot.Creator0R1])
				break
			}

			p.call(slot.Creator0R2, cU, p.cI)
		case slot.Creator0R2: // Creator : CreatedName ClsCreatorRest ∙

			if p.follow(symbols.NT_Creator) {
				p.rtn(symbols.NT_Creator, cU, p.cI)
			} else {
				p.parseError(slot.Creator0R0, p.cI, followSets[symbols.NT_Creator])
			}
		case slot.Creator1R0: // Creator : ∙TypeAlts ArrayCreatorRest

			p.call(slot.Creator1R1, cU, p.cI)
		case slot.Creator1R1: // Creator : TypeAlts ∙ArrayCreatorRest

			if !p.testSelect(slot.Creator1R1) {
				p.parseError(slot.Creator1R1, p.cI, first[slot.Creator1R1])
				break
			}

			p.call(slot.Creator1R2, cU, p.cI)
		case slot.Creator1R2: // Creator : TypeAlts ArrayCreatorRest ∙

			if p.follow(symbols.NT_Creator) {
				p.rtn(symbols.NT_Creator, cU, p.cI)
			} else {
				p.parseError(slot.Creator1R0, p.cI, followSets[symbols.NT_Creator])
			}
		case slot.DEC0R0: // DEC : ∙-- WS

			p.bsrSet.Add(slot.DEC0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DEC0R1) {
				p.parseError(slot.DEC0R1, p.cI, first[slot.DEC0R1])
				break
			}

			p.call(slot.DEC0R2, cU, p.cI)
		case slot.DEC0R2: // DEC : -- WS ∙

			if p.follow(symbols.NT_DEC) {
				p.rtn(symbols.NT_DEC, cU, p.cI)
			} else {
				p.parseError(slot.DEC0R0, p.cI, followSets[symbols.NT_DEC])
			}
		case slot.DEFAULT0R0: // DEFAULT : ∙default notLorD

			p.bsrSet.Add(slot.DEFAULT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DEFAULT0R1) {
				p.parseError(slot.DEFAULT0R1, p.cI, first[slot.DEFAULT0R1])
				break
			}

			p.bsrSet.Add(slot.DEFAULT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DEFAULT) {
				p.rtn(symbols.NT_DEFAULT, cU, p.cI)
			} else {
				p.parseError(slot.DEFAULT0R0, p.cI, followSets[symbols.NT_DEFAULT])
			}
		case slot.DIV0R0: // DIV : ∙/ nEq WS

			p.bsrSet.Add(slot.DIV0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DIV0R1) {
				p.parseError(slot.DIV0R1, p.cI, first[slot.DIV0R1])
				break
			}

			p.bsrSet.Add(slot.DIV0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DIV0R2) {
				p.parseError(slot.DIV0R2, p.cI, first[slot.DIV0R2])
				break
			}

			p.call(slot.DIV0R3, cU, p.cI)
		case slot.DIV0R3: // DIV : / nEq WS ∙

			if p.follow(symbols.NT_DIV) {
				p.rtn(symbols.NT_DIV, cU, p.cI)
			} else {
				p.parseError(slot.DIV0R0, p.cI, followSets[symbols.NT_DIV])
			}
		case slot.DIV_EQU0R0: // DIV_EQU : ∙/= WS

			p.bsrSet.Add(slot.DIV_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DIV_EQU0R1) {
				p.parseError(slot.DIV_EQU0R1, p.cI, first[slot.DIV_EQU0R1])
				break
			}

			p.call(slot.DIV_EQU0R2, cU, p.cI)
		case slot.DIV_EQU0R2: // DIV_EQU : /= WS ∙

			if p.follow(symbols.NT_DIV_EQU) {
				p.rtn(symbols.NT_DIV_EQU, cU, p.cI)
			} else {
				p.parseError(slot.DIV_EQU0R0, p.cI, followSets[symbols.NT_DIV_EQU])
			}
		case slot.DO0R0: // DO : ∙do notLorD

			p.bsrSet.Add(slot.DO0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DO0R1) {
				p.parseError(slot.DO0R1, p.cI, first[slot.DO0R1])
				break
			}

			p.bsrSet.Add(slot.DO0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DO) {
				p.rtn(symbols.NT_DO, cU, p.cI)
			} else {
				p.parseError(slot.DO0R0, p.cI, followSets[symbols.NT_DO])
			}
		case slot.DOT0R0: // DOT : ∙. WS

			p.bsrSet.Add(slot.DOT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DOT0R1) {
				p.parseError(slot.DOT0R1, p.cI, first[slot.DOT0R1])
				break
			}

			p.call(slot.DOT0R2, cU, p.cI)
		case slot.DOT0R2: // DOT : . WS ∙

			if p.follow(symbols.NT_DOT) {
				p.rtn(symbols.NT_DOT, cU, p.cI)
			} else {
				p.parseError(slot.DOT0R0, p.cI, followSets[symbols.NT_DOT])
			}
		case slot.DecimalFloat0R0: // DecimalFloat : ∙repDig1x dot repDig0x optExpo fF_dD

			p.bsrSet.Add(slot.DecimalFloat0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalFloat0R1) {
				p.parseError(slot.DecimalFloat0R1, p.cI, first[slot.DecimalFloat0R1])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalFloat0R2) {
				p.parseError(slot.DecimalFloat0R2, p.cI, first[slot.DecimalFloat0R2])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat0R3, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalFloat0R3) {
				p.parseError(slot.DecimalFloat0R3, p.cI, first[slot.DecimalFloat0R3])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat0R4, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalFloat0R4) {
				p.parseError(slot.DecimalFloat0R4, p.cI, first[slot.DecimalFloat0R4])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat0R5, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DecimalFloat) {
				p.rtn(symbols.NT_DecimalFloat, cU, p.cI)
			} else {
				p.parseError(slot.DecimalFloat0R0, p.cI, followSets[symbols.NT_DecimalFloat])
			}
		case slot.DecimalFloat1R0: // DecimalFloat : ∙dot RepDig1xExp

			p.bsrSet.Add(slot.DecimalFloat1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalFloat1R1) {
				p.parseError(slot.DecimalFloat1R1, p.cI, first[slot.DecimalFloat1R1])
				break
			}

			p.call(slot.DecimalFloat1R2, cU, p.cI)
		case slot.DecimalFloat1R2: // DecimalFloat : dot RepDig1xExp ∙

			if p.follow(symbols.NT_DecimalFloat) {
				p.rtn(symbols.NT_DecimalFloat, cU, p.cI)
			} else {
				p.parseError(slot.DecimalFloat1R0, p.cI, followSets[symbols.NT_DecimalFloat])
			}
		case slot.DecimalFloat2R0: // DecimalFloat : ∙RepDig1xExp fF_dD

			p.call(slot.DecimalFloat2R1, cU, p.cI)
		case slot.DecimalFloat2R1: // DecimalFloat : RepDig1xExp ∙fF_dD

			if !p.testSelect(slot.DecimalFloat2R1) {
				p.parseError(slot.DecimalFloat2R1, p.cI, first[slot.DecimalFloat2R1])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat2R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DecimalFloat) {
				p.rtn(symbols.NT_DecimalFloat, cU, p.cI)
			} else {
				p.parseError(slot.DecimalFloat2R0, p.cI, followSets[symbols.NT_DecimalFloat])
			}
		case slot.DecimalFloat3R0: // DecimalFloat : ∙RepDig1xOptExp fF_dD

			p.call(slot.DecimalFloat3R1, cU, p.cI)
		case slot.DecimalFloat3R1: // DecimalFloat : RepDig1xOptExp ∙fF_dD

			if !p.testSelect(slot.DecimalFloat3R1) {
				p.parseError(slot.DecimalFloat3R1, p.cI, first[slot.DecimalFloat3R1])
				break
			}

			p.bsrSet.Add(slot.DecimalFloat3R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DecimalFloat) {
				p.rtn(symbols.NT_DecimalFloat, cU, p.cI)
			} else {
				p.parseError(slot.DecimalFloat3R0, p.cI, followSets[symbols.NT_DecimalFloat])
			}
		case slot.DecimalNumeral0R0: // DecimalNumeral : ∙ze

			p.bsrSet.Add(slot.DecimalNumeral0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DecimalNumeral) {
				p.rtn(symbols.NT_DecimalNumeral, cU, p.cI)
			} else {
				p.parseError(slot.DecimalNumeral0R0, p.cI, followSets[symbols.NT_DecimalNumeral])
			}
		case slot.DecimalNumeral1R0: // DecimalNumeral : ∙onenine repNumx0

			p.bsrSet.Add(slot.DecimalNumeral1R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.DecimalNumeral1R1) {
				p.parseError(slot.DecimalNumeral1R1, p.cI, first[slot.DecimalNumeral1R1])
				break
			}

			p.bsrSet.Add(slot.DecimalNumeral1R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_DecimalNumeral) {
				p.rtn(symbols.NT_DecimalNumeral, cU, p.cI)
			} else {
				p.parseError(slot.DecimalNumeral1R0, p.cI, followSets[symbols.NT_DecimalNumeral])
			}
		case slot.DeclAlts0R0: // DeclAlts : ∙ClsDecl

			p.call(slot.DeclAlts0R1, cU, p.cI)
		case slot.DeclAlts0R1: // DeclAlts : ClsDecl ∙

			if p.follow(symbols.NT_DeclAlts) {
				p.rtn(symbols.NT_DeclAlts, cU, p.cI)
			} else {
				p.parseError(slot.DeclAlts0R0, p.cI, followSets[symbols.NT_DeclAlts])
			}
		case slot.DeclAlts1R0: // DeclAlts : ∙IntfDecl

			p.call(slot.DeclAlts1R1, cU, p.cI)
		case slot.DeclAlts1R1: // DeclAlts : IntfDecl ∙

			if p.follow(symbols.NT_DeclAlts) {
				p.rtn(symbols.NT_DeclAlts, cU, p.cI)
			} else {
				p.parseError(slot.DeclAlts1R0, p.cI, followSets[symbols.NT_DeclAlts])
			}
		case slot.Dim0R0: // Dim : ∙LBRK RBRK

			p.call(slot.Dim0R1, cU, p.cI)
		case slot.Dim0R1: // Dim : LBRK ∙RBRK

			if !p.testSelect(slot.Dim0R1) {
				p.parseError(slot.Dim0R1, p.cI, first[slot.Dim0R1])
				break
			}

			p.call(slot.Dim0R2, cU, p.cI)
		case slot.Dim0R2: // Dim : LBRK RBRK ∙

			if p.follow(symbols.NT_Dim) {
				p.rtn(symbols.NT_Dim, cU, p.cI)
			} else {
				p.parseError(slot.Dim0R0, p.cI, followSets[symbols.NT_Dim])
			}
		case slot.DimExpr0R0: // DimExpr : ∙LBRK Expr RBRK

			p.call(slot.DimExpr0R1, cU, p.cI)
		case slot.DimExpr0R1: // DimExpr : LBRK ∙Expr RBRK

			if !p.testSelect(slot.DimExpr0R1) {
				p.parseError(slot.DimExpr0R1, p.cI, first[slot.DimExpr0R1])
				break
			}

			p.call(slot.DimExpr0R2, cU, p.cI)
		case slot.DimExpr0R2: // DimExpr : LBRK Expr ∙RBRK

			if !p.testSelect(slot.DimExpr0R2) {
				p.parseError(slot.DimExpr0R2, p.cI, first[slot.DimExpr0R2])
				break
			}

			p.call(slot.DimExpr0R3, cU, p.cI)
		case slot.DimExpr0R3: // DimExpr : LBRK Expr RBRK ∙

			if p.follow(symbols.NT_DimExpr) {
				p.rtn(symbols.NT_DimExpr, cU, p.cI)
			} else {
				p.parseError(slot.DimExpr0R0, p.cI, followSets[symbols.NT_DimExpr])
			}
		case slot.ELSE0R0: // ELSE : ∙else notLorD

			p.bsrSet.Add(slot.ELSE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ELSE0R1) {
				p.parseError(slot.ELSE0R1, p.cI, first[slot.ELSE0R1])
				break
			}

			p.bsrSet.Add(slot.ELSE0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_ELSE) {
				p.rtn(symbols.NT_ELSE, cU, p.cI)
			} else {
				p.parseError(slot.ELSE0R0, p.cI, followSets[symbols.NT_ELSE])
			}
		case slot.EQU0R0: // EQU : ∙= nEq WS

			p.bsrSet.Add(slot.EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EQU0R1) {
				p.parseError(slot.EQU0R1, p.cI, first[slot.EQU0R1])
				break
			}

			p.bsrSet.Add(slot.EQU0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EQU0R2) {
				p.parseError(slot.EQU0R2, p.cI, first[slot.EQU0R2])
				break
			}

			p.call(slot.EQU0R3, cU, p.cI)
		case slot.EQU0R3: // EQU : = nEq WS ∙

			if p.follow(symbols.NT_EQU) {
				p.rtn(symbols.NT_EQU, cU, p.cI)
			} else {
				p.parseError(slot.EQU0R0, p.cI, followSets[symbols.NT_EQU])
			}
		case slot.EQUAL0R0: // EQUAL : ∙== WS

			p.bsrSet.Add(slot.EQUAL0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EQUAL0R1) {
				p.parseError(slot.EQUAL0R1, p.cI, first[slot.EQUAL0R1])
				break
			}

			p.call(slot.EQUAL0R2, cU, p.cI)
		case slot.EQUAL0R2: // EQUAL : == WS ∙

			if p.follow(symbols.NT_EQUAL) {
				p.rtn(symbols.NT_EQUAL, cU, p.cI)
			} else {
				p.parseError(slot.EQUAL0R0, p.cI, followSets[symbols.NT_EQUAL])
			}
		case slot.ESInst0R0: // ESInst : ∙EqShift

			p.call(slot.ESInst0R1, cU, p.cI)
		case slot.ESInst0R1: // ESInst : EqShift ∙

			if p.follow(symbols.NT_ESInst) {
				p.rtn(symbols.NT_ESInst, cU, p.cI)
			} else {
				p.parseError(slot.ESInst0R0, p.cI, followSets[symbols.NT_ESInst])
			}
		case slot.ESInst1R0: // ESInst : ∙INSTANCEOF ReferenceType

			p.call(slot.ESInst1R1, cU, p.cI)
		case slot.ESInst1R1: // ESInst : INSTANCEOF ∙ReferenceType

			if !p.testSelect(slot.ESInst1R1) {
				p.parseError(slot.ESInst1R1, p.cI, first[slot.ESInst1R1])
				break
			}

			p.call(slot.ESInst1R2, cU, p.cI)
		case slot.ESInst1R2: // ESInst : INSTANCEOF ReferenceType ∙

			if p.follow(symbols.NT_ESInst) {
				p.rtn(symbols.NT_ESInst, cU, p.cI)
			} else {
				p.parseError(slot.ESInst1R0, p.cI, followSets[symbols.NT_ESInst])
			}
		case slot.EXTENDS0R0: // EXTENDS : ∙extends notLorD

			p.bsrSet.Add(slot.EXTENDS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EXTENDS0R1) {
				p.parseError(slot.EXTENDS0R1, p.cI, first[slot.EXTENDS0R1])
				break
			}

			p.bsrSet.Add(slot.EXTENDS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EXTENDS) {
				p.rtn(symbols.NT_EXTENDS, cU, p.cI)
			} else {
				p.parseError(slot.EXTENDS0R0, p.cI, followSets[symbols.NT_EXTENDS])
			}
		case slot.EqAlts0R0: // EqAlts : ∙EQUAL

			p.call(slot.EqAlts0R1, cU, p.cI)
		case slot.EqAlts0R1: // EqAlts : EQUAL ∙

			if p.follow(symbols.NT_EqAlts) {
				p.rtn(symbols.NT_EqAlts, cU, p.cI)
			} else {
				p.parseError(slot.EqAlts0R0, p.cI, followSets[symbols.NT_EqAlts])
			}
		case slot.EqAlts1R0: // EqAlts : ∙NOT_EQUAL

			p.call(slot.EqAlts1R1, cU, p.cI)
		case slot.EqAlts1R1: // EqAlts : NOT_EQUAL ∙

			if p.follow(symbols.NT_EqAlts) {
				p.rtn(symbols.NT_EqAlts, cU, p.cI)
			} else {
				p.parseError(slot.EqAlts1R0, p.cI, followSets[symbols.NT_EqAlts])
			}
		case slot.EqCheck0R0: // EqCheck : ∙LE

			p.call(slot.EqCheck0R1, cU, p.cI)
		case slot.EqCheck0R1: // EqCheck : LE ∙

			if p.follow(symbols.NT_EqCheck) {
				p.rtn(symbols.NT_EqCheck, cU, p.cI)
			} else {
				p.parseError(slot.EqCheck0R0, p.cI, followSets[symbols.NT_EqCheck])
			}
		case slot.EqCheck1R0: // EqCheck : ∙GE

			p.call(slot.EqCheck1R1, cU, p.cI)
		case slot.EqCheck1R1: // EqCheck : GE ∙

			if p.follow(symbols.NT_EqCheck) {
				p.rtn(symbols.NT_EqCheck, cU, p.cI)
			} else {
				p.parseError(slot.EqCheck1R0, p.cI, followSets[symbols.NT_EqCheck])
			}
		case slot.EqCheck2R0: // EqCheck : ∙LT

			p.call(slot.EqCheck2R1, cU, p.cI)
		case slot.EqCheck2R1: // EqCheck : LT ∙

			if p.follow(symbols.NT_EqCheck) {
				p.rtn(symbols.NT_EqCheck, cU, p.cI)
			} else {
				p.parseError(slot.EqCheck2R0, p.cI, followSets[symbols.NT_EqCheck])
			}
		case slot.EqCheck3R0: // EqCheck : ∙GT

			p.call(slot.EqCheck3R1, cU, p.cI)
		case slot.EqCheck3R1: // EqCheck : GT ∙

			if p.follow(symbols.NT_EqCheck) {
				p.rtn(symbols.NT_EqCheck, cU, p.cI)
			} else {
				p.parseError(slot.EqCheck3R0, p.cI, followSets[symbols.NT_EqCheck])
			}
		case slot.EqShift0R0: // EqShift : ∙EqCheck ShiftExpr

			p.call(slot.EqShift0R1, cU, p.cI)
		case slot.EqShift0R1: // EqShift : EqCheck ∙ShiftExpr

			if !p.testSelect(slot.EqShift0R1) {
				p.parseError(slot.EqShift0R1, p.cI, first[slot.EqShift0R1])
				break
			}

			p.call(slot.EqShift0R2, cU, p.cI)
		case slot.EqShift0R2: // EqShift : EqCheck ShiftExpr ∙

			if p.follow(symbols.NT_EqShift) {
				p.rtn(symbols.NT_EqShift, cU, p.cI)
			} else {
				p.parseError(slot.EqShift0R0, p.cI, followSets[symbols.NT_EqShift])
			}
		case slot.EqualExpr0R0: // EqualExpr : ∙RelateExpr RepEqExpr0x

			p.call(slot.EqualExpr0R1, cU, p.cI)
		case slot.EqualExpr0R1: // EqualExpr : RelateExpr ∙RepEqExpr0x

			if !p.testSelect(slot.EqualExpr0R1) {
				p.parseError(slot.EqualExpr0R1, p.cI, first[slot.EqualExpr0R1])
				break
			}

			p.call(slot.EqualExpr0R2, cU, p.cI)
		case slot.EqualExpr0R2: // EqualExpr : RelateExpr RepEqExpr0x ∙

			if p.follow(symbols.NT_EqualExpr) {
				p.rtn(symbols.NT_EqualExpr, cU, p.cI)
			} else {
				p.parseError(slot.EqualExpr0R0, p.cI, followSets[symbols.NT_EqualExpr])
			}
		case slot.EscOrLineOrBlock0R0: // EscOrLineOrBlock : ∙line_comment

			p.bsrSet.Add(slot.EscOrLineOrBlock0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscOrLineOrBlock) {
				p.rtn(symbols.NT_EscOrLineOrBlock, cU, p.cI)
			} else {
				p.parseError(slot.EscOrLineOrBlock0R0, p.cI, followSets[symbols.NT_EscOrLineOrBlock])
			}
		case slot.EscOrLineOrBlock1R0: // EscOrLineOrBlock : ∙block_comment

			p.bsrSet.Add(slot.EscOrLineOrBlock1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscOrLineOrBlock) {
				p.rtn(symbols.NT_EscOrLineOrBlock, cU, p.cI)
			} else {
				p.parseError(slot.EscOrLineOrBlock1R0, p.cI, followSets[symbols.NT_EscOrLineOrBlock])
			}
		case slot.EscOrLineOrBlock2R0: // EscOrLineOrBlock : ∙escCharSp

			p.bsrSet.Add(slot.EscOrLineOrBlock2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscOrLineOrBlock) {
				p.rtn(symbols.NT_EscOrLineOrBlock, cU, p.cI)
			} else {
				p.parseError(slot.EscOrLineOrBlock2R0, p.cI, followSets[symbols.NT_EscOrLineOrBlock])
			}
		case slot.EscSlash0R0: // EscSlash : ∙Escape

			p.call(slot.EscSlash0R1, cU, p.cI)
		case slot.EscSlash0R1: // EscSlash : Escape ∙

			if p.follow(symbols.NT_EscSlash) {
				p.rtn(symbols.NT_EscSlash, cU, p.cI)
			} else {
				p.parseError(slot.EscSlash0R0, p.cI, followSets[symbols.NT_EscSlash])
			}
		case slot.EscSlash1R0: // EscSlash : ∙EscUp

			p.call(slot.EscSlash1R1, cU, p.cI)
		case slot.EscSlash1R1: // EscSlash : EscUp ∙

			if p.follow(symbols.NT_EscSlash) {
				p.rtn(symbols.NT_EscSlash, cU, p.cI)
			} else {
				p.parseError(slot.EscSlash1R0, p.cI, followSets[symbols.NT_EscSlash])
			}
		case slot.EscUp0R0: // EscUp : ∙^

			p.bsrSet.Add(slot.EscUp0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscUp) {
				p.rtn(symbols.NT_EscUp, cU, p.cI)
			} else {
				p.parseError(slot.EscUp0R0, p.cI, followSets[symbols.NT_EscUp])
			}
		case slot.EscUp1R0: // EscUp : ∙sinQuo

			p.bsrSet.Add(slot.EscUp1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscUp) {
				p.rtn(symbols.NT_EscUp, cU, p.cI)
			} else {
				p.parseError(slot.EscUp1R0, p.cI, followSets[symbols.NT_EscUp])
			}
		case slot.EscUp2R0: // EscUp : ∙dubSlash

			p.bsrSet.Add(slot.EscUp2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_EscUp) {
				p.rtn(symbols.NT_EscUp, cU, p.cI)
			} else {
				p.parseError(slot.EscUp2R0, p.cI, followSets[symbols.NT_EscUp])
			}
		case slot.Escape0R0: // Escape : ∙dubSlash Escs

			p.bsrSet.Add(slot.Escape0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Escape0R1) {
				p.parseError(slot.Escape0R1, p.cI, first[slot.Escape0R1])
				break
			}

			p.call(slot.Escape0R2, cU, p.cI)
		case slot.Escape0R2: // Escape : dubSlash Escs ∙

			if p.follow(symbols.NT_Escape) {
				p.rtn(symbols.NT_Escape, cU, p.cI)
			} else {
				p.parseError(slot.Escape0R0, p.cI, followSets[symbols.NT_Escape])
			}
		case slot.Escs0R0: // Escs : ∙esc

			p.bsrSet.Add(slot.Escs0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Escs) {
				p.rtn(symbols.NT_Escs, cU, p.cI)
			} else {
				p.parseError(slot.Escs0R0, p.cI, followSets[symbols.NT_Escs])
			}
		case slot.Escs1R0: // Escs : ∙OctalEscape

			p.call(slot.Escs1R1, cU, p.cI)
		case slot.Escs1R1: // Escs : OctalEscape ∙

			if p.follow(symbols.NT_Escs) {
				p.rtn(symbols.NT_Escs, cU, p.cI)
			} else {
				p.parseError(slot.Escs1R0, p.cI, followSets[symbols.NT_Escs])
			}
		case slot.Escs2R0: // Escs : ∙UnicodeEscape

			p.call(slot.Escs2R1, cU, p.cI)
		case slot.Escs2R1: // Escs : UnicodeEscape ∙

			if p.follow(symbols.NT_Escs) {
				p.rtn(symbols.NT_Escs, cU, p.cI)
			} else {
				p.parseError(slot.Escs2R0, p.cI, followSets[symbols.NT_Escs])
			}
		case slot.Expr0R0: // Expr : ∙CondExpr RepAsscExpr0x

			p.call(slot.Expr0R1, cU, p.cI)
		case slot.Expr0R1: // Expr : CondExpr ∙RepAsscExpr0x

			if !p.testSelect(slot.Expr0R1) {
				p.parseError(slot.Expr0R1, p.cI, first[slot.Expr0R1])
				break
			}

			p.call(slot.Expr0R2, cU, p.cI)
		case slot.Expr0R2: // Expr : CondExpr RepAsscExpr0x ∙

			if p.follow(symbols.NT_Expr) {
				p.rtn(symbols.NT_Expr, cU, p.cI)
			} else {
				p.parseError(slot.Expr0R0, p.cI, followSets[symbols.NT_Expr])
			}
		case slot.FINAL0R0: // FINAL : ∙final notLorD

			p.bsrSet.Add(slot.FINAL0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FINAL0R1) {
				p.parseError(slot.FINAL0R1, p.cI, first[slot.FINAL0R1])
				break
			}

			p.bsrSet.Add(slot.FINAL0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_FINAL) {
				p.rtn(symbols.NT_FINAL, cU, p.cI)
			} else {
				p.parseError(slot.FINAL0R0, p.cI, followSets[symbols.NT_FINAL])
			}
		case slot.FINALLY0R0: // FINALLY : ∙finally notLorD

			p.bsrSet.Add(slot.FINALLY0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FINALLY0R1) {
				p.parseError(slot.FINALLY0R1, p.cI, first[slot.FINALLY0R1])
				break
			}

			p.bsrSet.Add(slot.FINALLY0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_FINALLY) {
				p.rtn(symbols.NT_FINALLY, cU, p.cI)
			} else {
				p.parseError(slot.FINALLY0R0, p.cI, followSets[symbols.NT_FINALLY])
			}
		case slot.FOR0R0: // FOR : ∙for notLorD

			p.bsrSet.Add(slot.FOR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FOR0R1) {
				p.parseError(slot.FOR0R1, p.cI, first[slot.FOR0R1])
				break
			}

			p.bsrSet.Add(slot.FOR0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_FOR) {
				p.rtn(symbols.NT_FOR, cU, p.cI)
			} else {
				p.parseError(slot.FOR0R0, p.cI, followSets[symbols.NT_FOR])
			}
		case slot.Finally0R0: // Finally : ∙FINALLY Block

			p.call(slot.Finally0R1, cU, p.cI)
		case slot.Finally0R1: // Finally : FINALLY ∙Block

			if !p.testSelect(slot.Finally0R1) {
				p.parseError(slot.Finally0R1, p.cI, first[slot.Finally0R1])
				break
			}

			p.call(slot.Finally0R2, cU, p.cI)
		case slot.Finally0R2: // Finally : FINALLY Block ∙

			if p.follow(symbols.NT_Finally) {
				p.rtn(symbols.NT_Finally, cU, p.cI)
			} else {
				p.parseError(slot.Finally0R0, p.cI, followSets[symbols.NT_Finally])
			}
		case slot.FloatLiteral0R0: // FloatLiteral : ∙HexFloat

			p.call(slot.FloatLiteral0R1, cU, p.cI)
		case slot.FloatLiteral0R1: // FloatLiteral : HexFloat ∙

			if p.follow(symbols.NT_FloatLiteral) {
				p.rtn(symbols.NT_FloatLiteral, cU, p.cI)
			} else {
				p.parseError(slot.FloatLiteral0R0, p.cI, followSets[symbols.NT_FloatLiteral])
			}
		case slot.FloatLiteral1R0: // FloatLiteral : ∙DecimalFloat

			p.call(slot.FloatLiteral1R1, cU, p.cI)
		case slot.FloatLiteral1R1: // FloatLiteral : DecimalFloat ∙

			if p.follow(symbols.NT_FloatLiteral) {
				p.rtn(symbols.NT_FloatLiteral, cU, p.cI)
			} else {
				p.parseError(slot.FloatLiteral1R0, p.cI, followSets[symbols.NT_FloatLiteral])
			}
		case slot.ForInit0R0: // ForInit : ∙OptFinType Type VarDeclInit

			p.call(slot.ForInit0R1, cU, p.cI)
		case slot.ForInit0R1: // ForInit : OptFinType ∙Type VarDeclInit

			if !p.testSelect(slot.ForInit0R1) {
				p.parseError(slot.ForInit0R1, p.cI, first[slot.ForInit0R1])
				break
			}

			p.call(slot.ForInit0R2, cU, p.cI)
		case slot.ForInit0R2: // ForInit : OptFinType Type ∙VarDeclInit

			if !p.testSelect(slot.ForInit0R2) {
				p.parseError(slot.ForInit0R2, p.cI, first[slot.ForInit0R2])
				break
			}

			p.call(slot.ForInit0R3, cU, p.cI)
		case slot.ForInit0R3: // ForInit : OptFinType Type VarDeclInit ∙

			if p.follow(symbols.NT_ForInit) {
				p.rtn(symbols.NT_ForInit, cU, p.cI)
			} else {
				p.parseError(slot.ForInit0R0, p.cI, followSets[symbols.NT_ForInit])
			}
		case slot.ForInit1R0: // ForInit : ∙StmtExpr RepComSExpr0x

			p.call(slot.ForInit1R1, cU, p.cI)
		case slot.ForInit1R1: // ForInit : StmtExpr ∙RepComSExpr0x

			if !p.testSelect(slot.ForInit1R1) {
				p.parseError(slot.ForInit1R1, p.cI, first[slot.ForInit1R1])
				break
			}

			p.call(slot.ForInit1R2, cU, p.cI)
		case slot.ForInit1R2: // ForInit : StmtExpr RepComSExpr0x ∙

			if p.follow(symbols.NT_ForInit) {
				p.rtn(symbols.NT_ForInit, cU, p.cI)
			} else {
				p.parseError(slot.ForInit1R0, p.cI, followSets[symbols.NT_ForInit])
			}
		case slot.ForUpdate0R0: // ForUpdate : ∙StmtExpr RepComSExpr0x

			p.call(slot.ForUpdate0R1, cU, p.cI)
		case slot.ForUpdate0R1: // ForUpdate : StmtExpr ∙RepComSExpr0x

			if !p.testSelect(slot.ForUpdate0R1) {
				p.parseError(slot.ForUpdate0R1, p.cI, first[slot.ForUpdate0R1])
				break
			}

			p.call(slot.ForUpdate0R2, cU, p.cI)
		case slot.ForUpdate0R2: // ForUpdate : StmtExpr RepComSExpr0x ∙

			if p.follow(symbols.NT_ForUpdate) {
				p.rtn(symbols.NT_ForUpdate, cU, p.cI)
			} else {
				p.parseError(slot.ForUpdate0R0, p.cI, followSets[symbols.NT_ForUpdate])
			}
		case slot.FormalParam0R0: // FormalParam : ∙OptFinType VarDelID

			p.call(slot.FormalParam0R1, cU, p.cI)
		case slot.FormalParam0R1: // FormalParam : OptFinType ∙VarDelID

			if !p.testSelect(slot.FormalParam0R1) {
				p.parseError(slot.FormalParam0R1, p.cI, first[slot.FormalParam0R1])
				break
			}

			p.call(slot.FormalParam0R2, cU, p.cI)
		case slot.FormalParam0R2: // FormalParam : OptFinType VarDelID ∙

			if p.follow(symbols.NT_FormalParam) {
				p.rtn(symbols.NT_FormalParam, cU, p.cI)
			} else {
				p.parseError(slot.FormalParam0R0, p.cI, followSets[symbols.NT_FormalParam])
			}
		case slot.FormalParamDecls0R0: // FormalParamDecls : ∙OptFinType FormalParamDeclsRest

			p.call(slot.FormalParamDecls0R1, cU, p.cI)
		case slot.FormalParamDecls0R1: // FormalParamDecls : OptFinType ∙FormalParamDeclsRest

			if !p.testSelect(slot.FormalParamDecls0R1) {
				p.parseError(slot.FormalParamDecls0R1, p.cI, first[slot.FormalParamDecls0R1])
				break
			}

			p.call(slot.FormalParamDecls0R2, cU, p.cI)
		case slot.FormalParamDecls0R2: // FormalParamDecls : OptFinType FormalParamDeclsRest ∙

			if p.follow(symbols.NT_FormalParamDecls) {
				p.rtn(symbols.NT_FormalParamDecls, cU, p.cI)
			} else {
				p.parseError(slot.FormalParamDecls0R0, p.cI, followSets[symbols.NT_FormalParamDecls])
			}
		case slot.FormalParamDeclsRest0R0: // FormalParamDeclsRest : ∙VarDelID OptComFormPDecl

			p.call(slot.FormalParamDeclsRest0R1, cU, p.cI)
		case slot.FormalParamDeclsRest0R1: // FormalParamDeclsRest : VarDelID ∙OptComFormPDecl

			if !p.testSelect(slot.FormalParamDeclsRest0R1) {
				p.parseError(slot.FormalParamDeclsRest0R1, p.cI, first[slot.FormalParamDeclsRest0R1])
				break
			}

			p.call(slot.FormalParamDeclsRest0R2, cU, p.cI)
		case slot.FormalParamDeclsRest0R2: // FormalParamDeclsRest : VarDelID OptComFormPDecl ∙

			if p.follow(symbols.NT_FormalParamDeclsRest) {
				p.rtn(symbols.NT_FormalParamDeclsRest, cU, p.cI)
			} else {
				p.parseError(slot.FormalParamDeclsRest0R0, p.cI, followSets[symbols.NT_FormalParamDeclsRest])
			}
		case slot.FormalParams0R0: // FormalParams : ∙LPAR OptFormPDecl RPAR

			p.call(slot.FormalParams0R1, cU, p.cI)
		case slot.FormalParams0R1: // FormalParams : LPAR ∙OptFormPDecl RPAR

			if !p.testSelect(slot.FormalParams0R1) {
				p.parseError(slot.FormalParams0R1, p.cI, first[slot.FormalParams0R1])
				break
			}

			p.call(slot.FormalParams0R2, cU, p.cI)
		case slot.FormalParams0R2: // FormalParams : LPAR OptFormPDecl ∙RPAR

			if !p.testSelect(slot.FormalParams0R2) {
				p.parseError(slot.FormalParams0R2, p.cI, first[slot.FormalParams0R2])
				break
			}

			p.call(slot.FormalParams0R3, cU, p.cI)
		case slot.FormalParams0R3: // FormalParams : LPAR OptFormPDecl RPAR ∙

			if p.follow(symbols.NT_FormalParams) {
				p.rtn(symbols.NT_FormalParams, cU, p.cI)
			} else {
				p.parseError(slot.FormalParams0R0, p.cI, followSets[symbols.NT_FormalParams])
			}
		case slot.GE0R0: // GE : ∙>= WS

			p.bsrSet.Add(slot.GE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.GE0R1) {
				p.parseError(slot.GE0R1, p.cI, first[slot.GE0R1])
				break
			}

			p.call(slot.GE0R2, cU, p.cI)
		case slot.GE0R2: // GE : >= WS ∙

			if p.follow(symbols.NT_GE) {
				p.rtn(symbols.NT_GE, cU, p.cI)
			} else {
				p.parseError(slot.GE0R0, p.cI, followSets[symbols.NT_GE])
			}
		case slot.GT0R0: // GT : ∙> notEqCar WS

			p.bsrSet.Add(slot.GT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.GT0R1) {
				p.parseError(slot.GT0R1, p.cI, first[slot.GT0R1])
				break
			}

			p.bsrSet.Add(slot.GT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.GT0R2) {
				p.parseError(slot.GT0R2, p.cI, first[slot.GT0R2])
				break
			}

			p.call(slot.GT0R3, cU, p.cI)
		case slot.GT0R3: // GT : > notEqCar WS ∙

			if p.follow(symbols.NT_GT) {
				p.rtn(symbols.NT_GT, cU, p.cI)
			} else {
				p.parseError(slot.GT0R0, p.cI, followSets[symbols.NT_GT])
			}
		case slot.HAT0R0: // HAT : ∙^ nEq WS

			p.bsrSet.Add(slot.HAT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.HAT0R1) {
				p.parseError(slot.HAT0R1, p.cI, first[slot.HAT0R1])
				break
			}

			p.bsrSet.Add(slot.HAT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.HAT0R2) {
				p.parseError(slot.HAT0R2, p.cI, first[slot.HAT0R2])
				break
			}

			p.call(slot.HAT0R3, cU, p.cI)
		case slot.HAT0R3: // HAT : ^ nEq WS ∙

			if p.follow(symbols.NT_HAT) {
				p.rtn(symbols.NT_HAT, cU, p.cI)
			} else {
				p.parseError(slot.HAT0R0, p.cI, followSets[symbols.NT_HAT])
			}
		case slot.HAT_EQU0R0: // HAT_EQU : ∙^= WS

			p.bsrSet.Add(slot.HAT_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.HAT_EQU0R1) {
				p.parseError(slot.HAT_EQU0R1, p.cI, first[slot.HAT_EQU0R1])
				break
			}

			p.call(slot.HAT_EQU0R2, cU, p.cI)
		case slot.HAT_EQU0R2: // HAT_EQU : ^= WS ∙

			if p.follow(symbols.NT_HAT_EQU) {
				p.rtn(symbols.NT_HAT_EQU, cU, p.cI)
			} else {
				p.parseError(slot.HAT_EQU0R0, p.cI, followSets[symbols.NT_HAT_EQU])
			}
		case slot.HexFloat0R0: // HexFloat : ∙HexSignificand Beoptfd

			p.call(slot.HexFloat0R1, cU, p.cI)
		case slot.HexFloat0R1: // HexFloat : HexSignificand ∙Beoptfd

			if !p.testSelect(slot.HexFloat0R1) {
				p.parseError(slot.HexFloat0R1, p.cI, first[slot.HexFloat0R1])
				break
			}

			p.call(slot.HexFloat0R2, cU, p.cI)
		case slot.HexFloat0R2: // HexFloat : HexSignificand Beoptfd ∙

			if p.follow(symbols.NT_HexFloat) {
				p.rtn(symbols.NT_HexFloat, cU, p.cI)
			} else {
				p.parseError(slot.HexFloat0R0, p.cI, followSets[symbols.NT_HexFloat])
			}
		case slot.HexNumeral0R0: // HexNumeral : ∙Any0xX repHex1x

			p.call(slot.HexNumeral0R1, cU, p.cI)
		case slot.HexNumeral0R1: // HexNumeral : Any0xX ∙repHex1x

			if !p.testSelect(slot.HexNumeral0R1) {
				p.parseError(slot.HexNumeral0R1, p.cI, first[slot.HexNumeral0R1])
				break
			}

			p.bsrSet.Add(slot.HexNumeral0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_HexNumeral) {
				p.rtn(symbols.NT_HexNumeral, cU, p.cI)
			} else {
				p.parseError(slot.HexNumeral0R0, p.cI, followSets[symbols.NT_HexNumeral])
			}
		case slot.HexSignificand0R0: // HexSignificand : ∙HexNumeral OptDot

			p.call(slot.HexSignificand0R1, cU, p.cI)
		case slot.HexSignificand0R1: // HexSignificand : HexNumeral ∙OptDot

			if !p.testSelect(slot.HexSignificand0R1) {
				p.parseError(slot.HexSignificand0R1, p.cI, first[slot.HexSignificand0R1])
				break
			}

			p.call(slot.HexSignificand0R2, cU, p.cI)
		case slot.HexSignificand0R2: // HexSignificand : HexNumeral OptDot ∙

			if p.follow(symbols.NT_HexSignificand) {
				p.rtn(symbols.NT_HexSignificand, cU, p.cI)
			} else {
				p.parseError(slot.HexSignificand0R0, p.cI, followSets[symbols.NT_HexSignificand])
			}
		case slot.HexSignificand1R0: // HexSignificand : ∙RepHex0xDot hexDigit repHex0x

			p.call(slot.HexSignificand1R1, cU, p.cI)
		case slot.HexSignificand1R1: // HexSignificand : RepHex0xDot ∙hexDigit repHex0x

			if !p.testSelect(slot.HexSignificand1R1) {
				p.parseError(slot.HexSignificand1R1, p.cI, first[slot.HexSignificand1R1])
				break
			}

			p.bsrSet.Add(slot.HexSignificand1R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.HexSignificand1R2) {
				p.parseError(slot.HexSignificand1R2, p.cI, first[slot.HexSignificand1R2])
				break
			}

			p.bsrSet.Add(slot.HexSignificand1R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_HexSignificand) {
				p.rtn(symbols.NT_HexSignificand, cU, p.cI)
			} else {
				p.parseError(slot.HexSignificand1R0, p.cI, followSets[symbols.NT_HexSignificand])
			}
		case slot.ID0R0: // ID : ∙notKeyword LetterLorD

			p.bsrSet.Add(slot.ID0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.ID0R1) {
				p.parseError(slot.ID0R1, p.cI, first[slot.ID0R1])
				break
			}

			p.call(slot.ID0R2, cU, p.cI)
		case slot.ID0R2: // ID : notKeyword LetterLorD ∙

			if p.follow(symbols.NT_ID) {
				p.rtn(symbols.NT_ID, cU, p.cI)
			} else {
				p.parseError(slot.ID0R0, p.cI, followSets[symbols.NT_ID])
			}
		case slot.IDSuffix0R0: // IDSuffix : ∙LBRK RBRKAlts

			p.call(slot.IDSuffix0R1, cU, p.cI)
		case slot.IDSuffix0R1: // IDSuffix : LBRK ∙RBRKAlts

			if !p.testSelect(slot.IDSuffix0R1) {
				p.parseError(slot.IDSuffix0R1, p.cI, first[slot.IDSuffix0R1])
				break
			}

			p.call(slot.IDSuffix0R2, cU, p.cI)
		case slot.IDSuffix0R2: // IDSuffix : LBRK RBRKAlts ∙

			if p.follow(symbols.NT_IDSuffix) {
				p.rtn(symbols.NT_IDSuffix, cU, p.cI)
			} else {
				p.parseError(slot.IDSuffix0R0, p.cI, followSets[symbols.NT_IDSuffix])
			}
		case slot.IDSuffix1R0: // IDSuffix : ∙Arguments

			p.call(slot.IDSuffix1R1, cU, p.cI)
		case slot.IDSuffix1R1: // IDSuffix : Arguments ∙

			if p.follow(symbols.NT_IDSuffix) {
				p.rtn(symbols.NT_IDSuffix, cU, p.cI)
			} else {
				p.parseError(slot.IDSuffix1R0, p.cI, followSets[symbols.NT_IDSuffix])
			}
		case slot.IDSuffix2R0: // IDSuffix : ∙DOT OtherAlts

			p.call(slot.IDSuffix2R1, cU, p.cI)
		case slot.IDSuffix2R1: // IDSuffix : DOT ∙OtherAlts

			if !p.testSelect(slot.IDSuffix2R1) {
				p.parseError(slot.IDSuffix2R1, p.cI, first[slot.IDSuffix2R1])
				break
			}

			p.call(slot.IDSuffix2R2, cU, p.cI)
		case slot.IDSuffix2R2: // IDSuffix : DOT OtherAlts ∙

			if p.follow(symbols.NT_IDSuffix) {
				p.rtn(symbols.NT_IDSuffix, cU, p.cI)
			} else {
				p.parseError(slot.IDSuffix2R0, p.cI, followSets[symbols.NT_IDSuffix])
			}
		case slot.IF0R0: // IF : ∙if notLorD

			p.bsrSet.Add(slot.IF0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.IF0R1) {
				p.parseError(slot.IF0R1, p.cI, first[slot.IF0R1])
				break
			}

			p.bsrSet.Add(slot.IF0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_IF) {
				p.rtn(symbols.NT_IF, cU, p.cI)
			} else {
				p.parseError(slot.IF0R0, p.cI, followSets[symbols.NT_IF])
			}
		case slot.IMPLEMENTS0R0: // IMPLEMENTS : ∙implements notLorD

			p.bsrSet.Add(slot.IMPLEMENTS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.IMPLEMENTS0R1) {
				p.parseError(slot.IMPLEMENTS0R1, p.cI, first[slot.IMPLEMENTS0R1])
				break
			}

			p.bsrSet.Add(slot.IMPLEMENTS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_IMPLEMENTS) {
				p.rtn(symbols.NT_IMPLEMENTS, cU, p.cI)
			} else {
				p.parseError(slot.IMPLEMENTS0R0, p.cI, followSets[symbols.NT_IMPLEMENTS])
			}
		case slot.IMPORT0R0: // IMPORT : ∙import notLorD

			p.bsrSet.Add(slot.IMPORT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.IMPORT0R1) {
				p.parseError(slot.IMPORT0R1, p.cI, first[slot.IMPORT0R1])
				break
			}

			p.bsrSet.Add(slot.IMPORT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_IMPORT) {
				p.rtn(symbols.NT_IMPORT, cU, p.cI)
			} else {
				p.parseError(slot.IMPORT0R0, p.cI, followSets[symbols.NT_IMPORT])
			}
		case slot.INC0R0: // INC : ∙++ WS

			p.bsrSet.Add(slot.INC0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.INC0R1) {
				p.parseError(slot.INC0R1, p.cI, first[slot.INC0R1])
				break
			}

			p.call(slot.INC0R2, cU, p.cI)
		case slot.INC0R2: // INC : ++ WS ∙

			if p.follow(symbols.NT_INC) {
				p.rtn(symbols.NT_INC, cU, p.cI)
			} else {
				p.parseError(slot.INC0R0, p.cI, followSets[symbols.NT_INC])
			}
		case slot.INSTANCEOF0R0: // INSTANCEOF : ∙instanceof notLorD

			p.bsrSet.Add(slot.INSTANCEOF0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.INSTANCEOF0R1) {
				p.parseError(slot.INSTANCEOF0R1, p.cI, first[slot.INSTANCEOF0R1])
				break
			}

			p.bsrSet.Add(slot.INSTANCEOF0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_INSTANCEOF) {
				p.rtn(symbols.NT_INSTANCEOF, cU, p.cI)
			} else {
				p.parseError(slot.INSTANCEOF0R0, p.cI, followSets[symbols.NT_INSTANCEOF])
			}
		case slot.IORExpr0R0: // IORExpr : ∙XORExpr RepORXOR0x

			p.call(slot.IORExpr0R1, cU, p.cI)
		case slot.IORExpr0R1: // IORExpr : XORExpr ∙RepORXOR0x

			if !p.testSelect(slot.IORExpr0R1) {
				p.parseError(slot.IORExpr0R1, p.cI, first[slot.IORExpr0R1])
				break
			}

			p.call(slot.IORExpr0R2, cU, p.cI)
		case slot.IORExpr0R2: // IORExpr : XORExpr RepORXOR0x ∙

			if p.follow(symbols.NT_IORExpr) {
				p.rtn(symbols.NT_IORExpr, cU, p.cI)
			} else {
				p.parseError(slot.IORExpr0R0, p.cI, followSets[symbols.NT_IORExpr])
			}
		case slot.ImportDecl0R0: // ImportDecl : ∙IMPORT OptStatic QualifiedID OptDotStar SEMI

			p.call(slot.ImportDecl0R1, cU, p.cI)
		case slot.ImportDecl0R1: // ImportDecl : IMPORT ∙OptStatic QualifiedID OptDotStar SEMI

			if !p.testSelect(slot.ImportDecl0R1) {
				p.parseError(slot.ImportDecl0R1, p.cI, first[slot.ImportDecl0R1])
				break
			}

			p.call(slot.ImportDecl0R2, cU, p.cI)
		case slot.ImportDecl0R2: // ImportDecl : IMPORT OptStatic ∙QualifiedID OptDotStar SEMI

			if !p.testSelect(slot.ImportDecl0R2) {
				p.parseError(slot.ImportDecl0R2, p.cI, first[slot.ImportDecl0R2])
				break
			}

			p.call(slot.ImportDecl0R3, cU, p.cI)
		case slot.ImportDecl0R3: // ImportDecl : IMPORT OptStatic QualifiedID ∙OptDotStar SEMI

			if !p.testSelect(slot.ImportDecl0R3) {
				p.parseError(slot.ImportDecl0R3, p.cI, first[slot.ImportDecl0R3])
				break
			}

			p.call(slot.ImportDecl0R4, cU, p.cI)
		case slot.ImportDecl0R4: // ImportDecl : IMPORT OptStatic QualifiedID OptDotStar ∙SEMI

			if !p.testSelect(slot.ImportDecl0R4) {
				p.parseError(slot.ImportDecl0R4, p.cI, first[slot.ImportDecl0R4])
				break
			}

			p.call(slot.ImportDecl0R5, cU, p.cI)
		case slot.ImportDecl0R5: // ImportDecl : IMPORT OptStatic QualifiedID OptDotStar SEMI ∙

			if p.follow(symbols.NT_ImportDecl) {
				p.rtn(symbols.NT_ImportDecl, cU, p.cI)
			} else {
				p.parseError(slot.ImportDecl0R0, p.cI, followSets[symbols.NT_ImportDecl])
			}
		case slot.InnerCreator0R0: // InnerCreator : ∙ID ClsCreatorRest

			p.call(slot.InnerCreator0R1, cU, p.cI)
		case slot.InnerCreator0R1: // InnerCreator : ID ∙ClsCreatorRest

			if !p.testSelect(slot.InnerCreator0R1) {
				p.parseError(slot.InnerCreator0R1, p.cI, first[slot.InnerCreator0R1])
				break
			}

			p.call(slot.InnerCreator0R2, cU, p.cI)
		case slot.InnerCreator0R2: // InnerCreator : ID ClsCreatorRest ∙

			if p.follow(symbols.NT_InnerCreator) {
				p.rtn(symbols.NT_InnerCreator, cU, p.cI)
			} else {
				p.parseError(slot.InnerCreator0R0, p.cI, followSets[symbols.NT_InnerCreator])
			}
		case slot.IntegerLiteral0R0: // IntegerLiteral : ∙NumeralAlts optOneL

			p.call(slot.IntegerLiteral0R1, cU, p.cI)
		case slot.IntegerLiteral0R1: // IntegerLiteral : NumeralAlts ∙optOneL

			if !p.testSelect(slot.IntegerLiteral0R1) {
				p.parseError(slot.IntegerLiteral0R1, p.cI, first[slot.IntegerLiteral0R1])
				break
			}

			p.bsrSet.Add(slot.IntegerLiteral0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_IntegerLiteral) {
				p.rtn(symbols.NT_IntegerLiteral, cU, p.cI)
			} else {
				p.parseError(slot.IntegerLiteral0R0, p.cI, followSets[symbols.NT_IntegerLiteral])
			}
		case slot.Intf0R0: // Intf : ∙Intf notLorD

			p.bsrSet.Add(slot.Intf0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.Intf0R1) {
				p.parseError(slot.Intf0R1, p.cI, first[slot.Intf0R1])
				break
			}

			p.bsrSet.Add(slot.Intf0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Intf) {
				p.rtn(symbols.NT_Intf, cU, p.cI)
			} else {
				p.parseError(slot.Intf0R0, p.cI, followSets[symbols.NT_Intf])
			}
		case slot.IntfBdy0R0: // IntfBdy : ∙LWING RepInBodDecl0x RWING

			p.call(slot.IntfBdy0R1, cU, p.cI)
		case slot.IntfBdy0R1: // IntfBdy : LWING ∙RepInBodDecl0x RWING

			if !p.testSelect(slot.IntfBdy0R1) {
				p.parseError(slot.IntfBdy0R1, p.cI, first[slot.IntfBdy0R1])
				break
			}

			p.call(slot.IntfBdy0R2, cU, p.cI)
		case slot.IntfBdy0R2: // IntfBdy : LWING RepInBodDecl0x ∙RWING

			if !p.testSelect(slot.IntfBdy0R2) {
				p.parseError(slot.IntfBdy0R2, p.cI, first[slot.IntfBdy0R2])
				break
			}

			p.call(slot.IntfBdy0R3, cU, p.cI)
		case slot.IntfBdy0R3: // IntfBdy : LWING RepInBodDecl0x RWING ∙

			if p.follow(symbols.NT_IntfBdy) {
				p.rtn(symbols.NT_IntfBdy, cU, p.cI)
			} else {
				p.parseError(slot.IntfBdy0R0, p.cI, followSets[symbols.NT_IntfBdy])
			}
		case slot.IntfBdyDecl0R0: // IntfBdyDecl : ∙RepModif0 IntfMemDecl

			p.call(slot.IntfBdyDecl0R1, cU, p.cI)
		case slot.IntfBdyDecl0R1: // IntfBdyDecl : RepModif0 ∙IntfMemDecl

			if !p.testSelect(slot.IntfBdyDecl0R1) {
				p.parseError(slot.IntfBdyDecl0R1, p.cI, first[slot.IntfBdyDecl0R1])
				break
			}

			p.call(slot.IntfBdyDecl0R2, cU, p.cI)
		case slot.IntfBdyDecl0R2: // IntfBdyDecl : RepModif0 IntfMemDecl ∙

			if p.follow(symbols.NT_IntfBdyDecl) {
				p.rtn(symbols.NT_IntfBdyDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfBdyDecl0R0, p.cI, followSets[symbols.NT_IntfBdyDecl])
			}
		case slot.IntfBdyDecl1R0: // IntfBdyDecl : ∙SEMI

			p.call(slot.IntfBdyDecl1R1, cU, p.cI)
		case slot.IntfBdyDecl1R1: // IntfBdyDecl : SEMI ∙

			if p.follow(symbols.NT_IntfBdyDecl) {
				p.rtn(symbols.NT_IntfBdyDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfBdyDecl1R0, p.cI, followSets[symbols.NT_IntfBdyDecl])
			}
		case slot.IntfDecl0R0: // IntfDecl : ∙Intf ID OptExtendsClsLis IntfBdy

			p.bsrSet.Add(slot.IntfDecl0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.IntfDecl0R1) {
				p.parseError(slot.IntfDecl0R1, p.cI, first[slot.IntfDecl0R1])
				break
			}

			p.call(slot.IntfDecl0R2, cU, p.cI)
		case slot.IntfDecl0R2: // IntfDecl : Intf ID ∙OptExtendsClsLis IntfBdy

			if !p.testSelect(slot.IntfDecl0R2) {
				p.parseError(slot.IntfDecl0R2, p.cI, first[slot.IntfDecl0R2])
				break
			}

			p.call(slot.IntfDecl0R3, cU, p.cI)
		case slot.IntfDecl0R3: // IntfDecl : Intf ID OptExtendsClsLis ∙IntfBdy

			if !p.testSelect(slot.IntfDecl0R3) {
				p.parseError(slot.IntfDecl0R3, p.cI, first[slot.IntfDecl0R3])
				break
			}

			p.call(slot.IntfDecl0R4, cU, p.cI)
		case slot.IntfDecl0R4: // IntfDecl : Intf ID OptExtendsClsLis IntfBdy ∙

			if p.follow(symbols.NT_IntfDecl) {
				p.rtn(symbols.NT_IntfDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfDecl0R0, p.cI, followSets[symbols.NT_IntfDecl])
			}
		case slot.IntfMemDecl0R0: // IntfMemDecl : ∙IntfMethFieldDecl

			p.call(slot.IntfMemDecl0R1, cU, p.cI)
		case slot.IntfMemDecl0R1: // IntfMemDecl : IntfMethFieldDecl ∙

			if p.follow(symbols.NT_IntfMemDecl) {
				p.rtn(symbols.NT_IntfMemDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfMemDecl0R0, p.cI, followSets[symbols.NT_IntfMemDecl])
			}
		case slot.IntfMemDecl1R0: // IntfMemDecl : ∙VOID ID VoidIntfMethDeclRst

			p.call(slot.IntfMemDecl1R1, cU, p.cI)
		case slot.IntfMemDecl1R1: // IntfMemDecl : VOID ∙ID VoidIntfMethDeclRst

			if !p.testSelect(slot.IntfMemDecl1R1) {
				p.parseError(slot.IntfMemDecl1R1, p.cI, first[slot.IntfMemDecl1R1])
				break
			}

			p.call(slot.IntfMemDecl1R2, cU, p.cI)
		case slot.IntfMemDecl1R2: // IntfMemDecl : VOID ID ∙VoidIntfMethDeclRst

			if !p.testSelect(slot.IntfMemDecl1R2) {
				p.parseError(slot.IntfMemDecl1R2, p.cI, first[slot.IntfMemDecl1R2])
				break
			}

			p.call(slot.IntfMemDecl1R3, cU, p.cI)
		case slot.IntfMemDecl1R3: // IntfMemDecl : VOID ID VoidIntfMethDeclRst ∙

			if p.follow(symbols.NT_IntfMemDecl) {
				p.rtn(symbols.NT_IntfMemDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfMemDecl1R0, p.cI, followSets[symbols.NT_IntfMemDecl])
			}
		case slot.IntfMemDecl2R0: // IntfMemDecl : ∙IntfDecl

			p.call(slot.IntfMemDecl2R1, cU, p.cI)
		case slot.IntfMemDecl2R1: // IntfMemDecl : IntfDecl ∙

			if p.follow(symbols.NT_IntfMemDecl) {
				p.rtn(symbols.NT_IntfMemDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfMemDecl2R0, p.cI, followSets[symbols.NT_IntfMemDecl])
			}
		case slot.IntfMemDecl3R0: // IntfMemDecl : ∙ClsDecl

			p.call(slot.IntfMemDecl3R1, cU, p.cI)
		case slot.IntfMemDecl3R1: // IntfMemDecl : ClsDecl ∙

			if p.follow(symbols.NT_IntfMemDecl) {
				p.rtn(symbols.NT_IntfMemDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfMemDecl3R0, p.cI, followSets[symbols.NT_IntfMemDecl])
			}
		case slot.IntfMethDeclRest0R0: // IntfMethDeclRest : ∙FormalParams RepDim0x OptThrowClsTypLst SEMI

			p.call(slot.IntfMethDeclRest0R1, cU, p.cI)
		case slot.IntfMethDeclRest0R1: // IntfMethDeclRest : FormalParams ∙RepDim0x OptThrowClsTypLst SEMI

			if !p.testSelect(slot.IntfMethDeclRest0R1) {
				p.parseError(slot.IntfMethDeclRest0R1, p.cI, first[slot.IntfMethDeclRest0R1])
				break
			}

			p.call(slot.IntfMethDeclRest0R2, cU, p.cI)
		case slot.IntfMethDeclRest0R2: // IntfMethDeclRest : FormalParams RepDim0x ∙OptThrowClsTypLst SEMI

			if !p.testSelect(slot.IntfMethDeclRest0R2) {
				p.parseError(slot.IntfMethDeclRest0R2, p.cI, first[slot.IntfMethDeclRest0R2])
				break
			}

			p.call(slot.IntfMethDeclRest0R3, cU, p.cI)
		case slot.IntfMethDeclRest0R3: // IntfMethDeclRest : FormalParams RepDim0x OptThrowClsTypLst ∙SEMI

			if !p.testSelect(slot.IntfMethDeclRest0R3) {
				p.parseError(slot.IntfMethDeclRest0R3, p.cI, first[slot.IntfMethDeclRest0R3])
				break
			}

			p.call(slot.IntfMethDeclRest0R4, cU, p.cI)
		case slot.IntfMethDeclRest0R4: // IntfMethDeclRest : FormalParams RepDim0x OptThrowClsTypLst SEMI ∙

			if p.follow(symbols.NT_IntfMethDeclRest) {
				p.rtn(symbols.NT_IntfMethDeclRest, cU, p.cI)
			} else {
				p.parseError(slot.IntfMethDeclRest0R0, p.cI, followSets[symbols.NT_IntfMethDeclRest])
			}
		case slot.IntfMethFieldDecl0R0: // IntfMethFieldDecl : ∙Type ID IntfMethFieldRest

			p.call(slot.IntfMethFieldDecl0R1, cU, p.cI)
		case slot.IntfMethFieldDecl0R1: // IntfMethFieldDecl : Type ∙ID IntfMethFieldRest

			if !p.testSelect(slot.IntfMethFieldDecl0R1) {
				p.parseError(slot.IntfMethFieldDecl0R1, p.cI, first[slot.IntfMethFieldDecl0R1])
				break
			}

			p.call(slot.IntfMethFieldDecl0R2, cU, p.cI)
		case slot.IntfMethFieldDecl0R2: // IntfMethFieldDecl : Type ID ∙IntfMethFieldRest

			if !p.testSelect(slot.IntfMethFieldDecl0R2) {
				p.parseError(slot.IntfMethFieldDecl0R2, p.cI, first[slot.IntfMethFieldDecl0R2])
				break
			}

			p.call(slot.IntfMethFieldDecl0R3, cU, p.cI)
		case slot.IntfMethFieldDecl0R3: // IntfMethFieldDecl : Type ID IntfMethFieldRest ∙

			if p.follow(symbols.NT_IntfMethFieldDecl) {
				p.rtn(symbols.NT_IntfMethFieldDecl, cU, p.cI)
			} else {
				p.parseError(slot.IntfMethFieldDecl0R0, p.cI, followSets[symbols.NT_IntfMethFieldDecl])
			}
		case slot.IntfMethFieldRest0R0: // IntfMethFieldRest : ∙ConstDeclsRest SEMI

			p.call(slot.IntfMethFieldRest0R1, cU, p.cI)
		case slot.IntfMethFieldRest0R1: // IntfMethFieldRest : ConstDeclsRest ∙SEMI

			if !p.testSelect(slot.IntfMethFieldRest0R1) {
				p.parseError(slot.IntfMethFieldRest0R1, p.cI, first[slot.IntfMethFieldRest0R1])
				break
			}

			p.call(slot.IntfMethFieldRest0R2, cU, p.cI)
		case slot.IntfMethFieldRest0R2: // IntfMethFieldRest : ConstDeclsRest SEMI ∙

			if p.follow(symbols.NT_IntfMethFieldRest) {
				p.rtn(symbols.NT_IntfMethFieldRest, cU, p.cI)
			} else {
				p.parseError(slot.IntfMethFieldRest0R0, p.cI, followSets[symbols.NT_IntfMethFieldRest])
			}
		case slot.IntfMethFieldRest1R0: // IntfMethFieldRest : ∙IntfMethDeclRest

			p.call(slot.IntfMethFieldRest1R1, cU, p.cI)
		case slot.IntfMethFieldRest1R1: // IntfMethFieldRest : IntfMethDeclRest ∙

			if p.follow(symbols.NT_IntfMethFieldRest) {
				p.rtn(symbols.NT_IntfMethFieldRest, cU, p.cI)
			} else {
				p.parseError(slot.IntfMethFieldRest1R0, p.cI, followSets[symbols.NT_IntfMethFieldRest])
			}
		case slot.LBRK0R0: // LBRK : ∙[ WS

			p.bsrSet.Add(slot.LBRK0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LBRK0R1) {
				p.parseError(slot.LBRK0R1, p.cI, first[slot.LBRK0R1])
				break
			}

			p.call(slot.LBRK0R2, cU, p.cI)
		case slot.LBRK0R2: // LBRK : [ WS ∙

			if p.follow(symbols.NT_LBRK) {
				p.rtn(symbols.NT_LBRK, cU, p.cI)
			} else {
				p.parseError(slot.LBRK0R0, p.cI, followSets[symbols.NT_LBRK])
			}
		case slot.LE0R0: // LE : ∙<= WS

			p.bsrSet.Add(slot.LE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LE0R1) {
				p.parseError(slot.LE0R1, p.cI, first[slot.LE0R1])
				break
			}

			p.call(slot.LE0R2, cU, p.cI)
		case slot.LE0R2: // LE : <= WS ∙

			if p.follow(symbols.NT_LE) {
				p.rtn(symbols.NT_LE, cU, p.cI)
			} else {
				p.parseError(slot.LE0R0, p.cI, followSets[symbols.NT_LE])
			}
		case slot.LPAR0R0: // LPAR : ∙( WS

			p.bsrSet.Add(slot.LPAR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LPAR0R1) {
				p.parseError(slot.LPAR0R1, p.cI, first[slot.LPAR0R1])
				break
			}

			p.call(slot.LPAR0R2, cU, p.cI)
		case slot.LPAR0R2: // LPAR : ( WS ∙

			if p.follow(symbols.NT_LPAR) {
				p.rtn(symbols.NT_LPAR, cU, p.cI)
			} else {
				p.parseError(slot.LPAR0R0, p.cI, followSets[symbols.NT_LPAR])
			}
		case slot.LT0R0: // LT : ∙< notEqCar2 WS

			p.bsrSet.Add(slot.LT0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LT0R1) {
				p.parseError(slot.LT0R1, p.cI, first[slot.LT0R1])
				break
			}

			p.bsrSet.Add(slot.LT0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LT0R2) {
				p.parseError(slot.LT0R2, p.cI, first[slot.LT0R2])
				break
			}

			p.call(slot.LT0R3, cU, p.cI)
		case slot.LT0R3: // LT : < notEqCar2 WS ∙

			if p.follow(symbols.NT_LT) {
				p.rtn(symbols.NT_LT, cU, p.cI)
			} else {
				p.parseError(slot.LT0R0, p.cI, followSets[symbols.NT_LT])
			}
		case slot.LWING0R0: // LWING : ∙{ WS

			p.bsrSet.Add(slot.LWING0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LWING0R1) {
				p.parseError(slot.LWING0R1, p.cI, first[slot.LWING0R1])
				break
			}

			p.call(slot.LWING0R2, cU, p.cI)
		case slot.LWING0R2: // LWING : { WS ∙

			if p.follow(symbols.NT_LWING) {
				p.rtn(symbols.NT_LWING, cU, p.cI)
			} else {
				p.parseError(slot.LWING0R0, p.cI, followSets[symbols.NT_LWING])
			}
		case slot.Letter0R0: // Letter : ∙let

			p.bsrSet.Add(slot.Letter0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Letter) {
				p.rtn(symbols.NT_Letter, cU, p.cI)
			} else {
				p.parseError(slot.Letter0R0, p.cI, followSets[symbols.NT_Letter])
			}
		case slot.Letter1R0: // Letter : ∙WS

			p.call(slot.Letter1R1, cU, p.cI)
		case slot.Letter1R1: // Letter : WS ∙

			if p.follow(symbols.NT_Letter) {
				p.rtn(symbols.NT_Letter, cU, p.cI)
			} else {
				p.parseError(slot.Letter1R0, p.cI, followSets[symbols.NT_Letter])
			}
		case slot.LetterLorD0R0: // LetterLorD : ∙Letter RepLorD0x WS

			p.call(slot.LetterLorD0R1, cU, p.cI)
		case slot.LetterLorD0R1: // LetterLorD : Letter ∙RepLorD0x WS

			if !p.testSelect(slot.LetterLorD0R1) {
				p.parseError(slot.LetterLorD0R1, p.cI, first[slot.LetterLorD0R1])
				break
			}

			p.call(slot.LetterLorD0R2, cU, p.cI)
		case slot.LetterLorD0R2: // LetterLorD : Letter RepLorD0x ∙WS

			if !p.testSelect(slot.LetterLorD0R2) {
				p.parseError(slot.LetterLorD0R2, p.cI, first[slot.LetterLorD0R2])
				break
			}

			p.call(slot.LetterLorD0R3, cU, p.cI)
		case slot.LetterLorD0R3: // LetterLorD : Letter RepLorD0x WS ∙

			if p.follow(symbols.NT_LetterLorD) {
				p.rtn(symbols.NT_LetterLorD, cU, p.cI)
			} else {
				p.parseError(slot.LetterLorD0R0, p.cI, followSets[symbols.NT_LetterLorD])
			}
		case slot.LitAlts0R0: // LitAlts : ∙FloatLiteral

			p.call(slot.LitAlts0R1, cU, p.cI)
		case slot.LitAlts0R1: // LitAlts : FloatLiteral ∙

			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts0R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts1R0: // LitAlts : ∙IntegerLiteral

			p.call(slot.LitAlts1R1, cU, p.cI)
		case slot.LitAlts1R1: // LitAlts : IntegerLiteral ∙

			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts1R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts2R0: // LitAlts : ∙CharLiteral

			p.call(slot.LitAlts2R1, cU, p.cI)
		case slot.LitAlts2R1: // LitAlts : CharLiteral ∙

			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts2R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts3R0: // LitAlts : ∙StringLiteral

			p.call(slot.LitAlts3R1, cU, p.cI)
		case slot.LitAlts3R1: // LitAlts : StringLiteral ∙

			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts3R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts4R0: // LitAlts : ∙true notLorD

			p.bsrSet.Add(slot.LitAlts4R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LitAlts4R1) {
				p.parseError(slot.LitAlts4R1, p.cI, first[slot.LitAlts4R1])
				break
			}

			p.bsrSet.Add(slot.LitAlts4R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts4R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts5R0: // LitAlts : ∙false notLorD

			p.bsrSet.Add(slot.LitAlts5R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LitAlts5R1) {
				p.parseError(slot.LitAlts5R1, p.cI, first[slot.LitAlts5R1])
				break
			}

			p.bsrSet.Add(slot.LitAlts5R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts5R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.LitAlts6R0: // LitAlts : ∙null notLorD

			p.bsrSet.Add(slot.LitAlts6R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LitAlts6R1) {
				p.parseError(slot.LitAlts6R1, p.cI, first[slot.LitAlts6R1])
				break
			}

			p.bsrSet.Add(slot.LitAlts6R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LitAlts) {
				p.rtn(symbols.NT_LitAlts, cU, p.cI)
			} else {
				p.parseError(slot.LitAlts6R0, p.cI, followSets[symbols.NT_LitAlts])
			}
		case slot.Literal0R0: // Literal : ∙LitAlts WS

			p.call(slot.Literal0R1, cU, p.cI)
		case slot.Literal0R1: // Literal : LitAlts ∙WS

			if !p.testSelect(slot.Literal0R1) {
				p.parseError(slot.Literal0R1, p.cI, first[slot.Literal0R1])
				break
			}

			p.call(slot.Literal0R2, cU, p.cI)
		case slot.Literal0R2: // Literal : LitAlts WS ∙

			if p.follow(symbols.NT_Literal) {
				p.rtn(symbols.NT_Literal, cU, p.cI)
			} else {
				p.parseError(slot.Literal0R0, p.cI, followSets[symbols.NT_Literal])
			}
		case slot.LocalVarDeclStmt0R0: // LocalVarDeclStmt : ∙OptFinType VarDecl RepComVDecl0x SEMI

			p.call(slot.LocalVarDeclStmt0R1, cU, p.cI)
		case slot.LocalVarDeclStmt0R1: // LocalVarDeclStmt : OptFinType ∙VarDecl RepComVDecl0x SEMI

			if !p.testSelect(slot.LocalVarDeclStmt0R1) {
				p.parseError(slot.LocalVarDeclStmt0R1, p.cI, first[slot.LocalVarDeclStmt0R1])
				break
			}

			p.call(slot.LocalVarDeclStmt0R2, cU, p.cI)
		case slot.LocalVarDeclStmt0R2: // LocalVarDeclStmt : OptFinType VarDecl ∙RepComVDecl0x SEMI

			if !p.testSelect(slot.LocalVarDeclStmt0R2) {
				p.parseError(slot.LocalVarDeclStmt0R2, p.cI, first[slot.LocalVarDeclStmt0R2])
				break
			}

			p.call(slot.LocalVarDeclStmt0R3, cU, p.cI)
		case slot.LocalVarDeclStmt0R3: // LocalVarDeclStmt : OptFinType VarDecl RepComVDecl0x ∙SEMI

			if !p.testSelect(slot.LocalVarDeclStmt0R3) {
				p.parseError(slot.LocalVarDeclStmt0R3, p.cI, first[slot.LocalVarDeclStmt0R3])
				break
			}

			p.call(slot.LocalVarDeclStmt0R4, cU, p.cI)
		case slot.LocalVarDeclStmt0R4: // LocalVarDeclStmt : OptFinType VarDecl RepComVDecl0x SEMI ∙

			if p.follow(symbols.NT_LocalVarDeclStmt) {
				p.rtn(symbols.NT_LocalVarDeclStmt, cU, p.cI)
			} else {
				p.parseError(slot.LocalVarDeclStmt0R0, p.cI, followSets[symbols.NT_LocalVarDeclStmt])
			}
		case slot.LorD0R0: // LorD : ∙Letter

			p.call(slot.LorD0R1, cU, p.cI)
		case slot.LorD0R1: // LorD : Letter ∙

			if p.follow(symbols.NT_LorD) {
				p.rtn(symbols.NT_LorD, cU, p.cI)
			} else {
				p.parseError(slot.LorD0R0, p.cI, followSets[symbols.NT_LorD])
			}
		case slot.LorD1R0: // LorD : ∙num

			p.bsrSet.Add(slot.LorD1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_LorD) {
				p.rtn(symbols.NT_LorD, cU, p.cI)
			} else {
				p.parseError(slot.LorD1R0, p.cI, followSets[symbols.NT_LorD])
			}
		case slot.MINUS0R0: // MINUS : ∙- notEqSlDash WS

			p.bsrSet.Add(slot.MINUS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MINUS0R1) {
				p.parseError(slot.MINUS0R1, p.cI, first[slot.MINUS0R1])
				break
			}

			p.bsrSet.Add(slot.MINUS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MINUS0R2) {
				p.parseError(slot.MINUS0R2, p.cI, first[slot.MINUS0R2])
				break
			}

			p.call(slot.MINUS0R3, cU, p.cI)
		case slot.MINUS0R3: // MINUS : - notEqSlDash WS ∙

			if p.follow(symbols.NT_MINUS) {
				p.rtn(symbols.NT_MINUS, cU, p.cI)
			} else {
				p.parseError(slot.MINUS0R0, p.cI, followSets[symbols.NT_MINUS])
			}
		case slot.MINUS_EQU0R0: // MINUS_EQU : ∙-= WS

			p.bsrSet.Add(slot.MINUS_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MINUS_EQU0R1) {
				p.parseError(slot.MINUS_EQU0R1, p.cI, first[slot.MINUS_EQU0R1])
				break
			}

			p.call(slot.MINUS_EQU0R2, cU, p.cI)
		case slot.MINUS_EQU0R2: // MINUS_EQU : -= WS ∙

			if p.follow(symbols.NT_MINUS_EQU) {
				p.rtn(symbols.NT_MINUS_EQU, cU, p.cI)
			} else {
				p.parseError(slot.MINUS_EQU0R0, p.cI, followSets[symbols.NT_MINUS_EQU])
			}
		case slot.MOD0R0: // MOD : ∙% nEq WS

			p.bsrSet.Add(slot.MOD0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MOD0R1) {
				p.parseError(slot.MOD0R1, p.cI, first[slot.MOD0R1])
				break
			}

			p.bsrSet.Add(slot.MOD0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MOD0R2) {
				p.parseError(slot.MOD0R2, p.cI, first[slot.MOD0R2])
				break
			}

			p.call(slot.MOD0R3, cU, p.cI)
		case slot.MOD0R3: // MOD : % nEq WS ∙

			if p.follow(symbols.NT_MOD) {
				p.rtn(symbols.NT_MOD, cU, p.cI)
			} else {
				p.parseError(slot.MOD0R0, p.cI, followSets[symbols.NT_MOD])
			}
		case slot.MOD_EQU0R0: // MOD_EQU : ∙%= WS

			p.bsrSet.Add(slot.MOD_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.MOD_EQU0R1) {
				p.parseError(slot.MOD_EQU0R1, p.cI, first[slot.MOD_EQU0R1])
				break
			}

			p.call(slot.MOD_EQU0R2, cU, p.cI)
		case slot.MOD_EQU0R2: // MOD_EQU : %= WS ∙

			if p.follow(symbols.NT_MOD_EQU) {
				p.rtn(symbols.NT_MOD_EQU, cU, p.cI)
			} else {
				p.parseError(slot.MOD_EQU0R0, p.cI, followSets[symbols.NT_MOD_EQU])
			}
		case slot.MemAlts0R0: // MemAlts : ∙SEMI

			p.call(slot.MemAlts0R1, cU, p.cI)
		case slot.MemAlts0R1: // MemAlts : SEMI ∙

			if p.follow(symbols.NT_MemAlts) {
				p.rtn(symbols.NT_MemAlts, cU, p.cI)
			} else {
				p.parseError(slot.MemAlts0R0, p.cI, followSets[symbols.NT_MemAlts])
			}
		case slot.MemAlts1R0: // MemAlts : ∙Block

			p.call(slot.MemAlts1R1, cU, p.cI)
		case slot.MemAlts1R1: // MemAlts : Block ∙

			if p.follow(symbols.NT_MemAlts) {
				p.rtn(symbols.NT_MemAlts, cU, p.cI)
			} else {
				p.parseError(slot.MemAlts1R0, p.cI, followSets[symbols.NT_MemAlts])
			}
		case slot.MemDecl0R0: // MemDecl : ∙Type ID FormalParams RepDim0x OptThrowClsTypLst MemAlts

			p.call(slot.MemDecl0R1, cU, p.cI)
		case slot.MemDecl0R1: // MemDecl : Type ∙ID FormalParams RepDim0x OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl0R1) {
				p.parseError(slot.MemDecl0R1, p.cI, first[slot.MemDecl0R1])
				break
			}

			p.call(slot.MemDecl0R2, cU, p.cI)
		case slot.MemDecl0R2: // MemDecl : Type ID ∙FormalParams RepDim0x OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl0R2) {
				p.parseError(slot.MemDecl0R2, p.cI, first[slot.MemDecl0R2])
				break
			}

			p.call(slot.MemDecl0R3, cU, p.cI)
		case slot.MemDecl0R3: // MemDecl : Type ID FormalParams ∙RepDim0x OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl0R3) {
				p.parseError(slot.MemDecl0R3, p.cI, first[slot.MemDecl0R3])
				break
			}

			p.call(slot.MemDecl0R4, cU, p.cI)
		case slot.MemDecl0R4: // MemDecl : Type ID FormalParams RepDim0x ∙OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl0R4) {
				p.parseError(slot.MemDecl0R4, p.cI, first[slot.MemDecl0R4])
				break
			}

			p.call(slot.MemDecl0R5, cU, p.cI)
		case slot.MemDecl0R5: // MemDecl : Type ID FormalParams RepDim0x OptThrowClsTypLst ∙MemAlts

			if !p.testSelect(slot.MemDecl0R5) {
				p.parseError(slot.MemDecl0R5, p.cI, first[slot.MemDecl0R5])
				break
			}

			p.call(slot.MemDecl0R6, cU, p.cI)
		case slot.MemDecl0R6: // MemDecl : Type ID FormalParams RepDim0x OptThrowClsTypLst MemAlts ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl0R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.MemDecl1R0: // MemDecl : ∙VOID ID FormalParams OptThrowClsTypLst MemAlts

			p.call(slot.MemDecl1R1, cU, p.cI)
		case slot.MemDecl1R1: // MemDecl : VOID ∙ID FormalParams OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl1R1) {
				p.parseError(slot.MemDecl1R1, p.cI, first[slot.MemDecl1R1])
				break
			}

			p.call(slot.MemDecl1R2, cU, p.cI)
		case slot.MemDecl1R2: // MemDecl : VOID ID ∙FormalParams OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl1R2) {
				p.parseError(slot.MemDecl1R2, p.cI, first[slot.MemDecl1R2])
				break
			}

			p.call(slot.MemDecl1R3, cU, p.cI)
		case slot.MemDecl1R3: // MemDecl : VOID ID FormalParams ∙OptThrowClsTypLst MemAlts

			if !p.testSelect(slot.MemDecl1R3) {
				p.parseError(slot.MemDecl1R3, p.cI, first[slot.MemDecl1R3])
				break
			}

			p.call(slot.MemDecl1R4, cU, p.cI)
		case slot.MemDecl1R4: // MemDecl : VOID ID FormalParams OptThrowClsTypLst ∙MemAlts

			if !p.testSelect(slot.MemDecl1R4) {
				p.parseError(slot.MemDecl1R4, p.cI, first[slot.MemDecl1R4])
				break
			}

			p.call(slot.MemDecl1R5, cU, p.cI)
		case slot.MemDecl1R5: // MemDecl : VOID ID FormalParams OptThrowClsTypLst MemAlts ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl1R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.MemDecl2R0: // MemDecl : ∙ID FormalParams OptThrowClsTypLst Block

			p.call(slot.MemDecl2R1, cU, p.cI)
		case slot.MemDecl2R1: // MemDecl : ID ∙FormalParams OptThrowClsTypLst Block

			if !p.testSelect(slot.MemDecl2R1) {
				p.parseError(slot.MemDecl2R1, p.cI, first[slot.MemDecl2R1])
				break
			}

			p.call(slot.MemDecl2R2, cU, p.cI)
		case slot.MemDecl2R2: // MemDecl : ID FormalParams ∙OptThrowClsTypLst Block

			if !p.testSelect(slot.MemDecl2R2) {
				p.parseError(slot.MemDecl2R2, p.cI, first[slot.MemDecl2R2])
				break
			}

			p.call(slot.MemDecl2R3, cU, p.cI)
		case slot.MemDecl2R3: // MemDecl : ID FormalParams OptThrowClsTypLst ∙Block

			if !p.testSelect(slot.MemDecl2R3) {
				p.parseError(slot.MemDecl2R3, p.cI, first[slot.MemDecl2R3])
				break
			}

			p.call(slot.MemDecl2R4, cU, p.cI)
		case slot.MemDecl2R4: // MemDecl : ID FormalParams OptThrowClsTypLst Block ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl2R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.MemDecl3R0: // MemDecl : ∙IntfDecl

			p.call(slot.MemDecl3R1, cU, p.cI)
		case slot.MemDecl3R1: // MemDecl : IntfDecl ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl3R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.MemDecl4R0: // MemDecl : ∙ClsDecl

			p.call(slot.MemDecl4R1, cU, p.cI)
		case slot.MemDecl4R1: // MemDecl : ClsDecl ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl4R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.MemDecl5R0: // MemDecl : ∙Type VarDecl RepComVDecl0x

			p.call(slot.MemDecl5R1, cU, p.cI)
		case slot.MemDecl5R1: // MemDecl : Type ∙VarDecl RepComVDecl0x

			if !p.testSelect(slot.MemDecl5R1) {
				p.parseError(slot.MemDecl5R1, p.cI, first[slot.MemDecl5R1])
				break
			}

			p.call(slot.MemDecl5R2, cU, p.cI)
		case slot.MemDecl5R2: // MemDecl : Type VarDecl ∙RepComVDecl0x

			if !p.testSelect(slot.MemDecl5R2) {
				p.parseError(slot.MemDecl5R2, p.cI, first[slot.MemDecl5R2])
				break
			}

			p.call(slot.MemDecl5R3, cU, p.cI)
		case slot.MemDecl5R3: // MemDecl : Type VarDecl RepComVDecl0x ∙

			if p.follow(symbols.NT_MemDecl) {
				p.rtn(symbols.NT_MemDecl, cU, p.cI)
			} else {
				p.parseError(slot.MemDecl5R0, p.cI, followSets[symbols.NT_MemDecl])
			}
		case slot.Modifier0R0: // Modifier : ∙Modifs notLorD

			p.call(slot.Modifier0R1, cU, p.cI)
		case slot.Modifier0R1: // Modifier : Modifs ∙notLorD

			if !p.testSelect(slot.Modifier0R1) {
				p.parseError(slot.Modifier0R1, p.cI, first[slot.Modifier0R1])
				break
			}

			p.bsrSet.Add(slot.Modifier0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifier) {
				p.rtn(symbols.NT_Modifier, cU, p.cI)
			} else {
				p.parseError(slot.Modifier0R0, p.cI, followSets[symbols.NT_Modifier])
			}
		case slot.Modifs0R0: // Modifs : ∙public

			p.bsrSet.Add(slot.Modifs0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs0R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs1R0: // Modifs : ∙protected

			p.bsrSet.Add(slot.Modifs1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs1R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs2R0: // Modifs : ∙private

			p.bsrSet.Add(slot.Modifs2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs2R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs3R0: // Modifs : ∙static

			p.bsrSet.Add(slot.Modifs3R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs3R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs4R0: // Modifs : ∙abstract

			p.bsrSet.Add(slot.Modifs4R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs4R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs5R0: // Modifs : ∙final

			p.bsrSet.Add(slot.Modifs5R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs5R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs6R0: // Modifs : ∙native

			p.bsrSet.Add(slot.Modifs6R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs6R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs7R0: // Modifs : ∙synchronized

			p.bsrSet.Add(slot.Modifs7R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs7R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs8R0: // Modifs : ∙transient

			p.bsrSet.Add(slot.Modifs8R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs8R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs9R0: // Modifs : ∙volatile

			p.bsrSet.Add(slot.Modifs9R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs9R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.Modifs10R0: // Modifs : ∙strictfp

			p.bsrSet.Add(slot.Modifs10R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Modifs) {
				p.rtn(symbols.NT_Modifs, cU, p.cI)
			} else {
				p.parseError(slot.Modifs10R0, p.cI, followSets[symbols.NT_Modifs])
			}
		case slot.MultExpr0R0: // MultExpr : ∙UnaryExpr RepSDMUExpr0x

			p.call(slot.MultExpr0R1, cU, p.cI)
		case slot.MultExpr0R1: // MultExpr : UnaryExpr ∙RepSDMUExpr0x

			if !p.testSelect(slot.MultExpr0R1) {
				p.parseError(slot.MultExpr0R1, p.cI, first[slot.MultExpr0R1])
				break
			}

			p.call(slot.MultExpr0R2, cU, p.cI)
		case slot.MultExpr0R2: // MultExpr : UnaryExpr RepSDMUExpr0x ∙

			if p.follow(symbols.NT_MultExpr) {
				p.rtn(symbols.NT_MultExpr, cU, p.cI)
			} else {
				p.parseError(slot.MultExpr0R0, p.cI, followSets[symbols.NT_MultExpr])
			}
		case slot.NEW0R0: // NEW : ∙new notLorD

			p.bsrSet.Add(slot.NEW0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NEW0R1) {
				p.parseError(slot.NEW0R1, p.cI, first[slot.NEW0R1])
				break
			}

			p.bsrSet.Add(slot.NEW0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NEW) {
				p.rtn(symbols.NT_NEW, cU, p.cI)
			} else {
				p.parseError(slot.NEW0R0, p.cI, followSets[symbols.NT_NEW])
			}
		case slot.NOT_EQUAL0R0: // NOT_EQUAL : ∙!= WS

			p.bsrSet.Add(slot.NOT_EQUAL0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NOT_EQUAL0R1) {
				p.parseError(slot.NOT_EQUAL0R1, p.cI, first[slot.NOT_EQUAL0R1])
				break
			}

			p.call(slot.NOT_EQUAL0R2, cU, p.cI)
		case slot.NOT_EQUAL0R2: // NOT_EQUAL : != WS ∙

			if p.follow(symbols.NT_NOT_EQUAL) {
				p.rtn(symbols.NT_NOT_EQUAL, cU, p.cI)
			} else {
				p.parseError(slot.NOT_EQUAL0R0, p.cI, followSets[symbols.NT_NOT_EQUAL])
			}
		case slot.NumeralAlts0R0: // NumeralAlts : ∙HexNumeral

			p.call(slot.NumeralAlts0R1, cU, p.cI)
		case slot.NumeralAlts0R1: // NumeralAlts : HexNumeral ∙

			if p.follow(symbols.NT_NumeralAlts) {
				p.rtn(symbols.NT_NumeralAlts, cU, p.cI)
			} else {
				p.parseError(slot.NumeralAlts0R0, p.cI, followSets[symbols.NT_NumeralAlts])
			}
		case slot.NumeralAlts1R0: // NumeralAlts : ∙octalNumeral

			p.bsrSet.Add(slot.NumeralAlts1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_NumeralAlts) {
				p.rtn(symbols.NT_NumeralAlts, cU, p.cI)
			} else {
				p.parseError(slot.NumeralAlts1R0, p.cI, followSets[symbols.NT_NumeralAlts])
			}
		case slot.NumeralAlts2R0: // NumeralAlts : ∙DecimalNumeral

			p.call(slot.NumeralAlts2R1, cU, p.cI)
		case slot.NumeralAlts2R1: // NumeralAlts : DecimalNumeral ∙

			if p.follow(symbols.NT_NumeralAlts) {
				p.rtn(symbols.NT_NumeralAlts, cU, p.cI)
			} else {
				p.parseError(slot.NumeralAlts2R0, p.cI, followSets[symbols.NT_NumeralAlts])
			}
		case slot.OR0R0: // OR : ∙| notEqPipe WS

			p.bsrSet.Add(slot.OR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.OR0R1) {
				p.parseError(slot.OR0R1, p.cI, first[slot.OR0R1])
				break
			}

			p.bsrSet.Add(slot.OR0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.OR0R2) {
				p.parseError(slot.OR0R2, p.cI, first[slot.OR0R2])
				break
			}

			p.call(slot.OR0R3, cU, p.cI)
		case slot.OR0R3: // OR : | notEqPipe WS ∙

			if p.follow(symbols.NT_OR) {
				p.rtn(symbols.NT_OR, cU, p.cI)
			} else {
				p.parseError(slot.OR0R0, p.cI, followSets[symbols.NT_OR])
			}
		case slot.ORXOR0R0: // ORXOR : ∙OR XORExpr

			p.call(slot.ORXOR0R1, cU, p.cI)
		case slot.ORXOR0R1: // ORXOR : OR ∙XORExpr

			if !p.testSelect(slot.ORXOR0R1) {
				p.parseError(slot.ORXOR0R1, p.cI, first[slot.ORXOR0R1])
				break
			}

			p.call(slot.ORXOR0R2, cU, p.cI)
		case slot.ORXOR0R2: // ORXOR : OR XORExpr ∙

			if p.follow(symbols.NT_ORXOR) {
				p.rtn(symbols.NT_ORXOR, cU, p.cI)
			} else {
				p.parseError(slot.ORXOR0R0, p.cI, followSets[symbols.NT_ORXOR])
			}
		case slot.OR_EQU0R0: // OR_EQU : ∙|= WS

			p.bsrSet.Add(slot.OR_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.OR_EQU0R1) {
				p.parseError(slot.OR_EQU0R1, p.cI, first[slot.OR_EQU0R1])
				break
			}

			p.call(slot.OR_EQU0R2, cU, p.cI)
		case slot.OR_EQU0R2: // OR_EQU : |= WS ∙

			if p.follow(symbols.NT_OR_EQU) {
				p.rtn(symbols.NT_OR_EQU, cU, p.cI)
			} else {
				p.parseError(slot.OR_EQU0R0, p.cI, followSets[symbols.NT_OR_EQU])
			}
		case slot.OR_OR0R0: // OR_OR : ∙|| WS

			p.bsrSet.Add(slot.OR_OR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.OR_OR0R1) {
				p.parseError(slot.OR_OR0R1, p.cI, first[slot.OR_OR0R1])
				break
			}

			p.call(slot.OR_OR0R2, cU, p.cI)
		case slot.OR_OR0R2: // OR_OR : || WS ∙

			if p.follow(symbols.NT_OR_OR) {
				p.rtn(symbols.NT_OR_OR, cU, p.cI)
			} else {
				p.parseError(slot.OR_OR0R0, p.cI, followSets[symbols.NT_OR_OR])
			}
		case slot.OctalEscape0R0: // OctalEscape : ∙int03Two07

			p.bsrSet.Add(slot.OctalEscape0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OctalEscape) {
				p.rtn(symbols.NT_OctalEscape, cU, p.cI)
			} else {
				p.parseError(slot.OctalEscape0R0, p.cI, followSets[symbols.NT_OctalEscape])
			}
		case slot.OctalEscape1R0: // OctalEscape : ∙two07

			p.bsrSet.Add(slot.OctalEscape1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OctalEscape) {
				p.rtn(symbols.NT_OctalEscape, cU, p.cI)
			} else {
				p.parseError(slot.OctalEscape1R0, p.cI, followSets[symbols.NT_OctalEscape])
			}
		case slot.OctalEscape2R0: // OctalEscape : ∙int07

			p.bsrSet.Add(slot.OctalEscape2R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OctalEscape) {
				p.rtn(symbols.NT_OctalEscape, cU, p.cI)
			} else {
				p.parseError(slot.OctalEscape2R0, p.cI, followSets[symbols.NT_OctalEscape])
			}
		case slot.OptArgs0R0: // OptArgs : ∙Arguments

			p.call(slot.OptArgs0R1, cU, p.cI)
		case slot.OptArgs0R1: // OptArgs : Arguments ∙

			if p.follow(symbols.NT_OptArgs) {
				p.rtn(symbols.NT_OptArgs, cU, p.cI)
			} else {
				p.parseError(slot.OptArgs0R0, p.cI, followSets[symbols.NT_OptArgs])
			}
		case slot.OptArgs1R0: // OptArgs : ∙
			p.bsrSet.AddEmpty(slot.OptArgs1R0, p.cI)

			if p.follow(symbols.NT_OptArgs) {
				p.rtn(symbols.NT_OptArgs, cU, p.cI)
			} else {
				p.parseError(slot.OptArgs1R0, p.cI, followSets[symbols.NT_OptArgs])
			}
		case slot.OptClsBdy0R0: // OptClsBdy : ∙ClsBdy

			p.call(slot.OptClsBdy0R1, cU, p.cI)
		case slot.OptClsBdy0R1: // OptClsBdy : ClsBdy ∙

			if p.follow(symbols.NT_OptClsBdy) {
				p.rtn(symbols.NT_OptClsBdy, cU, p.cI)
			} else {
				p.parseError(slot.OptClsBdy0R0, p.cI, followSets[symbols.NT_OptClsBdy])
			}
		case slot.OptClsBdy1R0: // OptClsBdy : ∙
			p.bsrSet.AddEmpty(slot.OptClsBdy1R0, p.cI)

			if p.follow(symbols.NT_OptClsBdy) {
				p.rtn(symbols.NT_OptClsBdy, cU, p.cI)
			} else {
				p.parseError(slot.OptClsBdy1R0, p.cI, followSets[symbols.NT_OptClsBdy])
			}
		case slot.OptColExpr0R0: // OptColExpr : ∙COLON Expr

			p.call(slot.OptColExpr0R1, cU, p.cI)
		case slot.OptColExpr0R1: // OptColExpr : COLON ∙Expr

			if !p.testSelect(slot.OptColExpr0R1) {
				p.parseError(slot.OptColExpr0R1, p.cI, first[slot.OptColExpr0R1])
				break
			}

			p.call(slot.OptColExpr0R2, cU, p.cI)
		case slot.OptColExpr0R2: // OptColExpr : COLON Expr ∙

			if p.follow(symbols.NT_OptColExpr) {
				p.rtn(symbols.NT_OptColExpr, cU, p.cI)
			} else {
				p.parseError(slot.OptColExpr0R0, p.cI, followSets[symbols.NT_OptColExpr])
			}
		case slot.OptColExpr1R0: // OptColExpr : ∙
			p.bsrSet.AddEmpty(slot.OptColExpr1R0, p.cI)

			if p.follow(symbols.NT_OptColExpr) {
				p.rtn(symbols.NT_OptColExpr, cU, p.cI)
			} else {
				p.parseError(slot.OptColExpr1R0, p.cI, followSets[symbols.NT_OptColExpr])
			}
		case slot.OptCom0R0: // OptCom : ∙COMMA

			p.call(slot.OptCom0R1, cU, p.cI)
		case slot.OptCom0R1: // OptCom : COMMA ∙

			if p.follow(symbols.NT_OptCom) {
				p.rtn(symbols.NT_OptCom, cU, p.cI)
			} else {
				p.parseError(slot.OptCom0R0, p.cI, followSets[symbols.NT_OptCom])
			}
		case slot.OptCom1R0: // OptCom : ∙
			p.bsrSet.AddEmpty(slot.OptCom1R0, p.cI)

			if p.follow(symbols.NT_OptCom) {
				p.rtn(symbols.NT_OptCom, cU, p.cI)
			} else {
				p.parseError(slot.OptCom1R0, p.cI, followSets[symbols.NT_OptCom])
			}
		case slot.OptComFormPDecl0R0: // OptComFormPDecl : ∙COMMA FormalParamDecls

			p.call(slot.OptComFormPDecl0R1, cU, p.cI)
		case slot.OptComFormPDecl0R1: // OptComFormPDecl : COMMA ∙FormalParamDecls

			if !p.testSelect(slot.OptComFormPDecl0R1) {
				p.parseError(slot.OptComFormPDecl0R1, p.cI, first[slot.OptComFormPDecl0R1])
				break
			}

			p.call(slot.OptComFormPDecl0R2, cU, p.cI)
		case slot.OptComFormPDecl0R2: // OptComFormPDecl : COMMA FormalParamDecls ∙

			if p.follow(symbols.NT_OptComFormPDecl) {
				p.rtn(symbols.NT_OptComFormPDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptComFormPDecl0R0, p.cI, followSets[symbols.NT_OptComFormPDecl])
			}
		case slot.OptComFormPDecl1R0: // OptComFormPDecl : ∙
			p.bsrSet.AddEmpty(slot.OptComFormPDecl1R0, p.cI)

			if p.follow(symbols.NT_OptComFormPDecl) {
				p.rtn(symbols.NT_OptComFormPDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptComFormPDecl1R0, p.cI, followSets[symbols.NT_OptComFormPDecl])
			}
		case slot.OptDot0R0: // OptDot : ∙.

			p.bsrSet.Add(slot.OptDot0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OptDot) {
				p.rtn(symbols.NT_OptDot, cU, p.cI)
			} else {
				p.parseError(slot.OptDot0R0, p.cI, followSets[symbols.NT_OptDot])
			}
		case slot.OptDot1R0: // OptDot : ∙
			p.bsrSet.AddEmpty(slot.OptDot1R0, p.cI)

			if p.follow(symbols.NT_OptDot) {
				p.rtn(symbols.NT_OptDot, cU, p.cI)
			} else {
				p.parseError(slot.OptDot1R0, p.cI, followSets[symbols.NT_OptDot])
			}
		case slot.OptDotStar0R0: // OptDotStar : ∙DOT STAR

			p.call(slot.OptDotStar0R1, cU, p.cI)
		case slot.OptDotStar0R1: // OptDotStar : DOT ∙STAR

			if !p.testSelect(slot.OptDotStar0R1) {
				p.parseError(slot.OptDotStar0R1, p.cI, first[slot.OptDotStar0R1])
				break
			}

			p.call(slot.OptDotStar0R2, cU, p.cI)
		case slot.OptDotStar0R2: // OptDotStar : DOT STAR ∙

			if p.follow(symbols.NT_OptDotStar) {
				p.rtn(symbols.NT_OptDotStar, cU, p.cI)
			} else {
				p.parseError(slot.OptDotStar0R0, p.cI, followSets[symbols.NT_OptDotStar])
			}
		case slot.OptDotStar1R0: // OptDotStar : ∙
			p.bsrSet.AddEmpty(slot.OptDotStar1R0, p.cI)

			if p.follow(symbols.NT_OptDotStar) {
				p.rtn(symbols.NT_OptDotStar, cU, p.cI)
			} else {
				p.parseError(slot.OptDotStar1R0, p.cI, followSets[symbols.NT_OptDotStar])
			}
		case slot.OptElse0R0: // OptElse : ∙ELSE Stmt

			p.call(slot.OptElse0R1, cU, p.cI)
		case slot.OptElse0R1: // OptElse : ELSE ∙Stmt

			if !p.testSelect(slot.OptElse0R1) {
				p.parseError(slot.OptElse0R1, p.cI, first[slot.OptElse0R1])
				break
			}

			p.call(slot.OptElse0R2, cU, p.cI)
		case slot.OptElse0R2: // OptElse : ELSE Stmt ∙

			if p.follow(symbols.NT_OptElse) {
				p.rtn(symbols.NT_OptElse, cU, p.cI)
			} else {
				p.parseError(slot.OptElse0R0, p.cI, followSets[symbols.NT_OptElse])
			}
		case slot.OptElse1R0: // OptElse : ∙
			p.bsrSet.AddEmpty(slot.OptElse1R0, p.cI)

			if p.follow(symbols.NT_OptElse) {
				p.rtn(symbols.NT_OptElse, cU, p.cI)
			} else {
				p.parseError(slot.OptElse1R0, p.cI, followSets[symbols.NT_OptElse])
			}
		case slot.OptEqVarInit0R0: // OptEqVarInit : ∙EQU VarInitial

			p.call(slot.OptEqVarInit0R1, cU, p.cI)
		case slot.OptEqVarInit0R1: // OptEqVarInit : EQU ∙VarInitial

			if !p.testSelect(slot.OptEqVarInit0R1) {
				p.parseError(slot.OptEqVarInit0R1, p.cI, first[slot.OptEqVarInit0R1])
				break
			}

			p.call(slot.OptEqVarInit0R2, cU, p.cI)
		case slot.OptEqVarInit0R2: // OptEqVarInit : EQU VarInitial ∙

			if p.follow(symbols.NT_OptEqVarInit) {
				p.rtn(symbols.NT_OptEqVarInit, cU, p.cI)
			} else {
				p.parseError(slot.OptEqVarInit0R0, p.cI, followSets[symbols.NT_OptEqVarInit])
			}
		case slot.OptEqVarInit1R0: // OptEqVarInit : ∙
			p.bsrSet.AddEmpty(slot.OptEqVarInit1R0, p.cI)

			if p.follow(symbols.NT_OptEqVarInit) {
				p.rtn(symbols.NT_OptEqVarInit, cU, p.cI)
			} else {
				p.parseError(slot.OptEqVarInit1R0, p.cI, followSets[symbols.NT_OptEqVarInit])
			}
		case slot.OptEsc0R0: // OptEsc : ∙Escape

			p.call(slot.OptEsc0R1, cU, p.cI)
		case slot.OptEsc0R1: // OptEsc : Escape ∙

			if p.follow(symbols.NT_OptEsc) {
				p.rtn(symbols.NT_OptEsc, cU, p.cI)
			} else {
				p.parseError(slot.OptEsc0R0, p.cI, followSets[symbols.NT_OptEsc])
			}
		case slot.OptEsc1R0: // OptEsc : ∙anyCarSl

			p.bsrSet.Add(slot.OptEsc1R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OptEsc) {
				p.rtn(symbols.NT_OptEsc, cU, p.cI)
			} else {
				p.parseError(slot.OptEsc1R0, p.cI, followSets[symbols.NT_OptEsc])
			}
		case slot.OptExpr0R0: // OptExpr : ∙Expr

			p.call(slot.OptExpr0R1, cU, p.cI)
		case slot.OptExpr0R1: // OptExpr : Expr ∙

			if p.follow(symbols.NT_OptExpr) {
				p.rtn(symbols.NT_OptExpr, cU, p.cI)
			} else {
				p.parseError(slot.OptExpr0R0, p.cI, followSets[symbols.NT_OptExpr])
			}
		case slot.OptExpr1R0: // OptExpr : ∙
			p.bsrSet.AddEmpty(slot.OptExpr1R0, p.cI)

			if p.follow(symbols.NT_OptExpr) {
				p.rtn(symbols.NT_OptExpr, cU, p.cI)
			} else {
				p.parseError(slot.OptExpr1R0, p.cI, followSets[symbols.NT_OptExpr])
			}
		case slot.OptExprs0R0: // OptExprs : ∙Expr RepComExp0x

			p.call(slot.OptExprs0R1, cU, p.cI)
		case slot.OptExprs0R1: // OptExprs : Expr ∙RepComExp0x

			if !p.testSelect(slot.OptExprs0R1) {
				p.parseError(slot.OptExprs0R1, p.cI, first[slot.OptExprs0R1])
				break
			}

			p.call(slot.OptExprs0R2, cU, p.cI)
		case slot.OptExprs0R2: // OptExprs : Expr RepComExp0x ∙

			if p.follow(symbols.NT_OptExprs) {
				p.rtn(symbols.NT_OptExprs, cU, p.cI)
			} else {
				p.parseError(slot.OptExprs0R0, p.cI, followSets[symbols.NT_OptExprs])
			}
		case slot.OptExprs1R0: // OptExprs : ∙
			p.bsrSet.AddEmpty(slot.OptExprs1R0, p.cI)

			if p.follow(symbols.NT_OptExprs) {
				p.rtn(symbols.NT_OptExprs, cU, p.cI)
			} else {
				p.parseError(slot.OptExprs1R0, p.cI, followSets[symbols.NT_OptExprs])
			}
		case slot.OptExtClsType0R0: // OptExtClsType : ∙EXTENDS ClsType

			p.call(slot.OptExtClsType0R1, cU, p.cI)
		case slot.OptExtClsType0R1: // OptExtClsType : EXTENDS ∙ClsType

			if !p.testSelect(slot.OptExtClsType0R1) {
				p.parseError(slot.OptExtClsType0R1, p.cI, first[slot.OptExtClsType0R1])
				break
			}

			p.call(slot.OptExtClsType0R2, cU, p.cI)
		case slot.OptExtClsType0R2: // OptExtClsType : EXTENDS ClsType ∙

			if p.follow(symbols.NT_OptExtClsType) {
				p.rtn(symbols.NT_OptExtClsType, cU, p.cI)
			} else {
				p.parseError(slot.OptExtClsType0R0, p.cI, followSets[symbols.NT_OptExtClsType])
			}
		case slot.OptExtClsType1R0: // OptExtClsType : ∙
			p.bsrSet.AddEmpty(slot.OptExtClsType1R0, p.cI)

			if p.follow(symbols.NT_OptExtClsType) {
				p.rtn(symbols.NT_OptExtClsType, cU, p.cI)
			} else {
				p.parseError(slot.OptExtClsType1R0, p.cI, followSets[symbols.NT_OptExtClsType])
			}
		case slot.OptExtendsClsLis0R0: // OptExtendsClsLis : ∙EXTENDS ClsTypeList

			p.call(slot.OptExtendsClsLis0R1, cU, p.cI)
		case slot.OptExtendsClsLis0R1: // OptExtendsClsLis : EXTENDS ∙ClsTypeList

			if !p.testSelect(slot.OptExtendsClsLis0R1) {
				p.parseError(slot.OptExtendsClsLis0R1, p.cI, first[slot.OptExtendsClsLis0R1])
				break
			}

			p.call(slot.OptExtendsClsLis0R2, cU, p.cI)
		case slot.OptExtendsClsLis0R2: // OptExtendsClsLis : EXTENDS ClsTypeList ∙

			if p.follow(symbols.NT_OptExtendsClsLis) {
				p.rtn(symbols.NT_OptExtendsClsLis, cU, p.cI)
			} else {
				p.parseError(slot.OptExtendsClsLis0R0, p.cI, followSets[symbols.NT_OptExtendsClsLis])
			}
		case slot.OptExtendsClsLis1R0: // OptExtendsClsLis : ∙
			p.bsrSet.AddEmpty(slot.OptExtendsClsLis1R0, p.cI)

			if p.follow(symbols.NT_OptExtendsClsLis) {
				p.rtn(symbols.NT_OptExtendsClsLis, cU, p.cI)
			} else {
				p.parseError(slot.OptExtendsClsLis1R0, p.cI, followSets[symbols.NT_OptExtendsClsLis])
			}
		case slot.OptFin0R0: // OptFin : ∙FINAL

			p.call(slot.OptFin0R1, cU, p.cI)
		case slot.OptFin0R1: // OptFin : FINAL ∙

			if p.follow(symbols.NT_OptFin) {
				p.rtn(symbols.NT_OptFin, cU, p.cI)
			} else {
				p.parseError(slot.OptFin0R0, p.cI, followSets[symbols.NT_OptFin])
			}
		case slot.OptFin1R0: // OptFin : ∙
			p.bsrSet.AddEmpty(slot.OptFin1R0, p.cI)

			if p.follow(symbols.NT_OptFin) {
				p.rtn(symbols.NT_OptFin, cU, p.cI)
			} else {
				p.parseError(slot.OptFin1R0, p.cI, followSets[symbols.NT_OptFin])
			}
		case slot.OptFinType0R0: // OptFinType : ∙FINAL Type

			p.call(slot.OptFinType0R1, cU, p.cI)
		case slot.OptFinType0R1: // OptFinType : FINAL ∙Type

			if !p.testSelect(slot.OptFinType0R1) {
				p.parseError(slot.OptFinType0R1, p.cI, first[slot.OptFinType0R1])
				break
			}

			p.call(slot.OptFinType0R2, cU, p.cI)
		case slot.OptFinType0R2: // OptFinType : FINAL Type ∙

			if p.follow(symbols.NT_OptFinType) {
				p.rtn(symbols.NT_OptFinType, cU, p.cI)
			} else {
				p.parseError(slot.OptFinType0R0, p.cI, followSets[symbols.NT_OptFinType])
			}
		case slot.OptForInit0R0: // OptForInit : ∙ForInit

			p.call(slot.OptForInit0R1, cU, p.cI)
		case slot.OptForInit0R1: // OptForInit : ForInit ∙

			if p.follow(symbols.NT_OptForInit) {
				p.rtn(symbols.NT_OptForInit, cU, p.cI)
			} else {
				p.parseError(slot.OptForInit0R0, p.cI, followSets[symbols.NT_OptForInit])
			}
		case slot.OptForInit1R0: // OptForInit : ∙
			p.bsrSet.AddEmpty(slot.OptForInit1R0, p.cI)

			if p.follow(symbols.NT_OptForInit) {
				p.rtn(symbols.NT_OptForInit, cU, p.cI)
			} else {
				p.parseError(slot.OptForInit1R0, p.cI, followSets[symbols.NT_OptForInit])
			}
		case slot.OptForUpd0R0: // OptForUpd : ∙ForUpdate

			p.call(slot.OptForUpd0R1, cU, p.cI)
		case slot.OptForUpd0R1: // OptForUpd : ForUpdate ∙

			if p.follow(symbols.NT_OptForUpd) {
				p.rtn(symbols.NT_OptForUpd, cU, p.cI)
			} else {
				p.parseError(slot.OptForUpd0R0, p.cI, followSets[symbols.NT_OptForUpd])
			}
		case slot.OptForUpd1R0: // OptForUpd : ∙
			p.bsrSet.AddEmpty(slot.OptForUpd1R0, p.cI)

			if p.follow(symbols.NT_OptForUpd) {
				p.rtn(symbols.NT_OptForUpd, cU, p.cI)
			} else {
				p.parseError(slot.OptForUpd1R0, p.cI, followSets[symbols.NT_OptForUpd])
			}
		case slot.OptFormPDecl0R0: // OptFormPDecl : ∙FormalParamDecls

			p.call(slot.OptFormPDecl0R1, cU, p.cI)
		case slot.OptFormPDecl0R1: // OptFormPDecl : FormalParamDecls ∙

			if p.follow(symbols.NT_OptFormPDecl) {
				p.rtn(symbols.NT_OptFormPDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptFormPDecl0R0, p.cI, followSets[symbols.NT_OptFormPDecl])
			}
		case slot.OptFormPDecl1R0: // OptFormPDecl : ∙
			p.bsrSet.AddEmpty(slot.OptFormPDecl1R0, p.cI)

			if p.follow(symbols.NT_OptFormPDecl) {
				p.rtn(symbols.NT_OptFormPDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptFormPDecl1R0, p.cI, followSets[symbols.NT_OptFormPDecl])
			}
		case slot.OptID0R0: // OptID : ∙ID

			p.call(slot.OptID0R1, cU, p.cI)
		case slot.OptID0R1: // OptID : ID ∙

			if p.follow(symbols.NT_OptID) {
				p.rtn(symbols.NT_OptID, cU, p.cI)
			} else {
				p.parseError(slot.OptID0R0, p.cI, followSets[symbols.NT_OptID])
			}
		case slot.OptID1R0: // OptID : ∙
			p.bsrSet.AddEmpty(slot.OptID1R0, p.cI)

			if p.follow(symbols.NT_OptID) {
				p.rtn(symbols.NT_OptID, cU, p.cI)
			} else {
				p.parseError(slot.OptID1R0, p.cI, followSets[symbols.NT_OptID])
			}
		case slot.OptIDSuff0R0: // OptIDSuff : ∙IDSuffix

			p.call(slot.OptIDSuff0R1, cU, p.cI)
		case slot.OptIDSuff0R1: // OptIDSuff : IDSuffix ∙

			if p.follow(symbols.NT_OptIDSuff) {
				p.rtn(symbols.NT_OptIDSuff, cU, p.cI)
			} else {
				p.parseError(slot.OptIDSuff0R0, p.cI, followSets[symbols.NT_OptIDSuff])
			}
		case slot.OptIDSuff1R0: // OptIDSuff : ∙
			p.bsrSet.AddEmpty(slot.OptIDSuff1R0, p.cI)

			if p.follow(symbols.NT_OptIDSuff) {
				p.rtn(symbols.NT_OptIDSuff, cU, p.cI)
			} else {
				p.parseError(slot.OptIDSuff1R0, p.cI, followSets[symbols.NT_OptIDSuff])
			}
		case slot.OptImpClsLst0R0: // OptImpClsLst : ∙IMPLEMENTS ClsTypeList

			p.call(slot.OptImpClsLst0R1, cU, p.cI)
		case slot.OptImpClsLst0R1: // OptImpClsLst : IMPLEMENTS ∙ClsTypeList

			if !p.testSelect(slot.OptImpClsLst0R1) {
				p.parseError(slot.OptImpClsLst0R1, p.cI, first[slot.OptImpClsLst0R1])
				break
			}

			p.call(slot.OptImpClsLst0R2, cU, p.cI)
		case slot.OptImpClsLst0R2: // OptImpClsLst : IMPLEMENTS ClsTypeList ∙

			if p.follow(symbols.NT_OptImpClsLst) {
				p.rtn(symbols.NT_OptImpClsLst, cU, p.cI)
			} else {
				p.parseError(slot.OptImpClsLst0R0, p.cI, followSets[symbols.NT_OptImpClsLst])
			}
		case slot.OptImpClsLst1R0: // OptImpClsLst : ∙
			p.bsrSet.AddEmpty(slot.OptImpClsLst1R0, p.cI)

			if p.follow(symbols.NT_OptImpClsLst) {
				p.rtn(symbols.NT_OptImpClsLst, cU, p.cI)
			} else {
				p.parseError(slot.OptImpClsLst1R0, p.cI, followSets[symbols.NT_OptImpClsLst])
			}
		case slot.OptPackDecl0R0: // OptPackDecl : ∙PackDecl

			p.call(slot.OptPackDecl0R1, cU, p.cI)
		case slot.OptPackDecl0R1: // OptPackDecl : PackDecl ∙

			if p.follow(symbols.NT_OptPackDecl) {
				p.rtn(symbols.NT_OptPackDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptPackDecl0R0, p.cI, followSets[symbols.NT_OptPackDecl])
			}
		case slot.OptPackDecl1R0: // OptPackDecl : ∙
			p.bsrSet.AddEmpty(slot.OptPackDecl1R0, p.cI)

			if p.follow(symbols.NT_OptPackDecl) {
				p.rtn(symbols.NT_OptPackDecl, cU, p.cI)
			} else {
				p.parseError(slot.OptPackDecl1R0, p.cI, followSets[symbols.NT_OptPackDecl])
			}
		case slot.OptStatic0R0: // OptStatic : ∙STATIC

			p.call(slot.OptStatic0R1, cU, p.cI)
		case slot.OptStatic0R1: // OptStatic : STATIC ∙

			if p.follow(symbols.NT_OptStatic) {
				p.rtn(symbols.NT_OptStatic, cU, p.cI)
			} else {
				p.parseError(slot.OptStatic0R0, p.cI, followSets[symbols.NT_OptStatic])
			}
		case slot.OptStatic1R0: // OptStatic : ∙
			p.bsrSet.AddEmpty(slot.OptStatic1R0, p.cI)

			if p.follow(symbols.NT_OptStatic) {
				p.rtn(symbols.NT_OptStatic, cU, p.cI)
			} else {
				p.parseError(slot.OptStatic1R0, p.cI, followSets[symbols.NT_OptStatic])
			}
		case slot.OptThrowClsTypLst0R0: // OptThrowClsTypLst : ∙THROWS ClsTypeList

			p.call(slot.OptThrowClsTypLst0R1, cU, p.cI)
		case slot.OptThrowClsTypLst0R1: // OptThrowClsTypLst : THROWS ∙ClsTypeList

			if !p.testSelect(slot.OptThrowClsTypLst0R1) {
				p.parseError(slot.OptThrowClsTypLst0R1, p.cI, first[slot.OptThrowClsTypLst0R1])
				break
			}

			p.call(slot.OptThrowClsTypLst0R2, cU, p.cI)
		case slot.OptThrowClsTypLst0R2: // OptThrowClsTypLst : THROWS ClsTypeList ∙

			if p.follow(symbols.NT_OptThrowClsTypLst) {
				p.rtn(symbols.NT_OptThrowClsTypLst, cU, p.cI)
			} else {
				p.parseError(slot.OptThrowClsTypLst0R0, p.cI, followSets[symbols.NT_OptThrowClsTypLst])
			}
		case slot.OptThrowClsTypLst1R0: // OptThrowClsTypLst : ∙
			p.bsrSet.AddEmpty(slot.OptThrowClsTypLst1R0, p.cI)

			if p.follow(symbols.NT_OptThrowClsTypLst) {
				p.rtn(symbols.NT_OptThrowClsTypLst, cU, p.cI)
			} else {
				p.parseError(slot.OptThrowClsTypLst1R0, p.cI, followSets[symbols.NT_OptThrowClsTypLst])
			}
		case slot.OptVarInit0R0: // OptVarInit : ∙VarInitial RepComInit0x OptCom

			p.call(slot.OptVarInit0R1, cU, p.cI)
		case slot.OptVarInit0R1: // OptVarInit : VarInitial ∙RepComInit0x OptCom

			if !p.testSelect(slot.OptVarInit0R1) {
				p.parseError(slot.OptVarInit0R1, p.cI, first[slot.OptVarInit0R1])
				break
			}

			p.call(slot.OptVarInit0R2, cU, p.cI)
		case slot.OptVarInit0R2: // OptVarInit : VarInitial RepComInit0x ∙OptCom

			if !p.testSelect(slot.OptVarInit0R2) {
				p.parseError(slot.OptVarInit0R2, p.cI, first[slot.OptVarInit0R2])
				break
			}

			p.call(slot.OptVarInit0R3, cU, p.cI)
		case slot.OptVarInit0R3: // OptVarInit : VarInitial RepComInit0x OptCom ∙

			if p.follow(symbols.NT_OptVarInit) {
				p.rtn(symbols.NT_OptVarInit, cU, p.cI)
			} else {
				p.parseError(slot.OptVarInit0R0, p.cI, followSets[symbols.NT_OptVarInit])
			}
		case slot.OptVarInit1R0: // OptVarInit : ∙
			p.bsrSet.AddEmpty(slot.OptVarInit1R0, p.cI)

			if p.follow(symbols.NT_OptVarInit) {
				p.rtn(symbols.NT_OptVarInit, cU, p.cI)
			} else {
				p.parseError(slot.OptVarInit1R0, p.cI, followSets[symbols.NT_OptVarInit])
			}
		case slot.OtherAlts0R0: // OtherAlts : ∙Cls

			p.bsrSet.Add(slot.OtherAlts0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_OtherAlts) {
				p.rtn(symbols.NT_OtherAlts, cU, p.cI)
			} else {
				p.parseError(slot.OtherAlts0R0, p.cI, followSets[symbols.NT_OtherAlts])
			}
		case slot.OtherAlts1R0: // OtherAlts : ∙THIS

			p.call(slot.OtherAlts1R1, cU, p.cI)
		case slot.OtherAlts1R1: // OtherAlts : THIS ∙

			if p.follow(symbols.NT_OtherAlts) {
				p.rtn(symbols.NT_OtherAlts, cU, p.cI)
			} else {
				p.parseError(slot.OtherAlts1R0, p.cI, followSets[symbols.NT_OtherAlts])
			}
		case slot.OtherAlts2R0: // OtherAlts : ∙SUPER Arguments

			p.call(slot.OtherAlts2R1, cU, p.cI)
		case slot.OtherAlts2R1: // OtherAlts : SUPER ∙Arguments

			if !p.testSelect(slot.OtherAlts2R1) {
				p.parseError(slot.OtherAlts2R1, p.cI, first[slot.OtherAlts2R1])
				break
			}

			p.call(slot.OtherAlts2R2, cU, p.cI)
		case slot.OtherAlts2R2: // OtherAlts : SUPER Arguments ∙

			if p.follow(symbols.NT_OtherAlts) {
				p.rtn(symbols.NT_OtherAlts, cU, p.cI)
			} else {
				p.parseError(slot.OtherAlts2R0, p.cI, followSets[symbols.NT_OtherAlts])
			}
		case slot.OtherAlts3R0: // OtherAlts : ∙NEW InnerCreator

			p.call(slot.OtherAlts3R1, cU, p.cI)
		case slot.OtherAlts3R1: // OtherAlts : NEW ∙InnerCreator

			if !p.testSelect(slot.OtherAlts3R1) {
				p.parseError(slot.OtherAlts3R1, p.cI, first[slot.OtherAlts3R1])
				break
			}

			p.call(slot.OtherAlts3R2, cU, p.cI)
		case slot.OtherAlts3R2: // OtherAlts : NEW InnerCreator ∙

			if p.follow(symbols.NT_OtherAlts) {
				p.rtn(symbols.NT_OtherAlts, cU, p.cI)
			} else {
				p.parseError(slot.OtherAlts3R0, p.cI, followSets[symbols.NT_OtherAlts])
			}
		case slot.PACKAGE0R0: // PACKAGE : ∙package notLorD

			p.bsrSet.Add(slot.PACKAGE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PACKAGE0R1) {
				p.parseError(slot.PACKAGE0R1, p.cI, first[slot.PACKAGE0R1])
				break
			}

			p.bsrSet.Add(slot.PACKAGE0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_PACKAGE) {
				p.rtn(symbols.NT_PACKAGE, cU, p.cI)
			} else {
				p.parseError(slot.PACKAGE0R0, p.cI, followSets[symbols.NT_PACKAGE])
			}
		case slot.PLUS0R0: // PLUS : ∙+ notEqPlus WS

			p.bsrSet.Add(slot.PLUS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PLUS0R1) {
				p.parseError(slot.PLUS0R1, p.cI, first[slot.PLUS0R1])
				break
			}

			p.bsrSet.Add(slot.PLUS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PLUS0R2) {
				p.parseError(slot.PLUS0R2, p.cI, first[slot.PLUS0R2])
				break
			}

			p.call(slot.PLUS0R3, cU, p.cI)
		case slot.PLUS0R3: // PLUS : + notEqPlus WS ∙

			if p.follow(symbols.NT_PLUS) {
				p.rtn(symbols.NT_PLUS, cU, p.cI)
			} else {
				p.parseError(slot.PLUS0R0, p.cI, followSets[symbols.NT_PLUS])
			}
		case slot.PLUS_EQU0R0: // PLUS_EQU : ∙+= WS

			p.bsrSet.Add(slot.PLUS_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.PLUS_EQU0R1) {
				p.parseError(slot.PLUS_EQU0R1, p.cI, first[slot.PLUS_EQU0R1])
				break
			}

			p.call(slot.PLUS_EQU0R2, cU, p.cI)
		case slot.PLUS_EQU0R2: // PLUS_EQU : += WS ∙

			if p.follow(symbols.NT_PLUS_EQU) {
				p.rtn(symbols.NT_PLUS_EQU, cU, p.cI)
			} else {
				p.parseError(slot.PLUS_EQU0R0, p.cI, followSets[symbols.NT_PLUS_EQU])
			}
		case slot.PackDecl0R0: // PackDecl : ∙PACKAGE QualifiedID SEMI

			p.call(slot.PackDecl0R1, cU, p.cI)
		case slot.PackDecl0R1: // PackDecl : PACKAGE ∙QualifiedID SEMI

			if !p.testSelect(slot.PackDecl0R1) {
				p.parseError(slot.PackDecl0R1, p.cI, first[slot.PackDecl0R1])
				break
			}

			p.call(slot.PackDecl0R2, cU, p.cI)
		case slot.PackDecl0R2: // PackDecl : PACKAGE QualifiedID ∙SEMI

			if !p.testSelect(slot.PackDecl0R2) {
				p.parseError(slot.PackDecl0R2, p.cI, first[slot.PackDecl0R2])
				break
			}

			p.call(slot.PackDecl0R3, cU, p.cI)
		case slot.PackDecl0R3: // PackDecl : PACKAGE QualifiedID SEMI ∙

			if p.follow(symbols.NT_PackDecl) {
				p.rtn(symbols.NT_PackDecl, cU, p.cI)
			} else {
				p.parseError(slot.PackDecl0R0, p.cI, followSets[symbols.NT_PackDecl])
			}
		case slot.ParExpr0R0: // ParExpr : ∙LPAR Expr RPAR

			p.call(slot.ParExpr0R1, cU, p.cI)
		case slot.ParExpr0R1: // ParExpr : LPAR ∙Expr RPAR

			if !p.testSelect(slot.ParExpr0R1) {
				p.parseError(slot.ParExpr0R1, p.cI, first[slot.ParExpr0R1])
				break
			}

			p.call(slot.ParExpr0R2, cU, p.cI)
		case slot.ParExpr0R2: // ParExpr : LPAR Expr ∙RPAR

			if !p.testSelect(slot.ParExpr0R2) {
				p.parseError(slot.ParExpr0R2, p.cI, first[slot.ParExpr0R2])
				break
			}

			p.call(slot.ParExpr0R3, cU, p.cI)
		case slot.ParExpr0R3: // ParExpr : LPAR Expr RPAR ∙

			if p.follow(symbols.NT_ParExpr) {
				p.rtn(symbols.NT_ParExpr, cU, p.cI)
			} else {
				p.parseError(slot.ParExpr0R0, p.cI, followSets[symbols.NT_ParExpr])
			}
		case slot.PostfixOp0R0: // PostfixOp : ∙INC

			p.call(slot.PostfixOp0R1, cU, p.cI)
		case slot.PostfixOp0R1: // PostfixOp : INC ∙

			if p.follow(symbols.NT_PostfixOp) {
				p.rtn(symbols.NT_PostfixOp, cU, p.cI)
			} else {
				p.parseError(slot.PostfixOp0R0, p.cI, followSets[symbols.NT_PostfixOp])
			}
		case slot.PostfixOp1R0: // PostfixOp : ∙DEC

			p.call(slot.PostfixOp1R1, cU, p.cI)
		case slot.PostfixOp1R1: // PostfixOp : DEC ∙

			if p.follow(symbols.NT_PostfixOp) {
				p.rtn(symbols.NT_PostfixOp, cU, p.cI)
			} else {
				p.parseError(slot.PostfixOp1R0, p.cI, followSets[symbols.NT_PostfixOp])
			}
		case slot.PrefixOp0R0: // PrefixOp : ∙INC

			p.call(slot.PrefixOp0R1, cU, p.cI)
		case slot.PrefixOp0R1: // PrefixOp : INC ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp0R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.PrefixOp1R0: // PrefixOp : ∙DEC

			p.call(slot.PrefixOp1R1, cU, p.cI)
		case slot.PrefixOp1R1: // PrefixOp : DEC ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp1R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.PrefixOp2R0: // PrefixOp : ∙BANG

			p.call(slot.PrefixOp2R1, cU, p.cI)
		case slot.PrefixOp2R1: // PrefixOp : BANG ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp2R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.PrefixOp3R0: // PrefixOp : ∙TILDA

			p.call(slot.PrefixOp3R1, cU, p.cI)
		case slot.PrefixOp3R1: // PrefixOp : TILDA ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp3R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.PrefixOp4R0: // PrefixOp : ∙PLUS

			p.call(slot.PrefixOp4R1, cU, p.cI)
		case slot.PrefixOp4R1: // PrefixOp : PLUS ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp4R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.PrefixOp5R0: // PrefixOp : ∙MINUS

			p.call(slot.PrefixOp5R1, cU, p.cI)
		case slot.PrefixOp5R1: // PrefixOp : MINUS ∙

			if p.follow(symbols.NT_PrefixOp) {
				p.rtn(symbols.NT_PrefixOp, cU, p.cI)
			} else {
				p.parseError(slot.PrefixOp5R0, p.cI, followSets[symbols.NT_PrefixOp])
			}
		case slot.Primary0R0: // Primary : ∙ParExpr

			p.call(slot.Primary0R1, cU, p.cI)
		case slot.Primary0R1: // Primary : ParExpr ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary0R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary1R0: // Primary : ∙THIS OptArgs

			p.call(slot.Primary1R1, cU, p.cI)
		case slot.Primary1R1: // Primary : THIS ∙OptArgs

			if !p.testSelect(slot.Primary1R1) {
				p.parseError(slot.Primary1R1, p.cI, first[slot.Primary1R1])
				break
			}

			p.call(slot.Primary1R2, cU, p.cI)
		case slot.Primary1R2: // Primary : THIS OptArgs ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary1R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary2R0: // Primary : ∙SUPER SuperSuffix

			p.call(slot.Primary2R1, cU, p.cI)
		case slot.Primary2R1: // Primary : SUPER ∙SuperSuffix

			if !p.testSelect(slot.Primary2R1) {
				p.parseError(slot.Primary2R1, p.cI, first[slot.Primary2R1])
				break
			}

			p.call(slot.Primary2R2, cU, p.cI)
		case slot.Primary2R2: // Primary : SUPER SuperSuffix ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary2R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary3R0: // Primary : ∙Literal

			p.call(slot.Primary3R1, cU, p.cI)
		case slot.Primary3R1: // Primary : Literal ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary3R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary4R0: // Primary : ∙NEW Creator

			p.call(slot.Primary4R1, cU, p.cI)
		case slot.Primary4R1: // Primary : NEW ∙Creator

			if !p.testSelect(slot.Primary4R1) {
				p.parseError(slot.Primary4R1, p.cI, first[slot.Primary4R1])
				break
			}

			p.call(slot.Primary4R2, cU, p.cI)
		case slot.Primary4R2: // Primary : NEW Creator ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary4R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary5R0: // Primary : ∙QualifiedID OptIDSuff

			p.call(slot.Primary5R1, cU, p.cI)
		case slot.Primary5R1: // Primary : QualifiedID ∙OptIDSuff

			if !p.testSelect(slot.Primary5R1) {
				p.parseError(slot.Primary5R1, p.cI, first[slot.Primary5R1])
				break
			}

			p.call(slot.Primary5R2, cU, p.cI)
		case slot.Primary5R2: // Primary : QualifiedID OptIDSuff ∙

			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary5R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary6R0: // Primary : ∙BasicType RepDim0x DOT Cls

			p.call(slot.Primary6R1, cU, p.cI)
		case slot.Primary6R1: // Primary : BasicType ∙RepDim0x DOT Cls

			if !p.testSelect(slot.Primary6R1) {
				p.parseError(slot.Primary6R1, p.cI, first[slot.Primary6R1])
				break
			}

			p.call(slot.Primary6R2, cU, p.cI)
		case slot.Primary6R2: // Primary : BasicType RepDim0x ∙DOT Cls

			if !p.testSelect(slot.Primary6R2) {
				p.parseError(slot.Primary6R2, p.cI, first[slot.Primary6R2])
				break
			}

			p.call(slot.Primary6R3, cU, p.cI)
		case slot.Primary6R3: // Primary : BasicType RepDim0x DOT ∙Cls

			if !p.testSelect(slot.Primary6R3) {
				p.parseError(slot.Primary6R3, p.cI, first[slot.Primary6R3])
				break
			}

			p.bsrSet.Add(slot.Primary6R4, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary6R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.Primary7R0: // Primary : ∙VOID DOT Cls

			p.call(slot.Primary7R1, cU, p.cI)
		case slot.Primary7R1: // Primary : VOID ∙DOT Cls

			if !p.testSelect(slot.Primary7R1) {
				p.parseError(slot.Primary7R1, p.cI, first[slot.Primary7R1])
				break
			}

			p.call(slot.Primary7R2, cU, p.cI)
		case slot.Primary7R2: // Primary : VOID DOT ∙Cls

			if !p.testSelect(slot.Primary7R2) {
				p.parseError(slot.Primary7R2, p.cI, first[slot.Primary7R2])
				break
			}

			p.bsrSet.Add(slot.Primary7R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_Primary) {
				p.rtn(symbols.NT_Primary, cU, p.cI)
			} else {
				p.parseError(slot.Primary7R0, p.cI, followSets[symbols.NT_Primary])
			}
		case slot.QUERY0R0: // QUERY : ∙? WS

			p.bsrSet.Add(slot.QUERY0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.QUERY0R1) {
				p.parseError(slot.QUERY0R1, p.cI, first[slot.QUERY0R1])
				break
			}

			p.call(slot.QUERY0R2, cU, p.cI)
		case slot.QUERY0R2: // QUERY : ? WS ∙

			if p.follow(symbols.NT_QUERY) {
				p.rtn(symbols.NT_QUERY, cU, p.cI)
			} else {
				p.parseError(slot.QUERY0R0, p.cI, followSets[symbols.NT_QUERY])
			}
		case slot.QualifiedID0R0: // QualifiedID : ∙ID RepDotID0x

			p.call(slot.QualifiedID0R1, cU, p.cI)
		case slot.QualifiedID0R1: // QualifiedID : ID ∙RepDotID0x

			if !p.testSelect(slot.QualifiedID0R1) {
				p.parseError(slot.QualifiedID0R1, p.cI, first[slot.QualifiedID0R1])
				break
			}

			p.call(slot.QualifiedID0R2, cU, p.cI)
		case slot.QualifiedID0R2: // QualifiedID : ID RepDotID0x ∙

			if p.follow(symbols.NT_QualifiedID) {
				p.rtn(symbols.NT_QualifiedID, cU, p.cI)
			} else {
				p.parseError(slot.QualifiedID0R0, p.cI, followSets[symbols.NT_QualifiedID])
			}
		case slot.RBRK0R0: // RBRK : ∙] WS

			p.bsrSet.Add(slot.RBRK0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RBRK0R1) {
				p.parseError(slot.RBRK0R1, p.cI, first[slot.RBRK0R1])
				break
			}

			p.call(slot.RBRK0R2, cU, p.cI)
		case slot.RBRK0R2: // RBRK : ] WS ∙

			if p.follow(symbols.NT_RBRK) {
				p.rtn(symbols.NT_RBRK, cU, p.cI)
			} else {
				p.parseError(slot.RBRK0R0, p.cI, followSets[symbols.NT_RBRK])
			}
		case slot.RBRKAlts0R0: // RBRKAlts : ∙RBRK RepDim0x DOT Cls

			p.call(slot.RBRKAlts0R1, cU, p.cI)
		case slot.RBRKAlts0R1: // RBRKAlts : RBRK ∙RepDim0x DOT Cls

			if !p.testSelect(slot.RBRKAlts0R1) {
				p.parseError(slot.RBRKAlts0R1, p.cI, first[slot.RBRKAlts0R1])
				break
			}

			p.call(slot.RBRKAlts0R2, cU, p.cI)
		case slot.RBRKAlts0R2: // RBRKAlts : RBRK RepDim0x ∙DOT Cls

			if !p.testSelect(slot.RBRKAlts0R2) {
				p.parseError(slot.RBRKAlts0R2, p.cI, first[slot.RBRKAlts0R2])
				break
			}

			p.call(slot.RBRKAlts0R3, cU, p.cI)
		case slot.RBRKAlts0R3: // RBRKAlts : RBRK RepDim0x DOT ∙Cls

			if !p.testSelect(slot.RBRKAlts0R3) {
				p.parseError(slot.RBRKAlts0R3, p.cI, first[slot.RBRKAlts0R3])
				break
			}

			p.bsrSet.Add(slot.RBRKAlts0R4, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_RBRKAlts) {
				p.rtn(symbols.NT_RBRKAlts, cU, p.cI)
			} else {
				p.parseError(slot.RBRKAlts0R0, p.cI, followSets[symbols.NT_RBRKAlts])
			}
		case slot.RBRKAlts1R0: // RBRKAlts : ∙Expr RBRK

			p.call(slot.RBRKAlts1R1, cU, p.cI)
		case slot.RBRKAlts1R1: // RBRKAlts : Expr ∙RBRK

			if !p.testSelect(slot.RBRKAlts1R1) {
				p.parseError(slot.RBRKAlts1R1, p.cI, first[slot.RBRKAlts1R1])
				break
			}

			p.call(slot.RBRKAlts1R2, cU, p.cI)
		case slot.RBRKAlts1R2: // RBRKAlts : Expr RBRK ∙

			if p.follow(symbols.NT_RBRKAlts) {
				p.rtn(symbols.NT_RBRKAlts, cU, p.cI)
			} else {
				p.parseError(slot.RBRKAlts1R0, p.cI, followSets[symbols.NT_RBRKAlts])
			}
		case slot.RETURN0R0: // RETURN : ∙return notLorD

			p.bsrSet.Add(slot.RETURN0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RETURN0R1) {
				p.parseError(slot.RETURN0R1, p.cI, first[slot.RETURN0R1])
				break
			}

			p.bsrSet.Add(slot.RETURN0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_RETURN) {
				p.rtn(symbols.NT_RETURN, cU, p.cI)
			} else {
				p.parseError(slot.RETURN0R0, p.cI, followSets[symbols.NT_RETURN])
			}
		case slot.RPAR0R0: // RPAR : ∙) WS

			p.bsrSet.Add(slot.RPAR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RPAR0R1) {
				p.parseError(slot.RPAR0R1, p.cI, first[slot.RPAR0R1])
				break
			}

			p.call(slot.RPAR0R2, cU, p.cI)
		case slot.RPAR0R2: // RPAR : ) WS ∙

			if p.follow(symbols.NT_RPAR) {
				p.rtn(symbols.NT_RPAR, cU, p.cI)
			} else {
				p.parseError(slot.RPAR0R0, p.cI, followSets[symbols.NT_RPAR])
			}
		case slot.RWING0R0: // RWING : ∙} WS

			p.bsrSet.Add(slot.RWING0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RWING0R1) {
				p.parseError(slot.RWING0R1, p.cI, first[slot.RWING0R1])
				break
			}

			p.call(slot.RWING0R2, cU, p.cI)
		case slot.RWING0R2: // RWING : } WS ∙

			if p.follow(symbols.NT_RWING) {
				p.rtn(symbols.NT_RWING, cU, p.cI)
			} else {
				p.parseError(slot.RWING0R0, p.cI, followSets[symbols.NT_RWING])
			}
		case slot.ReferenceType0R0: // ReferenceType : ∙BasicType Dim RepDim0x

			p.call(slot.ReferenceType0R1, cU, p.cI)
		case slot.ReferenceType0R1: // ReferenceType : BasicType ∙Dim RepDim0x

			if !p.testSelect(slot.ReferenceType0R1) {
				p.parseError(slot.ReferenceType0R1, p.cI, first[slot.ReferenceType0R1])
				break
			}

			p.call(slot.ReferenceType0R2, cU, p.cI)
		case slot.ReferenceType0R2: // ReferenceType : BasicType Dim ∙RepDim0x

			if !p.testSelect(slot.ReferenceType0R2) {
				p.parseError(slot.ReferenceType0R2, p.cI, first[slot.ReferenceType0R2])
				break
			}

			p.call(slot.ReferenceType0R3, cU, p.cI)
		case slot.ReferenceType0R3: // ReferenceType : BasicType Dim RepDim0x ∙

			if p.follow(symbols.NT_ReferenceType) {
				p.rtn(symbols.NT_ReferenceType, cU, p.cI)
			} else {
				p.parseError(slot.ReferenceType0R0, p.cI, followSets[symbols.NT_ReferenceType])
			}
		case slot.ReferenceType1R0: // ReferenceType : ∙ClsType RepDim0x

			p.call(slot.ReferenceType1R1, cU, p.cI)
		case slot.ReferenceType1R1: // ReferenceType : ClsType ∙RepDim0x

			if !p.testSelect(slot.ReferenceType1R1) {
				p.parseError(slot.ReferenceType1R1, p.cI, first[slot.ReferenceType1R1])
				break
			}

			p.call(slot.ReferenceType1R2, cU, p.cI)
		case slot.ReferenceType1R2: // ReferenceType : ClsType RepDim0x ∙

			if p.follow(symbols.NT_ReferenceType) {
				p.rtn(symbols.NT_ReferenceType, cU, p.cI)
			} else {
				p.parseError(slot.ReferenceType1R0, p.cI, followSets[symbols.NT_ReferenceType])
			}
		case slot.RelateExpr0R0: // RelateExpr : ∙ShiftExpr RepESInst0x

			p.call(slot.RelateExpr0R1, cU, p.cI)
		case slot.RelateExpr0R1: // RelateExpr : ShiftExpr ∙RepESInst0x

			if !p.testSelect(slot.RelateExpr0R1) {
				p.parseError(slot.RelateExpr0R1, p.cI, first[slot.RelateExpr0R1])
				break
			}

			p.call(slot.RelateExpr0R2, cU, p.cI)
		case slot.RelateExpr0R2: // RelateExpr : ShiftExpr RepESInst0x ∙

			if p.follow(symbols.NT_RelateExpr) {
				p.rtn(symbols.NT_RelateExpr, cU, p.cI)
			} else {
				p.parseError(slot.RelateExpr0R0, p.cI, followSets[symbols.NT_RelateExpr])
			}
		case slot.RepANDEq0x0R0: // RepANDEq0x : ∙AND EqualExpr RepANDEq0x

			p.call(slot.RepANDEq0x0R1, cU, p.cI)
		case slot.RepANDEq0x0R1: // RepANDEq0x : AND ∙EqualExpr RepANDEq0x

			if !p.testSelect(slot.RepANDEq0x0R1) {
				p.parseError(slot.RepANDEq0x0R1, p.cI, first[slot.RepANDEq0x0R1])
				break
			}

			p.call(slot.RepANDEq0x0R2, cU, p.cI)
		case slot.RepANDEq0x0R2: // RepANDEq0x : AND EqualExpr ∙RepANDEq0x

			if !p.testSelect(slot.RepANDEq0x0R2) {
				p.parseError(slot.RepANDEq0x0R2, p.cI, first[slot.RepANDEq0x0R2])
				break
			}

			p.call(slot.RepANDEq0x0R3, cU, p.cI)
		case slot.RepANDEq0x0R3: // RepANDEq0x : AND EqualExpr RepANDEq0x ∙

			if p.follow(symbols.NT_RepANDEq0x) {
				p.rtn(symbols.NT_RepANDEq0x, cU, p.cI)
			} else {
				p.parseError(slot.RepANDEq0x0R0, p.cI, followSets[symbols.NT_RepANDEq0x])
			}
		case slot.RepANDEq0x1R0: // RepANDEq0x : ∙
			p.bsrSet.AddEmpty(slot.RepANDEq0x1R0, p.cI)

			if p.follow(symbols.NT_RepANDEq0x) {
				p.rtn(symbols.NT_RepANDEq0x, cU, p.cI)
			} else {
				p.parseError(slot.RepANDEq0x1R0, p.cI, followSets[symbols.NT_RepANDEq0x])
			}
		case slot.RepANDIOR0x0R0: // RepANDIOR0x : ∙AND_AND IORExpr RepANDIOR0x

			p.call(slot.RepANDIOR0x0R1, cU, p.cI)
		case slot.RepANDIOR0x0R1: // RepANDIOR0x : AND_AND ∙IORExpr RepANDIOR0x

			if !p.testSelect(slot.RepANDIOR0x0R1) {
				p.parseError(slot.RepANDIOR0x0R1, p.cI, first[slot.RepANDIOR0x0R1])
				break
			}

			p.call(slot.RepANDIOR0x0R2, cU, p.cI)
		case slot.RepANDIOR0x0R2: // RepANDIOR0x : AND_AND IORExpr ∙RepANDIOR0x

			if !p.testSelect(slot.RepANDIOR0x0R2) {
				p.parseError(slot.RepANDIOR0x0R2, p.cI, first[slot.RepANDIOR0x0R2])
				break
			}

			p.call(slot.RepANDIOR0x0R3, cU, p.cI)
		case slot.RepANDIOR0x0R3: // RepANDIOR0x : AND_AND IORExpr RepANDIOR0x ∙

			if p.follow(symbols.NT_RepANDIOR0x) {
				p.rtn(symbols.NT_RepANDIOR0x, cU, p.cI)
			} else {
				p.parseError(slot.RepANDIOR0x0R0, p.cI, followSets[symbols.NT_RepANDIOR0x])
			}
		case slot.RepANDIOR0x1R0: // RepANDIOR0x : ∙
			p.bsrSet.AddEmpty(slot.RepANDIOR0x1R0, p.cI)

			if p.follow(symbols.NT_RepANDIOR0x) {
				p.rtn(symbols.NT_RepANDIOR0x, cU, p.cI)
			} else {
				p.parseError(slot.RepANDIOR0x1R0, p.cI, followSets[symbols.NT_RepANDIOR0x])
			}
		case slot.RepAddAltsMult0x0R0: // RepAddAltsMult0x : ∙AddAlts MultExpr

			p.call(slot.RepAddAltsMult0x0R1, cU, p.cI)
		case slot.RepAddAltsMult0x0R1: // RepAddAltsMult0x : AddAlts ∙MultExpr

			if !p.testSelect(slot.RepAddAltsMult0x0R1) {
				p.parseError(slot.RepAddAltsMult0x0R1, p.cI, first[slot.RepAddAltsMult0x0R1])
				break
			}

			p.call(slot.RepAddAltsMult0x0R2, cU, p.cI)
		case slot.RepAddAltsMult0x0R2: // RepAddAltsMult0x : AddAlts MultExpr ∙

			if p.follow(symbols.NT_RepAddAltsMult0x) {
				p.rtn(symbols.NT_RepAddAltsMult0x, cU, p.cI)
			} else {
				p.parseError(slot.RepAddAltsMult0x0R0, p.cI, followSets[symbols.NT_RepAddAltsMult0x])
			}
		case slot.RepAddAltsMult0x1R0: // RepAddAltsMult0x : ∙
			p.bsrSet.AddEmpty(slot.RepAddAltsMult0x1R0, p.cI)

			if p.follow(symbols.NT_RepAddAltsMult0x) {
				p.rtn(symbols.NT_RepAddAltsMult0x, cU, p.cI)
			} else {
				p.parseError(slot.RepAddAltsMult0x1R0, p.cI, followSets[symbols.NT_RepAddAltsMult0x])
			}
		case slot.RepAsscExpr0x0R0: // RepAsscExpr0x : ∙AssignOp CondExpr RepAsscExpr0x

			p.call(slot.RepAsscExpr0x0R1, cU, p.cI)
		case slot.RepAsscExpr0x0R1: // RepAsscExpr0x : AssignOp ∙CondExpr RepAsscExpr0x

			if !p.testSelect(slot.RepAsscExpr0x0R1) {
				p.parseError(slot.RepAsscExpr0x0R1, p.cI, first[slot.RepAsscExpr0x0R1])
				break
			}

			p.call(slot.RepAsscExpr0x0R2, cU, p.cI)
		case slot.RepAsscExpr0x0R2: // RepAsscExpr0x : AssignOp CondExpr ∙RepAsscExpr0x

			if !p.testSelect(slot.RepAsscExpr0x0R2) {
				p.parseError(slot.RepAsscExpr0x0R2, p.cI, first[slot.RepAsscExpr0x0R2])
				break
			}

			p.call(slot.RepAsscExpr0x0R3, cU, p.cI)
		case slot.RepAsscExpr0x0R3: // RepAsscExpr0x : AssignOp CondExpr RepAsscExpr0x ∙

			if p.follow(symbols.NT_RepAsscExpr0x) {
				p.rtn(symbols.NT_RepAsscExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepAsscExpr0x0R0, p.cI, followSets[symbols.NT_RepAsscExpr0x])
			}
		case slot.RepAsscExpr0x1R0: // RepAsscExpr0x : ∙
			p.bsrSet.AddEmpty(slot.RepAsscExpr0x1R0, p.cI)

			if p.follow(symbols.NT_RepAsscExpr0x) {
				p.rtn(symbols.NT_RepAsscExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepAsscExpr0x1R0, p.cI, followSets[symbols.NT_RepAsscExpr0x])
			}
		case slot.RepBlkSt0x0R0: // RepBlkSt0x : ∙BlockStmt RepBlkSt0x

			p.call(slot.RepBlkSt0x0R1, cU, p.cI)
		case slot.RepBlkSt0x0R1: // RepBlkSt0x : BlockStmt ∙RepBlkSt0x

			if !p.testSelect(slot.RepBlkSt0x0R1) {
				p.parseError(slot.RepBlkSt0x0R1, p.cI, first[slot.RepBlkSt0x0R1])
				break
			}

			p.call(slot.RepBlkSt0x0R2, cU, p.cI)
		case slot.RepBlkSt0x0R2: // RepBlkSt0x : BlockStmt RepBlkSt0x ∙

			if p.follow(symbols.NT_RepBlkSt0x) {
				p.rtn(symbols.NT_RepBlkSt0x, cU, p.cI)
			} else {
				p.parseError(slot.RepBlkSt0x0R0, p.cI, followSets[symbols.NT_RepBlkSt0x])
			}
		case slot.RepBlkSt0x1R0: // RepBlkSt0x : ∙
			p.bsrSet.AddEmpty(slot.RepBlkSt0x1R0, p.cI)

			if p.follow(symbols.NT_RepBlkSt0x) {
				p.rtn(symbols.NT_RepBlkSt0x, cU, p.cI)
			} else {
				p.parseError(slot.RepBlkSt0x1R0, p.cI, followSets[symbols.NT_RepBlkSt0x])
			}
		case slot.RepCatch0x0R0: // RepCatch0x : ∙Catch RepCatch0x

			p.call(slot.RepCatch0x0R1, cU, p.cI)
		case slot.RepCatch0x0R1: // RepCatch0x : Catch ∙RepCatch0x

			if !p.testSelect(slot.RepCatch0x0R1) {
				p.parseError(slot.RepCatch0x0R1, p.cI, first[slot.RepCatch0x0R1])
				break
			}

			p.call(slot.RepCatch0x0R2, cU, p.cI)
		case slot.RepCatch0x0R2: // RepCatch0x : Catch RepCatch0x ∙

			if p.follow(symbols.NT_RepCatch0x) {
				p.rtn(symbols.NT_RepCatch0x, cU, p.cI)
			} else {
				p.parseError(slot.RepCatch0x0R0, p.cI, followSets[symbols.NT_RepCatch0x])
			}
		case slot.RepCatch0x1R0: // RepCatch0x : ∙
			p.bsrSet.AddEmpty(slot.RepCatch0x1R0, p.cI)

			if p.follow(symbols.NT_RepCatch0x) {
				p.rtn(symbols.NT_RepCatch0x, cU, p.cI)
			} else {
				p.parseError(slot.RepCatch0x1R0, p.cI, followSets[symbols.NT_RepCatch0x])
			}
		case slot.RepClsBDecl0x0R0: // RepClsBDecl0x : ∙ClsBdyDecl RepClsBDecl0x

			p.call(slot.RepClsBDecl0x0R1, cU, p.cI)
		case slot.RepClsBDecl0x0R1: // RepClsBDecl0x : ClsBdyDecl ∙RepClsBDecl0x

			if !p.testSelect(slot.RepClsBDecl0x0R1) {
				p.parseError(slot.RepClsBDecl0x0R1, p.cI, first[slot.RepClsBDecl0x0R1])
				break
			}

			p.call(slot.RepClsBDecl0x0R2, cU, p.cI)
		case slot.RepClsBDecl0x0R2: // RepClsBDecl0x : ClsBdyDecl RepClsBDecl0x ∙

			if p.follow(symbols.NT_RepClsBDecl0x) {
				p.rtn(symbols.NT_RepClsBDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepClsBDecl0x0R0, p.cI, followSets[symbols.NT_RepClsBDecl0x])
			}
		case slot.RepClsBDecl0x1R0: // RepClsBDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepClsBDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepClsBDecl0x) {
				p.rtn(symbols.NT_RepClsBDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepClsBDecl0x1R0, p.cI, followSets[symbols.NT_RepClsBDecl0x])
			}
		case slot.RepComCls0x0R0: // RepComCls0x : ∙COMMA ClsType RepComCls0x

			p.call(slot.RepComCls0x0R1, cU, p.cI)
		case slot.RepComCls0x0R1: // RepComCls0x : COMMA ∙ClsType RepComCls0x

			if !p.testSelect(slot.RepComCls0x0R1) {
				p.parseError(slot.RepComCls0x0R1, p.cI, first[slot.RepComCls0x0R1])
				break
			}

			p.call(slot.RepComCls0x0R2, cU, p.cI)
		case slot.RepComCls0x0R2: // RepComCls0x : COMMA ClsType ∙RepComCls0x

			if !p.testSelect(slot.RepComCls0x0R2) {
				p.parseError(slot.RepComCls0x0R2, p.cI, first[slot.RepComCls0x0R2])
				break
			}

			p.call(slot.RepComCls0x0R3, cU, p.cI)
		case slot.RepComCls0x0R3: // RepComCls0x : COMMA ClsType RepComCls0x ∙

			if p.follow(symbols.NT_RepComCls0x) {
				p.rtn(symbols.NT_RepComCls0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComCls0x0R0, p.cI, followSets[symbols.NT_RepComCls0x])
			}
		case slot.RepComCls0x1R0: // RepComCls0x : ∙
			p.bsrSet.AddEmpty(slot.RepComCls0x1R0, p.cI)

			if p.follow(symbols.NT_RepComCls0x) {
				p.rtn(symbols.NT_RepComCls0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComCls0x1R0, p.cI, followSets[symbols.NT_RepComCls0x])
			}
		case slot.RepComCnstDecl0x0R0: // RepComCnstDecl0x : ∙COMMA ConstDecl RepComCnstDecl0x

			p.call(slot.RepComCnstDecl0x0R1, cU, p.cI)
		case slot.RepComCnstDecl0x0R1: // RepComCnstDecl0x : COMMA ∙ConstDecl RepComCnstDecl0x

			if !p.testSelect(slot.RepComCnstDecl0x0R1) {
				p.parseError(slot.RepComCnstDecl0x0R1, p.cI, first[slot.RepComCnstDecl0x0R1])
				break
			}

			p.call(slot.RepComCnstDecl0x0R2, cU, p.cI)
		case slot.RepComCnstDecl0x0R2: // RepComCnstDecl0x : COMMA ConstDecl ∙RepComCnstDecl0x

			if !p.testSelect(slot.RepComCnstDecl0x0R2) {
				p.parseError(slot.RepComCnstDecl0x0R2, p.cI, first[slot.RepComCnstDecl0x0R2])
				break
			}

			p.call(slot.RepComCnstDecl0x0R3, cU, p.cI)
		case slot.RepComCnstDecl0x0R3: // RepComCnstDecl0x : COMMA ConstDecl RepComCnstDecl0x ∙

			if p.follow(symbols.NT_RepComCnstDecl0x) {
				p.rtn(symbols.NT_RepComCnstDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComCnstDecl0x0R0, p.cI, followSets[symbols.NT_RepComCnstDecl0x])
			}
		case slot.RepComCnstDecl0x1R0: // RepComCnstDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepComCnstDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepComCnstDecl0x) {
				p.rtn(symbols.NT_RepComCnstDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComCnstDecl0x1R0, p.cI, followSets[symbols.NT_RepComCnstDecl0x])
			}
		case slot.RepComExp0x0R0: // RepComExp0x : ∙COMMA Expr RepComExp0x

			p.call(slot.RepComExp0x0R1, cU, p.cI)
		case slot.RepComExp0x0R1: // RepComExp0x : COMMA ∙Expr RepComExp0x

			if !p.testSelect(slot.RepComExp0x0R1) {
				p.parseError(slot.RepComExp0x0R1, p.cI, first[slot.RepComExp0x0R1])
				break
			}

			p.call(slot.RepComExp0x0R2, cU, p.cI)
		case slot.RepComExp0x0R2: // RepComExp0x : COMMA Expr ∙RepComExp0x

			if !p.testSelect(slot.RepComExp0x0R2) {
				p.parseError(slot.RepComExp0x0R2, p.cI, first[slot.RepComExp0x0R2])
				break
			}

			p.call(slot.RepComExp0x0R3, cU, p.cI)
		case slot.RepComExp0x0R3: // RepComExp0x : COMMA Expr RepComExp0x ∙

			if p.follow(symbols.NT_RepComExp0x) {
				p.rtn(symbols.NT_RepComExp0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComExp0x0R0, p.cI, followSets[symbols.NT_RepComExp0x])
			}
		case slot.RepComExp0x1R0: // RepComExp0x : ∙
			p.bsrSet.AddEmpty(slot.RepComExp0x1R0, p.cI)

			if p.follow(symbols.NT_RepComExp0x) {
				p.rtn(symbols.NT_RepComExp0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComExp0x1R0, p.cI, followSets[symbols.NT_RepComExp0x])
			}
		case slot.RepComInit0x0R0: // RepComInit0x : ∙COMMA VarInitial RepComInit0x

			p.call(slot.RepComInit0x0R1, cU, p.cI)
		case slot.RepComInit0x0R1: // RepComInit0x : COMMA ∙VarInitial RepComInit0x

			if !p.testSelect(slot.RepComInit0x0R1) {
				p.parseError(slot.RepComInit0x0R1, p.cI, first[slot.RepComInit0x0R1])
				break
			}

			p.call(slot.RepComInit0x0R2, cU, p.cI)
		case slot.RepComInit0x0R2: // RepComInit0x : COMMA VarInitial ∙RepComInit0x

			if !p.testSelect(slot.RepComInit0x0R2) {
				p.parseError(slot.RepComInit0x0R2, p.cI, first[slot.RepComInit0x0R2])
				break
			}

			p.call(slot.RepComInit0x0R3, cU, p.cI)
		case slot.RepComInit0x0R3: // RepComInit0x : COMMA VarInitial RepComInit0x ∙

			if p.follow(symbols.NT_RepComInit0x) {
				p.rtn(symbols.NT_RepComInit0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComInit0x0R0, p.cI, followSets[symbols.NT_RepComInit0x])
			}
		case slot.RepComInit0x1R0: // RepComInit0x : ∙
			p.bsrSet.AddEmpty(slot.RepComInit0x1R0, p.cI)

			if p.follow(symbols.NT_RepComInit0x) {
				p.rtn(symbols.NT_RepComInit0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComInit0x1R0, p.cI, followSets[symbols.NT_RepComInit0x])
			}
		case slot.RepComSExpr0x0R0: // RepComSExpr0x : ∙COMMA StmtExpr RepComSExpr0x

			p.call(slot.RepComSExpr0x0R1, cU, p.cI)
		case slot.RepComSExpr0x0R1: // RepComSExpr0x : COMMA ∙StmtExpr RepComSExpr0x

			if !p.testSelect(slot.RepComSExpr0x0R1) {
				p.parseError(slot.RepComSExpr0x0R1, p.cI, first[slot.RepComSExpr0x0R1])
				break
			}

			p.call(slot.RepComSExpr0x0R2, cU, p.cI)
		case slot.RepComSExpr0x0R2: // RepComSExpr0x : COMMA StmtExpr ∙RepComSExpr0x

			if !p.testSelect(slot.RepComSExpr0x0R2) {
				p.parseError(slot.RepComSExpr0x0R2, p.cI, first[slot.RepComSExpr0x0R2])
				break
			}

			p.call(slot.RepComSExpr0x0R3, cU, p.cI)
		case slot.RepComSExpr0x0R3: // RepComSExpr0x : COMMA StmtExpr RepComSExpr0x ∙

			if p.follow(symbols.NT_RepComSExpr0x) {
				p.rtn(symbols.NT_RepComSExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComSExpr0x0R0, p.cI, followSets[symbols.NT_RepComSExpr0x])
			}
		case slot.RepComSExpr0x1R0: // RepComSExpr0x : ∙
			p.bsrSet.AddEmpty(slot.RepComSExpr0x1R0, p.cI)

			if p.follow(symbols.NT_RepComSExpr0x) {
				p.rtn(symbols.NT_RepComSExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComSExpr0x1R0, p.cI, followSets[symbols.NT_RepComSExpr0x])
			}
		case slot.RepComVDecl0x0R0: // RepComVDecl0x : ∙COMMA VarDecl RepComVDecl0x

			p.call(slot.RepComVDecl0x0R1, cU, p.cI)
		case slot.RepComVDecl0x0R1: // RepComVDecl0x : COMMA ∙VarDecl RepComVDecl0x

			if !p.testSelect(slot.RepComVDecl0x0R1) {
				p.parseError(slot.RepComVDecl0x0R1, p.cI, first[slot.RepComVDecl0x0R1])
				break
			}

			p.call(slot.RepComVDecl0x0R2, cU, p.cI)
		case slot.RepComVDecl0x0R2: // RepComVDecl0x : COMMA VarDecl ∙RepComVDecl0x

			if !p.testSelect(slot.RepComVDecl0x0R2) {
				p.parseError(slot.RepComVDecl0x0R2, p.cI, first[slot.RepComVDecl0x0R2])
				break
			}

			p.call(slot.RepComVDecl0x0R3, cU, p.cI)
		case slot.RepComVDecl0x0R3: // RepComVDecl0x : COMMA VarDecl RepComVDecl0x ∙

			if p.follow(symbols.NT_RepComVDecl0x) {
				p.rtn(symbols.NT_RepComVDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComVDecl0x0R0, p.cI, followSets[symbols.NT_RepComVDecl0x])
			}
		case slot.RepComVDecl0x1R0: // RepComVDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepComVDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepComVDecl0x) {
				p.rtn(symbols.NT_RepComVDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepComVDecl0x1R0, p.cI, followSets[symbols.NT_RepComVDecl0x])
			}
		case slot.RepCondition0x0R0: // RepCondition0x : ∙QUERY Expr COLON CondORExpr RepCondition0x

			p.call(slot.RepCondition0x0R1, cU, p.cI)
		case slot.RepCondition0x0R1: // RepCondition0x : QUERY ∙Expr COLON CondORExpr RepCondition0x

			if !p.testSelect(slot.RepCondition0x0R1) {
				p.parseError(slot.RepCondition0x0R1, p.cI, first[slot.RepCondition0x0R1])
				break
			}

			p.call(slot.RepCondition0x0R2, cU, p.cI)
		case slot.RepCondition0x0R2: // RepCondition0x : QUERY Expr ∙COLON CondORExpr RepCondition0x

			if !p.testSelect(slot.RepCondition0x0R2) {
				p.parseError(slot.RepCondition0x0R2, p.cI, first[slot.RepCondition0x0R2])
				break
			}

			p.call(slot.RepCondition0x0R3, cU, p.cI)
		case slot.RepCondition0x0R3: // RepCondition0x : QUERY Expr COLON ∙CondORExpr RepCondition0x

			if !p.testSelect(slot.RepCondition0x0R3) {
				p.parseError(slot.RepCondition0x0R3, p.cI, first[slot.RepCondition0x0R3])
				break
			}

			p.call(slot.RepCondition0x0R4, cU, p.cI)
		case slot.RepCondition0x0R4: // RepCondition0x : QUERY Expr COLON CondORExpr ∙RepCondition0x

			if !p.testSelect(slot.RepCondition0x0R4) {
				p.parseError(slot.RepCondition0x0R4, p.cI, first[slot.RepCondition0x0R4])
				break
			}

			p.call(slot.RepCondition0x0R5, cU, p.cI)
		case slot.RepCondition0x0R5: // RepCondition0x : QUERY Expr COLON CondORExpr RepCondition0x ∙

			if p.follow(symbols.NT_RepCondition0x) {
				p.rtn(symbols.NT_RepCondition0x, cU, p.cI)
			} else {
				p.parseError(slot.RepCondition0x0R0, p.cI, followSets[symbols.NT_RepCondition0x])
			}
		case slot.RepCondition0x1R0: // RepCondition0x : ∙
			p.bsrSet.AddEmpty(slot.RepCondition0x1R0, p.cI)

			if p.follow(symbols.NT_RepCondition0x) {
				p.rtn(symbols.NT_RepCondition0x, cU, p.cI)
			} else {
				p.parseError(slot.RepCondition0x1R0, p.cI, followSets[symbols.NT_RepCondition0x])
			}
		case slot.RepDig1xExp0R0: // RepDig1xExp : ∙repDig1x exponent

			p.bsrSet.Add(slot.RepDig1xExp0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RepDig1xExp0R1) {
				p.parseError(slot.RepDig1xExp0R1, p.cI, first[slot.RepDig1xExp0R1])
				break
			}

			p.bsrSet.Add(slot.RepDig1xExp0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_RepDig1xExp) {
				p.rtn(symbols.NT_RepDig1xExp, cU, p.cI)
			} else {
				p.parseError(slot.RepDig1xExp0R0, p.cI, followSets[symbols.NT_RepDig1xExp])
			}
		case slot.RepDig1xOptExp0R0: // RepDig1xOptExp : ∙repDig1x optExpo

			p.bsrSet.Add(slot.RepDig1xOptExp0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RepDig1xOptExp0R1) {
				p.parseError(slot.RepDig1xOptExp0R1, p.cI, first[slot.RepDig1xOptExp0R1])
				break
			}

			p.bsrSet.Add(slot.RepDig1xOptExp0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_RepDig1xOptExp) {
				p.rtn(symbols.NT_RepDig1xOptExp, cU, p.cI)
			} else {
				p.parseError(slot.RepDig1xOptExp0R0, p.cI, followSets[symbols.NT_RepDig1xOptExp])
			}
		case slot.RepDim0x0R0: // RepDim0x : ∙Dim RepDim0x

			p.call(slot.RepDim0x0R1, cU, p.cI)
		case slot.RepDim0x0R1: // RepDim0x : Dim ∙RepDim0x

			if !p.testSelect(slot.RepDim0x0R1) {
				p.parseError(slot.RepDim0x0R1, p.cI, first[slot.RepDim0x0R1])
				break
			}

			p.call(slot.RepDim0x0R2, cU, p.cI)
		case slot.RepDim0x0R2: // RepDim0x : Dim RepDim0x ∙

			if p.follow(symbols.NT_RepDim0x) {
				p.rtn(symbols.NT_RepDim0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDim0x0R0, p.cI, followSets[symbols.NT_RepDim0x])
			}
		case slot.RepDim0x1R0: // RepDim0x : ∙
			p.bsrSet.AddEmpty(slot.RepDim0x1R0, p.cI)

			if p.follow(symbols.NT_RepDim0x) {
				p.rtn(symbols.NT_RepDim0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDim0x1R0, p.cI, followSets[symbols.NT_RepDim0x])
			}
		case slot.RepDimExpr0x0R0: // RepDimExpr0x : ∙DimExpr RepDimExpr0x

			p.call(slot.RepDimExpr0x0R1, cU, p.cI)
		case slot.RepDimExpr0x0R1: // RepDimExpr0x : DimExpr ∙RepDimExpr0x

			if !p.testSelect(slot.RepDimExpr0x0R1) {
				p.parseError(slot.RepDimExpr0x0R1, p.cI, first[slot.RepDimExpr0x0R1])
				break
			}

			p.call(slot.RepDimExpr0x0R2, cU, p.cI)
		case slot.RepDimExpr0x0R2: // RepDimExpr0x : DimExpr RepDimExpr0x ∙

			if p.follow(symbols.NT_RepDimExpr0x) {
				p.rtn(symbols.NT_RepDimExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDimExpr0x0R0, p.cI, followSets[symbols.NT_RepDimExpr0x])
			}
		case slot.RepDimExpr0x1R0: // RepDimExpr0x : ∙
			p.bsrSet.AddEmpty(slot.RepDimExpr0x1R0, p.cI)

			if p.follow(symbols.NT_RepDimExpr0x) {
				p.rtn(symbols.NT_RepDimExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDimExpr0x1R0, p.cI, followSets[symbols.NT_RepDimExpr0x])
			}
		case slot.RepDotID0x0R0: // RepDotID0x : ∙DOT ID RepDotID0x

			p.call(slot.RepDotID0x0R1, cU, p.cI)
		case slot.RepDotID0x0R1: // RepDotID0x : DOT ∙ID RepDotID0x

			if !p.testSelect(slot.RepDotID0x0R1) {
				p.parseError(slot.RepDotID0x0R1, p.cI, first[slot.RepDotID0x0R1])
				break
			}

			p.call(slot.RepDotID0x0R2, cU, p.cI)
		case slot.RepDotID0x0R2: // RepDotID0x : DOT ID ∙RepDotID0x

			if !p.testSelect(slot.RepDotID0x0R2) {
				p.parseError(slot.RepDotID0x0R2, p.cI, first[slot.RepDotID0x0R2])
				break
			}

			p.call(slot.RepDotID0x0R3, cU, p.cI)
		case slot.RepDotID0x0R3: // RepDotID0x : DOT ID RepDotID0x ∙

			if p.follow(symbols.NT_RepDotID0x) {
				p.rtn(symbols.NT_RepDotID0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDotID0x0R0, p.cI, followSets[symbols.NT_RepDotID0x])
			}
		case slot.RepDotID0x1R0: // RepDotID0x : ∙
			p.bsrSet.AddEmpty(slot.RepDotID0x1R0, p.cI)

			if p.follow(symbols.NT_RepDotID0x) {
				p.rtn(symbols.NT_RepDotID0x, cU, p.cI)
			} else {
				p.parseError(slot.RepDotID0x1R0, p.cI, followSets[symbols.NT_RepDotID0x])
			}
		case slot.RepESInst0x0R0: // RepESInst0x : ∙ESInst RepESInst0x

			p.call(slot.RepESInst0x0R1, cU, p.cI)
		case slot.RepESInst0x0R1: // RepESInst0x : ESInst ∙RepESInst0x

			if !p.testSelect(slot.RepESInst0x0R1) {
				p.parseError(slot.RepESInst0x0R1, p.cI, first[slot.RepESInst0x0R1])
				break
			}

			p.call(slot.RepESInst0x0R2, cU, p.cI)
		case slot.RepESInst0x0R2: // RepESInst0x : ESInst RepESInst0x ∙

			if p.follow(symbols.NT_RepESInst0x) {
				p.rtn(symbols.NT_RepESInst0x, cU, p.cI)
			} else {
				p.parseError(slot.RepESInst0x0R0, p.cI, followSets[symbols.NT_RepESInst0x])
			}
		case slot.RepESInst0x1R0: // RepESInst0x : ∙
			p.bsrSet.AddEmpty(slot.RepESInst0x1R0, p.cI)

			if p.follow(symbols.NT_RepESInst0x) {
				p.rtn(symbols.NT_RepESInst0x, cU, p.cI)
			} else {
				p.parseError(slot.RepESInst0x1R0, p.cI, followSets[symbols.NT_RepESInst0x])
			}
		case slot.RepEqExpr0x0R0: // RepEqExpr0x : ∙EqAlts RelateExpr RepEqExpr0x

			p.call(slot.RepEqExpr0x0R1, cU, p.cI)
		case slot.RepEqExpr0x0R1: // RepEqExpr0x : EqAlts ∙RelateExpr RepEqExpr0x

			if !p.testSelect(slot.RepEqExpr0x0R1) {
				p.parseError(slot.RepEqExpr0x0R1, p.cI, first[slot.RepEqExpr0x0R1])
				break
			}

			p.call(slot.RepEqExpr0x0R2, cU, p.cI)
		case slot.RepEqExpr0x0R2: // RepEqExpr0x : EqAlts RelateExpr ∙RepEqExpr0x

			if !p.testSelect(slot.RepEqExpr0x0R2) {
				p.parseError(slot.RepEqExpr0x0R2, p.cI, first[slot.RepEqExpr0x0R2])
				break
			}

			p.call(slot.RepEqExpr0x0R3, cU, p.cI)
		case slot.RepEqExpr0x0R3: // RepEqExpr0x : EqAlts RelateExpr RepEqExpr0x ∙

			if p.follow(symbols.NT_RepEqExpr0x) {
				p.rtn(symbols.NT_RepEqExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepEqExpr0x0R0, p.cI, followSets[symbols.NT_RepEqExpr0x])
			}
		case slot.RepEqExpr0x1R0: // RepEqExpr0x : ∙
			p.bsrSet.AddEmpty(slot.RepEqExpr0x1R0, p.cI)

			if p.follow(symbols.NT_RepEqExpr0x) {
				p.rtn(symbols.NT_RepEqExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepEqExpr0x1R0, p.cI, followSets[symbols.NT_RepEqExpr0x])
			}
		case slot.RepHatAND0x0R0: // RepHatAND0x : ∙HAT ANDExpr RepHatAND0x

			p.call(slot.RepHatAND0x0R1, cU, p.cI)
		case slot.RepHatAND0x0R1: // RepHatAND0x : HAT ∙ANDExpr RepHatAND0x

			if !p.testSelect(slot.RepHatAND0x0R1) {
				p.parseError(slot.RepHatAND0x0R1, p.cI, first[slot.RepHatAND0x0R1])
				break
			}

			p.call(slot.RepHatAND0x0R2, cU, p.cI)
		case slot.RepHatAND0x0R2: // RepHatAND0x : HAT ANDExpr ∙RepHatAND0x

			if !p.testSelect(slot.RepHatAND0x0R2) {
				p.parseError(slot.RepHatAND0x0R2, p.cI, first[slot.RepHatAND0x0R2])
				break
			}

			p.call(slot.RepHatAND0x0R3, cU, p.cI)
		case slot.RepHatAND0x0R3: // RepHatAND0x : HAT ANDExpr RepHatAND0x ∙

			if p.follow(symbols.NT_RepHatAND0x) {
				p.rtn(symbols.NT_RepHatAND0x, cU, p.cI)
			} else {
				p.parseError(slot.RepHatAND0x0R0, p.cI, followSets[symbols.NT_RepHatAND0x])
			}
		case slot.RepHatAND0x1R0: // RepHatAND0x : ∙
			p.bsrSet.AddEmpty(slot.RepHatAND0x1R0, p.cI)

			if p.follow(symbols.NT_RepHatAND0x) {
				p.rtn(symbols.NT_RepHatAND0x, cU, p.cI)
			} else {
				p.parseError(slot.RepHatAND0x1R0, p.cI, followSets[symbols.NT_RepHatAND0x])
			}
		case slot.RepHex0xDot0R0: // RepHex0xDot : ∙Any0xX repHex0x .

			p.call(slot.RepHex0xDot0R1, cU, p.cI)
		case slot.RepHex0xDot0R1: // RepHex0xDot : Any0xX ∙repHex0x .

			if !p.testSelect(slot.RepHex0xDot0R1) {
				p.parseError(slot.RepHex0xDot0R1, p.cI, first[slot.RepHex0xDot0R1])
				break
			}

			p.bsrSet.Add(slot.RepHex0xDot0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RepHex0xDot0R2) {
				p.parseError(slot.RepHex0xDot0R2, p.cI, first[slot.RepHex0xDot0R2])
				break
			}

			p.bsrSet.Add(slot.RepHex0xDot0R3, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_RepHex0xDot) {
				p.rtn(symbols.NT_RepHex0xDot, cU, p.cI)
			} else {
				p.parseError(slot.RepHex0xDot0R0, p.cI, followSets[symbols.NT_RepHex0xDot])
			}
		case slot.RepImpDecl0x0R0: // RepImpDecl0x : ∙ImportDecl RepImpDecl0x

			p.call(slot.RepImpDecl0x0R1, cU, p.cI)
		case slot.RepImpDecl0x0R1: // RepImpDecl0x : ImportDecl ∙RepImpDecl0x

			if !p.testSelect(slot.RepImpDecl0x0R1) {
				p.parseError(slot.RepImpDecl0x0R1, p.cI, first[slot.RepImpDecl0x0R1])
				break
			}

			p.call(slot.RepImpDecl0x0R2, cU, p.cI)
		case slot.RepImpDecl0x0R2: // RepImpDecl0x : ImportDecl RepImpDecl0x ∙

			if p.follow(symbols.NT_RepImpDecl0x) {
				p.rtn(symbols.NT_RepImpDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepImpDecl0x0R0, p.cI, followSets[symbols.NT_RepImpDecl0x])
			}
		case slot.RepImpDecl0x1R0: // RepImpDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepImpDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepImpDecl0x) {
				p.rtn(symbols.NT_RepImpDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepImpDecl0x1R0, p.cI, followSets[symbols.NT_RepImpDecl0x])
			}
		case slot.RepInBodDecl0x0R0: // RepInBodDecl0x : ∙IntfBdyDecl RepInBodDecl0x

			p.call(slot.RepInBodDecl0x0R1, cU, p.cI)
		case slot.RepInBodDecl0x0R1: // RepInBodDecl0x : IntfBdyDecl ∙RepInBodDecl0x

			if !p.testSelect(slot.RepInBodDecl0x0R1) {
				p.parseError(slot.RepInBodDecl0x0R1, p.cI, first[slot.RepInBodDecl0x0R1])
				break
			}

			p.call(slot.RepInBodDecl0x0R2, cU, p.cI)
		case slot.RepInBodDecl0x0R2: // RepInBodDecl0x : IntfBdyDecl RepInBodDecl0x ∙

			if p.follow(symbols.NT_RepInBodDecl0x) {
				p.rtn(symbols.NT_RepInBodDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepInBodDecl0x0R0, p.cI, followSets[symbols.NT_RepInBodDecl0x])
			}
		case slot.RepInBodDecl0x1R0: // RepInBodDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepInBodDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepInBodDecl0x) {
				p.rtn(symbols.NT_RepInBodDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepInBodDecl0x1R0, p.cI, followSets[symbols.NT_RepInBodDecl0x])
			}
		case slot.RepLorD0x0R0: // RepLorD0x : ∙LorD RepLorD0x

			p.call(slot.RepLorD0x0R1, cU, p.cI)
		case slot.RepLorD0x0R1: // RepLorD0x : LorD ∙RepLorD0x

			if !p.testSelect(slot.RepLorD0x0R1) {
				p.parseError(slot.RepLorD0x0R1, p.cI, first[slot.RepLorD0x0R1])
				break
			}

			p.call(slot.RepLorD0x0R2, cU, p.cI)
		case slot.RepLorD0x0R2: // RepLorD0x : LorD RepLorD0x ∙

			if p.follow(symbols.NT_RepLorD0x) {
				p.rtn(symbols.NT_RepLorD0x, cU, p.cI)
			} else {
				p.parseError(slot.RepLorD0x0R0, p.cI, followSets[symbols.NT_RepLorD0x])
			}
		case slot.RepLorD0x1R0: // RepLorD0x : ∙
			p.bsrSet.AddEmpty(slot.RepLorD0x1R0, p.cI)

			if p.follow(symbols.NT_RepLorD0x) {
				p.rtn(symbols.NT_RepLorD0x, cU, p.cI)
			} else {
				p.parseError(slot.RepLorD0x1R0, p.cI, followSets[symbols.NT_RepLorD0x])
			}
		case slot.RepModif00R0: // RepModif0 : ∙Modifier RepModif0

			p.call(slot.RepModif00R1, cU, p.cI)
		case slot.RepModif00R1: // RepModif0 : Modifier ∙RepModif0

			if !p.testSelect(slot.RepModif00R1) {
				p.parseError(slot.RepModif00R1, p.cI, first[slot.RepModif00R1])
				break
			}

			p.call(slot.RepModif00R2, cU, p.cI)
		case slot.RepModif00R2: // RepModif0 : Modifier RepModif0 ∙

			if p.follow(symbols.NT_RepModif0) {
				p.rtn(symbols.NT_RepModif0, cU, p.cI)
			} else {
				p.parseError(slot.RepModif00R0, p.cI, followSets[symbols.NT_RepModif0])
			}
		case slot.RepModif01R0: // RepModif0 : ∙
			p.bsrSet.AddEmpty(slot.RepModif01R0, p.cI)

			if p.follow(symbols.NT_RepModif0) {
				p.rtn(symbols.NT_RepModif0, cU, p.cI)
			} else {
				p.parseError(slot.RepModif01R0, p.cI, followSets[symbols.NT_RepModif0])
			}
		case slot.RepORXOR0x0R0: // RepORXOR0x : ∙ORXOR RepORXOR0x

			p.call(slot.RepORXOR0x0R1, cU, p.cI)
		case slot.RepORXOR0x0R1: // RepORXOR0x : ORXOR ∙RepORXOR0x

			if !p.testSelect(slot.RepORXOR0x0R1) {
				p.parseError(slot.RepORXOR0x0R1, p.cI, first[slot.RepORXOR0x0R1])
				break
			}

			p.call(slot.RepORXOR0x0R2, cU, p.cI)
		case slot.RepORXOR0x0R2: // RepORXOR0x : ORXOR RepORXOR0x ∙

			if p.follow(symbols.NT_RepORXOR0x) {
				p.rtn(symbols.NT_RepORXOR0x, cU, p.cI)
			} else {
				p.parseError(slot.RepORXOR0x0R0, p.cI, followSets[symbols.NT_RepORXOR0x])
			}
		case slot.RepORXOR0x1R0: // RepORXOR0x : ∙
			p.bsrSet.AddEmpty(slot.RepORXOR0x1R0, p.cI)

			if p.follow(symbols.NT_RepORXOR0x) {
				p.rtn(symbols.NT_RepORXOR0x, cU, p.cI)
			} else {
				p.parseError(slot.RepORXOR0x1R0, p.cI, followSets[symbols.NT_RepORXOR0x])
			}
		case slot.RepORcAND0x0R0: // RepORcAND0x : ∙OR_OR CondANDExpr RepORcAND0x

			p.call(slot.RepORcAND0x0R1, cU, p.cI)
		case slot.RepORcAND0x0R1: // RepORcAND0x : OR_OR ∙CondANDExpr RepORcAND0x

			if !p.testSelect(slot.RepORcAND0x0R1) {
				p.parseError(slot.RepORcAND0x0R1, p.cI, first[slot.RepORcAND0x0R1])
				break
			}

			p.call(slot.RepORcAND0x0R2, cU, p.cI)
		case slot.RepORcAND0x0R2: // RepORcAND0x : OR_OR CondANDExpr ∙RepORcAND0x

			if !p.testSelect(slot.RepORcAND0x0R2) {
				p.parseError(slot.RepORcAND0x0R2, p.cI, first[slot.RepORcAND0x0R2])
				break
			}

			p.call(slot.RepORcAND0x0R3, cU, p.cI)
		case slot.RepORcAND0x0R3: // RepORcAND0x : OR_OR CondANDExpr RepORcAND0x ∙

			if p.follow(symbols.NT_RepORcAND0x) {
				p.rtn(symbols.NT_RepORcAND0x, cU, p.cI)
			} else {
				p.parseError(slot.RepORcAND0x0R0, p.cI, followSets[symbols.NT_RepORcAND0x])
			}
		case slot.RepORcAND0x1R0: // RepORcAND0x : ∙
			p.bsrSet.AddEmpty(slot.RepORcAND0x1R0, p.cI)

			if p.follow(symbols.NT_RepORcAND0x) {
				p.rtn(symbols.NT_RepORcAND0x, cU, p.cI)
			} else {
				p.parseError(slot.RepORcAND0x1R0, p.cI, followSets[symbols.NT_RepORcAND0x])
			}
		case slot.RepPfOp0x0R0: // RepPfOp0x : ∙PostfixOp RepPfOp0x

			p.call(slot.RepPfOp0x0R1, cU, p.cI)
		case slot.RepPfOp0x0R1: // RepPfOp0x : PostfixOp ∙RepPfOp0x

			if !p.testSelect(slot.RepPfOp0x0R1) {
				p.parseError(slot.RepPfOp0x0R1, p.cI, first[slot.RepPfOp0x0R1])
				break
			}

			p.call(slot.RepPfOp0x0R2, cU, p.cI)
		case slot.RepPfOp0x0R2: // RepPfOp0x : PostfixOp RepPfOp0x ∙

			if p.follow(symbols.NT_RepPfOp0x) {
				p.rtn(symbols.NT_RepPfOp0x, cU, p.cI)
			} else {
				p.parseError(slot.RepPfOp0x0R0, p.cI, followSets[symbols.NT_RepPfOp0x])
			}
		case slot.RepPfOp0x1R0: // RepPfOp0x : ∙
			p.bsrSet.AddEmpty(slot.RepPfOp0x1R0, p.cI)

			if p.follow(symbols.NT_RepPfOp0x) {
				p.rtn(symbols.NT_RepPfOp0x, cU, p.cI)
			} else {
				p.parseError(slot.RepPfOp0x1R0, p.cI, followSets[symbols.NT_RepPfOp0x])
			}
		case slot.RepSDMUExpr0x0R0: // RepSDMUExpr0x : ∙SDM UnaryExpr RepSDMUExpr0x

			p.call(slot.RepSDMUExpr0x0R1, cU, p.cI)
		case slot.RepSDMUExpr0x0R1: // RepSDMUExpr0x : SDM ∙UnaryExpr RepSDMUExpr0x

			if !p.testSelect(slot.RepSDMUExpr0x0R1) {
				p.parseError(slot.RepSDMUExpr0x0R1, p.cI, first[slot.RepSDMUExpr0x0R1])
				break
			}

			p.call(slot.RepSDMUExpr0x0R2, cU, p.cI)
		case slot.RepSDMUExpr0x0R2: // RepSDMUExpr0x : SDM UnaryExpr ∙RepSDMUExpr0x

			if !p.testSelect(slot.RepSDMUExpr0x0R2) {
				p.parseError(slot.RepSDMUExpr0x0R2, p.cI, first[slot.RepSDMUExpr0x0R2])
				break
			}

			p.call(slot.RepSDMUExpr0x0R3, cU, p.cI)
		case slot.RepSDMUExpr0x0R3: // RepSDMUExpr0x : SDM UnaryExpr RepSDMUExpr0x ∙

			if p.follow(symbols.NT_RepSDMUExpr0x) {
				p.rtn(symbols.NT_RepSDMUExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSDMUExpr0x0R0, p.cI, followSets[symbols.NT_RepSDMUExpr0x])
			}
		case slot.RepSDMUExpr0x1R0: // RepSDMUExpr0x : ∙
			p.bsrSet.AddEmpty(slot.RepSDMUExpr0x1R0, p.cI)

			if p.follow(symbols.NT_RepSDMUExpr0x) {
				p.rtn(symbols.NT_RepSDMUExpr0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSDMUExpr0x1R0, p.cI, followSets[symbols.NT_RepSDMUExpr0x])
			}
		case slot.RepSel0x0R0: // RepSel0x : ∙Selector RepSel0x

			p.call(slot.RepSel0x0R1, cU, p.cI)
		case slot.RepSel0x0R1: // RepSel0x : Selector ∙RepSel0x

			if !p.testSelect(slot.RepSel0x0R1) {
				p.parseError(slot.RepSel0x0R1, p.cI, first[slot.RepSel0x0R1])
				break
			}

			p.call(slot.RepSel0x0R2, cU, p.cI)
		case slot.RepSel0x0R2: // RepSel0x : Selector RepSel0x ∙

			if p.follow(symbols.NT_RepSel0x) {
				p.rtn(symbols.NT_RepSel0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSel0x0R0, p.cI, followSets[symbols.NT_RepSel0x])
			}
		case slot.RepSel0x1R0: // RepSel0x : ∙
			p.bsrSet.AddEmpty(slot.RepSel0x1R0, p.cI)

			if p.follow(symbols.NT_RepSel0x) {
				p.rtn(symbols.NT_RepSel0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSel0x1R0, p.cI, followSets[symbols.NT_RepSel0x])
			}
		case slot.RepSemiModDecl0x0R0: // RepSemiModDecl0x : ∙SemiModDecl RepSemiModDecl0x

			p.call(slot.RepSemiModDecl0x0R1, cU, p.cI)
		case slot.RepSemiModDecl0x0R1: // RepSemiModDecl0x : SemiModDecl ∙RepSemiModDecl0x

			if !p.testSelect(slot.RepSemiModDecl0x0R1) {
				p.parseError(slot.RepSemiModDecl0x0R1, p.cI, first[slot.RepSemiModDecl0x0R1])
				break
			}

			p.call(slot.RepSemiModDecl0x0R2, cU, p.cI)
		case slot.RepSemiModDecl0x0R2: // RepSemiModDecl0x : SemiModDecl RepSemiModDecl0x ∙

			if p.follow(symbols.NT_RepSemiModDecl0x) {
				p.rtn(symbols.NT_RepSemiModDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSemiModDecl0x0R0, p.cI, followSets[symbols.NT_RepSemiModDecl0x])
			}
		case slot.RepSemiModDecl0x1R0: // RepSemiModDecl0x : ∙
			p.bsrSet.AddEmpty(slot.RepSemiModDecl0x1R0, p.cI)

			if p.follow(symbols.NT_RepSemiModDecl0x) {
				p.rtn(symbols.NT_RepSemiModDecl0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSemiModDecl0x1R0, p.cI, followSets[symbols.NT_RepSemiModDecl0x])
			}
		case slot.RepSwBlkStmt0x0R0: // RepSwBlkStmt0x : ∙SwitchBlockStmtGrp RepSwBlkStmt0x

			p.call(slot.RepSwBlkStmt0x0R1, cU, p.cI)
		case slot.RepSwBlkStmt0x0R1: // RepSwBlkStmt0x : SwitchBlockStmtGrp ∙RepSwBlkStmt0x

			if !p.testSelect(slot.RepSwBlkStmt0x0R1) {
				p.parseError(slot.RepSwBlkStmt0x0R1, p.cI, first[slot.RepSwBlkStmt0x0R1])
				break
			}

			p.call(slot.RepSwBlkStmt0x0R2, cU, p.cI)
		case slot.RepSwBlkStmt0x0R2: // RepSwBlkStmt0x : SwitchBlockStmtGrp RepSwBlkStmt0x ∙

			if p.follow(symbols.NT_RepSwBlkStmt0x) {
				p.rtn(symbols.NT_RepSwBlkStmt0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSwBlkStmt0x0R0, p.cI, followSets[symbols.NT_RepSwBlkStmt0x])
			}
		case slot.RepSwBlkStmt0x1R0: // RepSwBlkStmt0x : ∙
			p.bsrSet.AddEmpty(slot.RepSwBlkStmt0x1R0, p.cI)

			if p.follow(symbols.NT_RepSwBlkStmt0x) {
				p.rtn(symbols.NT_RepSwBlkStmt0x, cU, p.cI)
			} else {
				p.parseError(slot.RepSwBlkStmt0x1R0, p.cI, followSets[symbols.NT_RepSwBlkStmt0x])
			}
		case slot.SDM0R0: // SDM : ∙STAR

			p.call(slot.SDM0R1, cU, p.cI)
		case slot.SDM0R1: // SDM : STAR ∙

			if p.follow(symbols.NT_SDM) {
				p.rtn(symbols.NT_SDM, cU, p.cI)
			} else {
				p.parseError(slot.SDM0R0, p.cI, followSets[symbols.NT_SDM])
			}
		case slot.SDM1R0: // SDM : ∙DIV

			p.call(slot.SDM1R1, cU, p.cI)
		case slot.SDM1R1: // SDM : DIV ∙

			if p.follow(symbols.NT_SDM) {
				p.rtn(symbols.NT_SDM, cU, p.cI)
			} else {
				p.parseError(slot.SDM1R0, p.cI, followSets[symbols.NT_SDM])
			}
		case slot.SDM2R0: // SDM : ∙MOD

			p.call(slot.SDM2R1, cU, p.cI)
		case slot.SDM2R1: // SDM : MOD ∙

			if p.follow(symbols.NT_SDM) {
				p.rtn(symbols.NT_SDM, cU, p.cI)
			} else {
				p.parseError(slot.SDM2R0, p.cI, followSets[symbols.NT_SDM])
			}
		case slot.SEMI0R0: // SEMI : ∙; WS

			p.bsrSet.Add(slot.SEMI0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SEMI0R1) {
				p.parseError(slot.SEMI0R1, p.cI, first[slot.SEMI0R1])
				break
			}

			p.call(slot.SEMI0R2, cU, p.cI)
		case slot.SEMI0R2: // SEMI : ; WS ∙

			if p.follow(symbols.NT_SEMI) {
				p.rtn(symbols.NT_SEMI, cU, p.cI)
			} else {
				p.parseError(slot.SEMI0R0, p.cI, followSets[symbols.NT_SEMI])
			}
		case slot.SL0R0: // SL : ∙<< nEq WS

			p.bsrSet.Add(slot.SL0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SL0R1) {
				p.parseError(slot.SL0R1, p.cI, first[slot.SL0R1])
				break
			}

			p.bsrSet.Add(slot.SL0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SL0R2) {
				p.parseError(slot.SL0R2, p.cI, first[slot.SL0R2])
				break
			}

			p.call(slot.SL0R3, cU, p.cI)
		case slot.SL0R3: // SL : << nEq WS ∙

			if p.follow(symbols.NT_SL) {
				p.rtn(symbols.NT_SL, cU, p.cI)
			} else {
				p.parseError(slot.SL0R0, p.cI, followSets[symbols.NT_SL])
			}
		case slot.SL_EQU0R0: // SL_EQU : ∙<<= WS

			p.bsrSet.Add(slot.SL_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SL_EQU0R1) {
				p.parseError(slot.SL_EQU0R1, p.cI, first[slot.SL_EQU0R1])
				break
			}

			p.call(slot.SL_EQU0R2, cU, p.cI)
		case slot.SL_EQU0R2: // SL_EQU : <<= WS ∙

			if p.follow(symbols.NT_SL_EQU) {
				p.rtn(symbols.NT_SL_EQU, cU, p.cI)
			} else {
				p.parseError(slot.SL_EQU0R0, p.cI, followSets[symbols.NT_SL_EQU])
			}
		case slot.SR0R0: // SR : ∙>> notEqCar WS

			p.bsrSet.Add(slot.SR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SR0R1) {
				p.parseError(slot.SR0R1, p.cI, first[slot.SR0R1])
				break
			}

			p.bsrSet.Add(slot.SR0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SR0R2) {
				p.parseError(slot.SR0R2, p.cI, first[slot.SR0R2])
				break
			}

			p.call(slot.SR0R3, cU, p.cI)
		case slot.SR0R3: // SR : >> notEqCar WS ∙

			if p.follow(symbols.NT_SR) {
				p.rtn(symbols.NT_SR, cU, p.cI)
			} else {
				p.parseError(slot.SR0R0, p.cI, followSets[symbols.NT_SR])
			}
		case slot.SR_EQU0R0: // SR_EQU : ∙>>= WS

			p.bsrSet.Add(slot.SR_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SR_EQU0R1) {
				p.parseError(slot.SR_EQU0R1, p.cI, first[slot.SR_EQU0R1])
				break
			}

			p.call(slot.SR_EQU0R2, cU, p.cI)
		case slot.SR_EQU0R2: // SR_EQU : >>= WS ∙

			if p.follow(symbols.NT_SR_EQU) {
				p.rtn(symbols.NT_SR_EQU, cU, p.cI)
			} else {
				p.parseError(slot.SR_EQU0R0, p.cI, followSets[symbols.NT_SR_EQU])
			}
		case slot.STAR0R0: // STAR : ∙* nEq WS

			p.bsrSet.Add(slot.STAR0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.STAR0R1) {
				p.parseError(slot.STAR0R1, p.cI, first[slot.STAR0R1])
				break
			}

			p.bsrSet.Add(slot.STAR0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.STAR0R2) {
				p.parseError(slot.STAR0R2, p.cI, first[slot.STAR0R2])
				break
			}

			p.call(slot.STAR0R3, cU, p.cI)
		case slot.STAR0R3: // STAR : * nEq WS ∙

			if p.follow(symbols.NT_STAR) {
				p.rtn(symbols.NT_STAR, cU, p.cI)
			} else {
				p.parseError(slot.STAR0R0, p.cI, followSets[symbols.NT_STAR])
			}
		case slot.STAR_EQU0R0: // STAR_EQU : ∙*= WS

			p.bsrSet.Add(slot.STAR_EQU0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.STAR_EQU0R1) {
				p.parseError(slot.STAR_EQU0R1, p.cI, first[slot.STAR_EQU0R1])
				break
			}

			p.call(slot.STAR_EQU0R2, cU, p.cI)
		case slot.STAR_EQU0R2: // STAR_EQU : *= WS ∙

			if p.follow(symbols.NT_STAR_EQU) {
				p.rtn(symbols.NT_STAR_EQU, cU, p.cI)
			} else {
				p.parseError(slot.STAR_EQU0R0, p.cI, followSets[symbols.NT_STAR_EQU])
			}
		case slot.STATIC0R0: // STATIC : ∙static notLorD

			p.bsrSet.Add(slot.STATIC0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.STATIC0R1) {
				p.parseError(slot.STATIC0R1, p.cI, first[slot.STATIC0R1])
				break
			}

			p.bsrSet.Add(slot.STATIC0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_STATIC) {
				p.rtn(symbols.NT_STATIC, cU, p.cI)
			} else {
				p.parseError(slot.STATIC0R0, p.cI, followSets[symbols.NT_STATIC])
			}
		case slot.SUPER0R0: // SUPER : ∙super notLorD

			p.bsrSet.Add(slot.SUPER0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SUPER0R1) {
				p.parseError(slot.SUPER0R1, p.cI, first[slot.SUPER0R1])
				break
			}

			p.bsrSet.Add(slot.SUPER0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_SUPER) {
				p.rtn(symbols.NT_SUPER, cU, p.cI)
			} else {
				p.parseError(slot.SUPER0R0, p.cI, followSets[symbols.NT_SUPER])
			}
		case slot.SWITCH0R0: // SWITCH : ∙switch notLorD

			p.bsrSet.Add(slot.SWITCH0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SWITCH0R1) {
				p.parseError(slot.SWITCH0R1, p.cI, first[slot.SWITCH0R1])
				break
			}

			p.bsrSet.Add(slot.SWITCH0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_SWITCH) {
				p.rtn(symbols.NT_SWITCH, cU, p.cI)
			} else {
				p.parseError(slot.SWITCH0R0, p.cI, followSets[symbols.NT_SWITCH])
			}
		case slot.SYNCHRONIZED0R0: // SYNCHRONIZED : ∙synchronized notLorD

			p.bsrSet.Add(slot.SYNCHRONIZED0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.SYNCHRONIZED0R1) {
				p.parseError(slot.SYNCHRONIZED0R1, p.cI, first[slot.SYNCHRONIZED0R1])
				break
			}

			p.bsrSet.Add(slot.SYNCHRONIZED0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_SYNCHRONIZED) {
				p.rtn(symbols.NT_SYNCHRONIZED, cU, p.cI)
			} else {
				p.parseError(slot.SYNCHRONIZED0R0, p.cI, followSets[symbols.NT_SYNCHRONIZED])
			}
		case slot.Selector0R0: // Selector : ∙DOT ID OptArgs

			p.call(slot.Selector0R1, cU, p.cI)
		case slot.Selector0R1: // Selector : DOT ∙ID OptArgs

			if !p.testSelect(slot.Selector0R1) {
				p.parseError(slot.Selector0R1, p.cI, first[slot.Selector0R1])
				break
			}

			p.call(slot.Selector0R2, cU, p.cI)
		case slot.Selector0R2: // Selector : DOT ID ∙OptArgs

			if !p.testSelect(slot.Selector0R2) {
				p.parseError(slot.Selector0R2, p.cI, first[slot.Selector0R2])
				break
			}

			p.call(slot.Selector0R3, cU, p.cI)
		case slot.Selector0R3: // Selector : DOT ID OptArgs ∙

			if p.follow(symbols.NT_Selector) {
				p.rtn(symbols.NT_Selector, cU, p.cI)
			} else {
				p.parseError(slot.Selector0R0, p.cI, followSets[symbols.NT_Selector])
			}
		case slot.Selector1R0: // Selector : ∙DOT THIS

			p.call(slot.Selector1R1, cU, p.cI)
		case slot.Selector1R1: // Selector : DOT ∙THIS

			if !p.testSelect(slot.Selector1R1) {
				p.parseError(slot.Selector1R1, p.cI, first[slot.Selector1R1])
				break
			}

			p.call(slot.Selector1R2, cU, p.cI)
		case slot.Selector1R2: // Selector : DOT THIS ∙

			if p.follow(symbols.NT_Selector) {
				p.rtn(symbols.NT_Selector, cU, p.cI)
			} else {
				p.parseError(slot.Selector1R0, p.cI, followSets[symbols.NT_Selector])
			}
		case slot.Selector2R0: // Selector : ∙DOT SUPER SuperSuffix

			p.call(slot.Selector2R1, cU, p.cI)
		case slot.Selector2R1: // Selector : DOT ∙SUPER SuperSuffix

			if !p.testSelect(slot.Selector2R1) {
				p.parseError(slot.Selector2R1, p.cI, first[slot.Selector2R1])
				break
			}

			p.call(slot.Selector2R2, cU, p.cI)
		case slot.Selector2R2: // Selector : DOT SUPER ∙SuperSuffix

			if !p.testSelect(slot.Selector2R2) {
				p.parseError(slot.Selector2R2, p.cI, first[slot.Selector2R2])
				break
			}

			p.call(slot.Selector2R3, cU, p.cI)
		case slot.Selector2R3: // Selector : DOT SUPER SuperSuffix ∙

			if p.follow(symbols.NT_Selector) {
				p.rtn(symbols.NT_Selector, cU, p.cI)
			} else {
				p.parseError(slot.Selector2R0, p.cI, followSets[symbols.NT_Selector])
			}
		case slot.Selector3R0: // Selector : ∙DOT NEW InnerCreator

			p.call(slot.Selector3R1, cU, p.cI)
		case slot.Selector3R1: // Selector : DOT ∙NEW InnerCreator

			if !p.testSelect(slot.Selector3R1) {
				p.parseError(slot.Selector3R1, p.cI, first[slot.Selector3R1])
				break
			}

			p.call(slot.Selector3R2, cU, p.cI)
		case slot.Selector3R2: // Selector : DOT NEW ∙InnerCreator

			if !p.testSelect(slot.Selector3R2) {
				p.parseError(slot.Selector3R2, p.cI, first[slot.Selector3R2])
				break
			}

			p.call(slot.Selector3R3, cU, p.cI)
		case slot.Selector3R3: // Selector : DOT NEW InnerCreator ∙

			if p.follow(symbols.NT_Selector) {
				p.rtn(symbols.NT_Selector, cU, p.cI)
			} else {
				p.parseError(slot.Selector3R0, p.cI, followSets[symbols.NT_Selector])
			}
		case slot.Selector4R0: // Selector : ∙DimExpr

			p.call(slot.Selector4R1, cU, p.cI)
		case slot.Selector4R1: // Selector : DimExpr ∙

			if p.follow(symbols.NT_Selector) {
				p.rtn(symbols.NT_Selector, cU, p.cI)
			} else {
				p.parseError(slot.Selector4R0, p.cI, followSets[symbols.NT_Selector])
			}
		case slot.SemiModDecl0R0: // SemiModDecl : ∙SEMI

			p.call(slot.SemiModDecl0R1, cU, p.cI)
		case slot.SemiModDecl0R1: // SemiModDecl : SEMI ∙

			if p.follow(symbols.NT_SemiModDecl) {
				p.rtn(symbols.NT_SemiModDecl, cU, p.cI)
			} else {
				p.parseError(slot.SemiModDecl0R0, p.cI, followSets[symbols.NT_SemiModDecl])
			}
		case slot.SemiModDecl1R0: // SemiModDecl : ∙RepModif0 DeclAlts

			p.call(slot.SemiModDecl1R1, cU, p.cI)
		case slot.SemiModDecl1R1: // SemiModDecl : RepModif0 ∙DeclAlts

			if !p.testSelect(slot.SemiModDecl1R1) {
				p.parseError(slot.SemiModDecl1R1, p.cI, first[slot.SemiModDecl1R1])
				break
			}

			p.call(slot.SemiModDecl1R2, cU, p.cI)
		case slot.SemiModDecl1R2: // SemiModDecl : RepModif0 DeclAlts ∙

			if p.follow(symbols.NT_SemiModDecl) {
				p.rtn(symbols.NT_SemiModDecl, cU, p.cI)
			} else {
				p.parseError(slot.SemiModDecl1R0, p.cI, followSets[symbols.NT_SemiModDecl])
			}
		case slot.ShiftAlts0R0: // ShiftAlts : ∙CarrotAlts AddExpr ShiftAlts

			p.call(slot.ShiftAlts0R1, cU, p.cI)
		case slot.ShiftAlts0R1: // ShiftAlts : CarrotAlts ∙AddExpr ShiftAlts

			if !p.testSelect(slot.ShiftAlts0R1) {
				p.parseError(slot.ShiftAlts0R1, p.cI, first[slot.ShiftAlts0R1])
				break
			}

			p.call(slot.ShiftAlts0R2, cU, p.cI)
		case slot.ShiftAlts0R2: // ShiftAlts : CarrotAlts AddExpr ∙ShiftAlts

			if !p.testSelect(slot.ShiftAlts0R2) {
				p.parseError(slot.ShiftAlts0R2, p.cI, first[slot.ShiftAlts0R2])
				break
			}

			p.call(slot.ShiftAlts0R3, cU, p.cI)
		case slot.ShiftAlts0R3: // ShiftAlts : CarrotAlts AddExpr ShiftAlts ∙

			if p.follow(symbols.NT_ShiftAlts) {
				p.rtn(symbols.NT_ShiftAlts, cU, p.cI)
			} else {
				p.parseError(slot.ShiftAlts0R0, p.cI, followSets[symbols.NT_ShiftAlts])
			}
		case slot.ShiftAlts1R0: // ShiftAlts : ∙
			p.bsrSet.AddEmpty(slot.ShiftAlts1R0, p.cI)

			if p.follow(symbols.NT_ShiftAlts) {
				p.rtn(symbols.NT_ShiftAlts, cU, p.cI)
			} else {
				p.parseError(slot.ShiftAlts1R0, p.cI, followSets[symbols.NT_ShiftAlts])
			}
		case slot.ShiftExpr0R0: // ShiftExpr : ∙AddExpr ShiftAlts

			p.call(slot.ShiftExpr0R1, cU, p.cI)
		case slot.ShiftExpr0R1: // ShiftExpr : AddExpr ∙ShiftAlts

			if !p.testSelect(slot.ShiftExpr0R1) {
				p.parseError(slot.ShiftExpr0R1, p.cI, first[slot.ShiftExpr0R1])
				break
			}

			p.call(slot.ShiftExpr0R2, cU, p.cI)
		case slot.ShiftExpr0R2: // ShiftExpr : AddExpr ShiftAlts ∙

			if p.follow(symbols.NT_ShiftExpr) {
				p.rtn(symbols.NT_ShiftExpr, cU, p.cI)
			} else {
				p.parseError(slot.ShiftExpr0R0, p.cI, followSets[symbols.NT_ShiftExpr])
			}
		case slot.Stmt0R0: // Stmt : ∙Block

			p.call(slot.Stmt0R1, cU, p.cI)
		case slot.Stmt0R1: // Stmt : Block ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt0R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt1R0: // Stmt : ∙ASSERT Expr OptColExpr SEMI

			p.call(slot.Stmt1R1, cU, p.cI)
		case slot.Stmt1R1: // Stmt : ASSERT ∙Expr OptColExpr SEMI

			if !p.testSelect(slot.Stmt1R1) {
				p.parseError(slot.Stmt1R1, p.cI, first[slot.Stmt1R1])
				break
			}

			p.call(slot.Stmt1R2, cU, p.cI)
		case slot.Stmt1R2: // Stmt : ASSERT Expr ∙OptColExpr SEMI

			if !p.testSelect(slot.Stmt1R2) {
				p.parseError(slot.Stmt1R2, p.cI, first[slot.Stmt1R2])
				break
			}

			p.call(slot.Stmt1R3, cU, p.cI)
		case slot.Stmt1R3: // Stmt : ASSERT Expr OptColExpr ∙SEMI

			if !p.testSelect(slot.Stmt1R3) {
				p.parseError(slot.Stmt1R3, p.cI, first[slot.Stmt1R3])
				break
			}

			p.call(slot.Stmt1R4, cU, p.cI)
		case slot.Stmt1R4: // Stmt : ASSERT Expr OptColExpr SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt1R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt2R0: // Stmt : ∙IF ParExpr Stmt OptElse

			p.call(slot.Stmt2R1, cU, p.cI)
		case slot.Stmt2R1: // Stmt : IF ∙ParExpr Stmt OptElse

			if !p.testSelect(slot.Stmt2R1) {
				p.parseError(slot.Stmt2R1, p.cI, first[slot.Stmt2R1])
				break
			}

			p.call(slot.Stmt2R2, cU, p.cI)
		case slot.Stmt2R2: // Stmt : IF ParExpr ∙Stmt OptElse

			if !p.testSelect(slot.Stmt2R2) {
				p.parseError(slot.Stmt2R2, p.cI, first[slot.Stmt2R2])
				break
			}

			p.call(slot.Stmt2R3, cU, p.cI)
		case slot.Stmt2R3: // Stmt : IF ParExpr Stmt ∙OptElse

			if !p.testSelect(slot.Stmt2R3) {
				p.parseError(slot.Stmt2R3, p.cI, first[slot.Stmt2R3])
				break
			}

			p.call(slot.Stmt2R4, cU, p.cI)
		case slot.Stmt2R4: // Stmt : IF ParExpr Stmt OptElse ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt2R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt3R0: // Stmt : ∙FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt

			p.call(slot.Stmt3R1, cU, p.cI)
		case slot.Stmt3R1: // Stmt : FOR ∙LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R1) {
				p.parseError(slot.Stmt3R1, p.cI, first[slot.Stmt3R1])
				break
			}

			p.call(slot.Stmt3R2, cU, p.cI)
		case slot.Stmt3R2: // Stmt : FOR LPAR ∙OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R2) {
				p.parseError(slot.Stmt3R2, p.cI, first[slot.Stmt3R2])
				break
			}

			p.call(slot.Stmt3R3, cU, p.cI)
		case slot.Stmt3R3: // Stmt : FOR LPAR OptForInit ∙SEMI OptExpr SEMI OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R3) {
				p.parseError(slot.Stmt3R3, p.cI, first[slot.Stmt3R3])
				break
			}

			p.call(slot.Stmt3R4, cU, p.cI)
		case slot.Stmt3R4: // Stmt : FOR LPAR OptForInit SEMI ∙OptExpr SEMI OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R4) {
				p.parseError(slot.Stmt3R4, p.cI, first[slot.Stmt3R4])
				break
			}

			p.call(slot.Stmt3R5, cU, p.cI)
		case slot.Stmt3R5: // Stmt : FOR LPAR OptForInit SEMI OptExpr ∙SEMI OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R5) {
				p.parseError(slot.Stmt3R5, p.cI, first[slot.Stmt3R5])
				break
			}

			p.call(slot.Stmt3R6, cU, p.cI)
		case slot.Stmt3R6: // Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI ∙OptForUpd RPAR Stmt

			if !p.testSelect(slot.Stmt3R6) {
				p.parseError(slot.Stmt3R6, p.cI, first[slot.Stmt3R6])
				break
			}

			p.call(slot.Stmt3R7, cU, p.cI)
		case slot.Stmt3R7: // Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd ∙RPAR Stmt

			if !p.testSelect(slot.Stmt3R7) {
				p.parseError(slot.Stmt3R7, p.cI, first[slot.Stmt3R7])
				break
			}

			p.call(slot.Stmt3R8, cU, p.cI)
		case slot.Stmt3R8: // Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR ∙Stmt

			if !p.testSelect(slot.Stmt3R8) {
				p.parseError(slot.Stmt3R8, p.cI, first[slot.Stmt3R8])
				break
			}

			p.call(slot.Stmt3R9, cU, p.cI)
		case slot.Stmt3R9: // Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt3R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt4R0: // Stmt : ∙WHILE ParExpr Stmt

			p.call(slot.Stmt4R1, cU, p.cI)
		case slot.Stmt4R1: // Stmt : WHILE ∙ParExpr Stmt

			if !p.testSelect(slot.Stmt4R1) {
				p.parseError(slot.Stmt4R1, p.cI, first[slot.Stmt4R1])
				break
			}

			p.call(slot.Stmt4R2, cU, p.cI)
		case slot.Stmt4R2: // Stmt : WHILE ParExpr ∙Stmt

			if !p.testSelect(slot.Stmt4R2) {
				p.parseError(slot.Stmt4R2, p.cI, first[slot.Stmt4R2])
				break
			}

			p.call(slot.Stmt4R3, cU, p.cI)
		case slot.Stmt4R3: // Stmt : WHILE ParExpr Stmt ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt4R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt5R0: // Stmt : ∙DO Stmt WHILE ParExpr SEMI

			p.call(slot.Stmt5R1, cU, p.cI)
		case slot.Stmt5R1: // Stmt : DO ∙Stmt WHILE ParExpr SEMI

			if !p.testSelect(slot.Stmt5R1) {
				p.parseError(slot.Stmt5R1, p.cI, first[slot.Stmt5R1])
				break
			}

			p.call(slot.Stmt5R2, cU, p.cI)
		case slot.Stmt5R2: // Stmt : DO Stmt ∙WHILE ParExpr SEMI

			if !p.testSelect(slot.Stmt5R2) {
				p.parseError(slot.Stmt5R2, p.cI, first[slot.Stmt5R2])
				break
			}

			p.call(slot.Stmt5R3, cU, p.cI)
		case slot.Stmt5R3: // Stmt : DO Stmt WHILE ∙ParExpr SEMI

			if !p.testSelect(slot.Stmt5R3) {
				p.parseError(slot.Stmt5R3, p.cI, first[slot.Stmt5R3])
				break
			}

			p.call(slot.Stmt5R4, cU, p.cI)
		case slot.Stmt5R4: // Stmt : DO Stmt WHILE ParExpr ∙SEMI

			if !p.testSelect(slot.Stmt5R4) {
				p.parseError(slot.Stmt5R4, p.cI, first[slot.Stmt5R4])
				break
			}

			p.call(slot.Stmt5R5, cU, p.cI)
		case slot.Stmt5R5: // Stmt : DO Stmt WHILE ParExpr SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt5R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt6R0: // Stmt : ∙TRY Block CatchBlk

			p.call(slot.Stmt6R1, cU, p.cI)
		case slot.Stmt6R1: // Stmt : TRY ∙Block CatchBlk

			if !p.testSelect(slot.Stmt6R1) {
				p.parseError(slot.Stmt6R1, p.cI, first[slot.Stmt6R1])
				break
			}

			p.call(slot.Stmt6R2, cU, p.cI)
		case slot.Stmt6R2: // Stmt : TRY Block ∙CatchBlk

			if !p.testSelect(slot.Stmt6R2) {
				p.parseError(slot.Stmt6R2, p.cI, first[slot.Stmt6R2])
				break
			}

			p.call(slot.Stmt6R3, cU, p.cI)
		case slot.Stmt6R3: // Stmt : TRY Block CatchBlk ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt6R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt7R0: // Stmt : ∙SWITCH ParExpr LWING RepSwBlkStmt0x RWING

			p.call(slot.Stmt7R1, cU, p.cI)
		case slot.Stmt7R1: // Stmt : SWITCH ∙ParExpr LWING RepSwBlkStmt0x RWING

			if !p.testSelect(slot.Stmt7R1) {
				p.parseError(slot.Stmt7R1, p.cI, first[slot.Stmt7R1])
				break
			}

			p.call(slot.Stmt7R2, cU, p.cI)
		case slot.Stmt7R2: // Stmt : SWITCH ParExpr ∙LWING RepSwBlkStmt0x RWING

			if !p.testSelect(slot.Stmt7R2) {
				p.parseError(slot.Stmt7R2, p.cI, first[slot.Stmt7R2])
				break
			}

			p.call(slot.Stmt7R3, cU, p.cI)
		case slot.Stmt7R3: // Stmt : SWITCH ParExpr LWING ∙RepSwBlkStmt0x RWING

			if !p.testSelect(slot.Stmt7R3) {
				p.parseError(slot.Stmt7R3, p.cI, first[slot.Stmt7R3])
				break
			}

			p.call(slot.Stmt7R4, cU, p.cI)
		case slot.Stmt7R4: // Stmt : SWITCH ParExpr LWING RepSwBlkStmt0x ∙RWING

			if !p.testSelect(slot.Stmt7R4) {
				p.parseError(slot.Stmt7R4, p.cI, first[slot.Stmt7R4])
				break
			}

			p.call(slot.Stmt7R5, cU, p.cI)
		case slot.Stmt7R5: // Stmt : SWITCH ParExpr LWING RepSwBlkStmt0x RWING ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt7R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt8R0: // Stmt : ∙SYNCHRONIZED ParExpr Block

			p.call(slot.Stmt8R1, cU, p.cI)
		case slot.Stmt8R1: // Stmt : SYNCHRONIZED ∙ParExpr Block

			if !p.testSelect(slot.Stmt8R1) {
				p.parseError(slot.Stmt8R1, p.cI, first[slot.Stmt8R1])
				break
			}

			p.call(slot.Stmt8R2, cU, p.cI)
		case slot.Stmt8R2: // Stmt : SYNCHRONIZED ParExpr ∙Block

			if !p.testSelect(slot.Stmt8R2) {
				p.parseError(slot.Stmt8R2, p.cI, first[slot.Stmt8R2])
				break
			}

			p.call(slot.Stmt8R3, cU, p.cI)
		case slot.Stmt8R3: // Stmt : SYNCHRONIZED ParExpr Block ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt8R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt9R0: // Stmt : ∙RETURN OptExpr SEMI

			p.call(slot.Stmt9R1, cU, p.cI)
		case slot.Stmt9R1: // Stmt : RETURN ∙OptExpr SEMI

			if !p.testSelect(slot.Stmt9R1) {
				p.parseError(slot.Stmt9R1, p.cI, first[slot.Stmt9R1])
				break
			}

			p.call(slot.Stmt9R2, cU, p.cI)
		case slot.Stmt9R2: // Stmt : RETURN OptExpr ∙SEMI

			if !p.testSelect(slot.Stmt9R2) {
				p.parseError(slot.Stmt9R2, p.cI, first[slot.Stmt9R2])
				break
			}

			p.call(slot.Stmt9R3, cU, p.cI)
		case slot.Stmt9R3: // Stmt : RETURN OptExpr SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt9R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt10R0: // Stmt : ∙THROW Expr SEMI

			p.call(slot.Stmt10R1, cU, p.cI)
		case slot.Stmt10R1: // Stmt : THROW ∙Expr SEMI

			if !p.testSelect(slot.Stmt10R1) {
				p.parseError(slot.Stmt10R1, p.cI, first[slot.Stmt10R1])
				break
			}

			p.call(slot.Stmt10R2, cU, p.cI)
		case slot.Stmt10R2: // Stmt : THROW Expr ∙SEMI

			if !p.testSelect(slot.Stmt10R2) {
				p.parseError(slot.Stmt10R2, p.cI, first[slot.Stmt10R2])
				break
			}

			p.call(slot.Stmt10R3, cU, p.cI)
		case slot.Stmt10R3: // Stmt : THROW Expr SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt10R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt11R0: // Stmt : ∙BREAK OptID SEMI

			p.call(slot.Stmt11R1, cU, p.cI)
		case slot.Stmt11R1: // Stmt : BREAK ∙OptID SEMI

			if !p.testSelect(slot.Stmt11R1) {
				p.parseError(slot.Stmt11R1, p.cI, first[slot.Stmt11R1])
				break
			}

			p.call(slot.Stmt11R2, cU, p.cI)
		case slot.Stmt11R2: // Stmt : BREAK OptID ∙SEMI

			if !p.testSelect(slot.Stmt11R2) {
				p.parseError(slot.Stmt11R2, p.cI, first[slot.Stmt11R2])
				break
			}

			p.call(slot.Stmt11R3, cU, p.cI)
		case slot.Stmt11R3: // Stmt : BREAK OptID SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt11R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt12R0: // Stmt : ∙CONTINUE OptID SEMI

			p.call(slot.Stmt12R1, cU, p.cI)
		case slot.Stmt12R1: // Stmt : CONTINUE ∙OptID SEMI

			if !p.testSelect(slot.Stmt12R1) {
				p.parseError(slot.Stmt12R1, p.cI, first[slot.Stmt12R1])
				break
			}

			p.call(slot.Stmt12R2, cU, p.cI)
		case slot.Stmt12R2: // Stmt : CONTINUE OptID ∙SEMI

			if !p.testSelect(slot.Stmt12R2) {
				p.parseError(slot.Stmt12R2, p.cI, first[slot.Stmt12R2])
				break
			}

			p.call(slot.Stmt12R3, cU, p.cI)
		case slot.Stmt12R3: // Stmt : CONTINUE OptID SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt12R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt13R0: // Stmt : ∙SEMI

			p.call(slot.Stmt13R1, cU, p.cI)
		case slot.Stmt13R1: // Stmt : SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt13R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt14R0: // Stmt : ∙StmtExpr SEMI

			p.call(slot.Stmt14R1, cU, p.cI)
		case slot.Stmt14R1: // Stmt : StmtExpr ∙SEMI

			if !p.testSelect(slot.Stmt14R1) {
				p.parseError(slot.Stmt14R1, p.cI, first[slot.Stmt14R1])
				break
			}

			p.call(slot.Stmt14R2, cU, p.cI)
		case slot.Stmt14R2: // Stmt : StmtExpr SEMI ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt14R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.Stmt15R0: // Stmt : ∙ID COLON Stmt

			p.call(slot.Stmt15R1, cU, p.cI)
		case slot.Stmt15R1: // Stmt : ID ∙COLON Stmt

			if !p.testSelect(slot.Stmt15R1) {
				p.parseError(slot.Stmt15R1, p.cI, first[slot.Stmt15R1])
				break
			}

			p.call(slot.Stmt15R2, cU, p.cI)
		case slot.Stmt15R2: // Stmt : ID COLON ∙Stmt

			if !p.testSelect(slot.Stmt15R2) {
				p.parseError(slot.Stmt15R2, p.cI, first[slot.Stmt15R2])
				break
			}

			p.call(slot.Stmt15R3, cU, p.cI)
		case slot.Stmt15R3: // Stmt : ID COLON Stmt ∙

			if p.follow(symbols.NT_Stmt) {
				p.rtn(symbols.NT_Stmt, cU, p.cI)
			} else {
				p.parseError(slot.Stmt15R0, p.cI, followSets[symbols.NT_Stmt])
			}
		case slot.StmtExpr0R0: // StmtExpr : ∙Expr

			p.call(slot.StmtExpr0R1, cU, p.cI)
		case slot.StmtExpr0R1: // StmtExpr : Expr ∙

			if p.follow(symbols.NT_StmtExpr) {
				p.rtn(symbols.NT_StmtExpr, cU, p.cI)
			} else {
				p.parseError(slot.StmtExpr0R0, p.cI, followSets[symbols.NT_StmtExpr])
			}
		case slot.StrClose0R0: // StrClose : ∙dubQuo

			p.bsrSet.Add(slot.StrClose0R1, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_StrClose) {
				p.rtn(symbols.NT_StrClose, cU, p.cI)
			} else {
				p.parseError(slot.StrClose0R0, p.cI, followSets[symbols.NT_StrClose])
			}
		case slot.StrClose1R0: // StrClose : ∙OptEsc StrClose

			p.call(slot.StrClose1R1, cU, p.cI)
		case slot.StrClose1R1: // StrClose : OptEsc ∙StrClose

			if !p.testSelect(slot.StrClose1R1) {
				p.parseError(slot.StrClose1R1, p.cI, first[slot.StrClose1R1])
				break
			}

			p.call(slot.StrClose1R2, cU, p.cI)
		case slot.StrClose1R2: // StrClose : OptEsc StrClose ∙

			if p.follow(symbols.NT_StrClose) {
				p.rtn(symbols.NT_StrClose, cU, p.cI)
			} else {
				p.parseError(slot.StrClose1R0, p.cI, followSets[symbols.NT_StrClose])
			}
		case slot.StringLiteral0R0: // StringLiteral : ∙dubQuo StrClose

			p.bsrSet.Add(slot.StringLiteral0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.StringLiteral0R1) {
				p.parseError(slot.StringLiteral0R1, p.cI, first[slot.StringLiteral0R1])
				break
			}

			p.call(slot.StringLiteral0R2, cU, p.cI)
		case slot.StringLiteral0R2: // StringLiteral : dubQuo StrClose ∙

			if p.follow(symbols.NT_StringLiteral) {
				p.rtn(symbols.NT_StringLiteral, cU, p.cI)
			} else {
				p.parseError(slot.StringLiteral0R0, p.cI, followSets[symbols.NT_StringLiteral])
			}
		case slot.SuperSuffix0R0: // SuperSuffix : ∙Arguments

			p.call(slot.SuperSuffix0R1, cU, p.cI)
		case slot.SuperSuffix0R1: // SuperSuffix : Arguments ∙

			if p.follow(symbols.NT_SuperSuffix) {
				p.rtn(symbols.NT_SuperSuffix, cU, p.cI)
			} else {
				p.parseError(slot.SuperSuffix0R0, p.cI, followSets[symbols.NT_SuperSuffix])
			}
		case slot.SuperSuffix1R0: // SuperSuffix : ∙DOT ID OptArgs

			p.call(slot.SuperSuffix1R1, cU, p.cI)
		case slot.SuperSuffix1R1: // SuperSuffix : DOT ∙ID OptArgs

			if !p.testSelect(slot.SuperSuffix1R1) {
				p.parseError(slot.SuperSuffix1R1, p.cI, first[slot.SuperSuffix1R1])
				break
			}

			p.call(slot.SuperSuffix1R2, cU, p.cI)
		case slot.SuperSuffix1R2: // SuperSuffix : DOT ID ∙OptArgs

			if !p.testSelect(slot.SuperSuffix1R2) {
				p.parseError(slot.SuperSuffix1R2, p.cI, first[slot.SuperSuffix1R2])
				break
			}

			p.call(slot.SuperSuffix1R3, cU, p.cI)
		case slot.SuperSuffix1R3: // SuperSuffix : DOT ID OptArgs ∙

			if p.follow(symbols.NT_SuperSuffix) {
				p.rtn(symbols.NT_SuperSuffix, cU, p.cI)
			} else {
				p.parseError(slot.SuperSuffix1R0, p.cI, followSets[symbols.NT_SuperSuffix])
			}
		case slot.SwitchBlockStmtGrp0R0: // SwitchBlockStmtGrp : ∙SwitchLabel RepBlkSt0x

			p.call(slot.SwitchBlockStmtGrp0R1, cU, p.cI)
		case slot.SwitchBlockStmtGrp0R1: // SwitchBlockStmtGrp : SwitchLabel ∙RepBlkSt0x

			if !p.testSelect(slot.SwitchBlockStmtGrp0R1) {
				p.parseError(slot.SwitchBlockStmtGrp0R1, p.cI, first[slot.SwitchBlockStmtGrp0R1])
				break
			}

			p.call(slot.SwitchBlockStmtGrp0R2, cU, p.cI)
		case slot.SwitchBlockStmtGrp0R2: // SwitchBlockStmtGrp : SwitchLabel RepBlkSt0x ∙

			if p.follow(symbols.NT_SwitchBlockStmtGrp) {
				p.rtn(symbols.NT_SwitchBlockStmtGrp, cU, p.cI)
			} else {
				p.parseError(slot.SwitchBlockStmtGrp0R0, p.cI, followSets[symbols.NT_SwitchBlockStmtGrp])
			}
		case slot.SwitchLabel0R0: // SwitchLabel : ∙CASE ConstExpr COLON

			p.call(slot.SwitchLabel0R1, cU, p.cI)
		case slot.SwitchLabel0R1: // SwitchLabel : CASE ∙ConstExpr COLON

			if !p.testSelect(slot.SwitchLabel0R1) {
				p.parseError(slot.SwitchLabel0R1, p.cI, first[slot.SwitchLabel0R1])
				break
			}

			p.call(slot.SwitchLabel0R2, cU, p.cI)
		case slot.SwitchLabel0R2: // SwitchLabel : CASE ConstExpr ∙COLON

			if !p.testSelect(slot.SwitchLabel0R2) {
				p.parseError(slot.SwitchLabel0R2, p.cI, first[slot.SwitchLabel0R2])
				break
			}

			p.call(slot.SwitchLabel0R3, cU, p.cI)
		case slot.SwitchLabel0R3: // SwitchLabel : CASE ConstExpr COLON ∙

			if p.follow(symbols.NT_SwitchLabel) {
				p.rtn(symbols.NT_SwitchLabel, cU, p.cI)
			} else {
				p.parseError(slot.SwitchLabel0R0, p.cI, followSets[symbols.NT_SwitchLabel])
			}
		case slot.SwitchLabel1R0: // SwitchLabel : ∙DEFAULT COLON

			p.call(slot.SwitchLabel1R1, cU, p.cI)
		case slot.SwitchLabel1R1: // SwitchLabel : DEFAULT ∙COLON

			if !p.testSelect(slot.SwitchLabel1R1) {
				p.parseError(slot.SwitchLabel1R1, p.cI, first[slot.SwitchLabel1R1])
				break
			}

			p.call(slot.SwitchLabel1R2, cU, p.cI)
		case slot.SwitchLabel1R2: // SwitchLabel : DEFAULT COLON ∙

			if p.follow(symbols.NT_SwitchLabel) {
				p.rtn(symbols.NT_SwitchLabel, cU, p.cI)
			} else {
				p.parseError(slot.SwitchLabel1R0, p.cI, followSets[symbols.NT_SwitchLabel])
			}
		case slot.THIS0R0: // THIS : ∙this notLorD

			p.bsrSet.Add(slot.THIS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.THIS0R1) {
				p.parseError(slot.THIS0R1, p.cI, first[slot.THIS0R1])
				break
			}

			p.bsrSet.Add(slot.THIS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_THIS) {
				p.rtn(symbols.NT_THIS, cU, p.cI)
			} else {
				p.parseError(slot.THIS0R0, p.cI, followSets[symbols.NT_THIS])
			}
		case slot.THROW0R0: // THROW : ∙throw notLorD

			p.bsrSet.Add(slot.THROW0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.THROW0R1) {
				p.parseError(slot.THROW0R1, p.cI, first[slot.THROW0R1])
				break
			}

			p.bsrSet.Add(slot.THROW0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_THROW) {
				p.rtn(symbols.NT_THROW, cU, p.cI)
			} else {
				p.parseError(slot.THROW0R0, p.cI, followSets[symbols.NT_THROW])
			}
		case slot.THROWS0R0: // THROWS : ∙throws notLorD

			p.bsrSet.Add(slot.THROWS0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.THROWS0R1) {
				p.parseError(slot.THROWS0R1, p.cI, first[slot.THROWS0R1])
				break
			}

			p.bsrSet.Add(slot.THROWS0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_THROWS) {
				p.rtn(symbols.NT_THROWS, cU, p.cI)
			} else {
				p.parseError(slot.THROWS0R0, p.cI, followSets[symbols.NT_THROWS])
			}
		case slot.TILDA0R0: // TILDA : ∙~ WS

			p.bsrSet.Add(slot.TILDA0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.TILDA0R1) {
				p.parseError(slot.TILDA0R1, p.cI, first[slot.TILDA0R1])
				break
			}

			p.call(slot.TILDA0R2, cU, p.cI)
		case slot.TILDA0R2: // TILDA : ~ WS ∙

			if p.follow(symbols.NT_TILDA) {
				p.rtn(symbols.NT_TILDA, cU, p.cI)
			} else {
				p.parseError(slot.TILDA0R0, p.cI, followSets[symbols.NT_TILDA])
			}
		case slot.TRY0R0: // TRY : ∙try notLorD

			p.bsrSet.Add(slot.TRY0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.TRY0R1) {
				p.parseError(slot.TRY0R1, p.cI, first[slot.TRY0R1])
				break
			}

			p.bsrSet.Add(slot.TRY0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_TRY) {
				p.rtn(symbols.NT_TRY, cU, p.cI)
			} else {
				p.parseError(slot.TRY0R0, p.cI, followSets[symbols.NT_TRY])
			}
		case slot.Type0R0: // Type : ∙TypeAlts RepDim0x

			p.call(slot.Type0R1, cU, p.cI)
		case slot.Type0R1: // Type : TypeAlts ∙RepDim0x

			if !p.testSelect(slot.Type0R1) {
				p.parseError(slot.Type0R1, p.cI, first[slot.Type0R1])
				break
			}

			p.call(slot.Type0R2, cU, p.cI)
		case slot.Type0R2: // Type : TypeAlts RepDim0x ∙

			if p.follow(symbols.NT_Type) {
				p.rtn(symbols.NT_Type, cU, p.cI)
			} else {
				p.parseError(slot.Type0R0, p.cI, followSets[symbols.NT_Type])
			}
		case slot.TypeAlts0R0: // TypeAlts : ∙BasicType

			p.call(slot.TypeAlts0R1, cU, p.cI)
		case slot.TypeAlts0R1: // TypeAlts : BasicType ∙

			if p.follow(symbols.NT_TypeAlts) {
				p.rtn(symbols.NT_TypeAlts, cU, p.cI)
			} else {
				p.parseError(slot.TypeAlts0R0, p.cI, followSets[symbols.NT_TypeAlts])
			}
		case slot.TypeAlts1R0: // TypeAlts : ∙ClsType

			p.call(slot.TypeAlts1R1, cU, p.cI)
		case slot.TypeAlts1R1: // TypeAlts : ClsType ∙

			if p.follow(symbols.NT_TypeAlts) {
				p.rtn(symbols.NT_TypeAlts, cU, p.cI)
			} else {
				p.parseError(slot.TypeAlts1R0, p.cI, followSets[symbols.NT_TypeAlts])
			}
		case slot.UnaryExpr0R0: // UnaryExpr : ∙PrefixOp UnaryExpr

			p.call(slot.UnaryExpr0R1, cU, p.cI)
		case slot.UnaryExpr0R1: // UnaryExpr : PrefixOp ∙UnaryExpr

			if !p.testSelect(slot.UnaryExpr0R1) {
				p.parseError(slot.UnaryExpr0R1, p.cI, first[slot.UnaryExpr0R1])
				break
			}

			p.call(slot.UnaryExpr0R2, cU, p.cI)
		case slot.UnaryExpr0R2: // UnaryExpr : PrefixOp UnaryExpr ∙

			if p.follow(symbols.NT_UnaryExpr) {
				p.rtn(symbols.NT_UnaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExpr0R0, p.cI, followSets[symbols.NT_UnaryExpr])
			}
		case slot.UnaryExpr1R0: // UnaryExpr : ∙LPAR Type RPAR UnaryExpr

			p.call(slot.UnaryExpr1R1, cU, p.cI)
		case slot.UnaryExpr1R1: // UnaryExpr : LPAR ∙Type RPAR UnaryExpr

			if !p.testSelect(slot.UnaryExpr1R1) {
				p.parseError(slot.UnaryExpr1R1, p.cI, first[slot.UnaryExpr1R1])
				break
			}

			p.call(slot.UnaryExpr1R2, cU, p.cI)
		case slot.UnaryExpr1R2: // UnaryExpr : LPAR Type ∙RPAR UnaryExpr

			if !p.testSelect(slot.UnaryExpr1R2) {
				p.parseError(slot.UnaryExpr1R2, p.cI, first[slot.UnaryExpr1R2])
				break
			}

			p.call(slot.UnaryExpr1R3, cU, p.cI)
		case slot.UnaryExpr1R3: // UnaryExpr : LPAR Type RPAR ∙UnaryExpr

			if !p.testSelect(slot.UnaryExpr1R3) {
				p.parseError(slot.UnaryExpr1R3, p.cI, first[slot.UnaryExpr1R3])
				break
			}

			p.call(slot.UnaryExpr1R4, cU, p.cI)
		case slot.UnaryExpr1R4: // UnaryExpr : LPAR Type RPAR UnaryExpr ∙

			if p.follow(symbols.NT_UnaryExpr) {
				p.rtn(symbols.NT_UnaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExpr1R0, p.cI, followSets[symbols.NT_UnaryExpr])
			}
		case slot.UnaryExpr2R0: // UnaryExpr : ∙Primary RepSel0x RepPfOp0x

			p.call(slot.UnaryExpr2R1, cU, p.cI)
		case slot.UnaryExpr2R1: // UnaryExpr : Primary ∙RepSel0x RepPfOp0x

			if !p.testSelect(slot.UnaryExpr2R1) {
				p.parseError(slot.UnaryExpr2R1, p.cI, first[slot.UnaryExpr2R1])
				break
			}

			p.call(slot.UnaryExpr2R2, cU, p.cI)
		case slot.UnaryExpr2R2: // UnaryExpr : Primary RepSel0x ∙RepPfOp0x

			if !p.testSelect(slot.UnaryExpr2R2) {
				p.parseError(slot.UnaryExpr2R2, p.cI, first[slot.UnaryExpr2R2])
				break
			}

			p.call(slot.UnaryExpr2R3, cU, p.cI)
		case slot.UnaryExpr2R3: // UnaryExpr : Primary RepSel0x RepPfOp0x ∙

			if p.follow(symbols.NT_UnaryExpr) {
				p.rtn(symbols.NT_UnaryExpr, cU, p.cI)
			} else {
				p.parseError(slot.UnaryExpr2R0, p.cI, followSets[symbols.NT_UnaryExpr])
			}
		case slot.UnicodeEscape0R0: // UnicodeEscape : ∙u hexDigit hexDigit hexDigit hexDigit

			p.bsrSet.Add(slot.UnicodeEscape0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnicodeEscape0R1) {
				p.parseError(slot.UnicodeEscape0R1, p.cI, first[slot.UnicodeEscape0R1])
				break
			}

			p.bsrSet.Add(slot.UnicodeEscape0R2, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnicodeEscape0R2) {
				p.parseError(slot.UnicodeEscape0R2, p.cI, first[slot.UnicodeEscape0R2])
				break
			}

			p.bsrSet.Add(slot.UnicodeEscape0R3, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnicodeEscape0R3) {
				p.parseError(slot.UnicodeEscape0R3, p.cI, first[slot.UnicodeEscape0R3])
				break
			}

			p.bsrSet.Add(slot.UnicodeEscape0R4, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.UnicodeEscape0R4) {
				p.parseError(slot.UnicodeEscape0R4, p.cI, first[slot.UnicodeEscape0R4])
				break
			}

			p.bsrSet.Add(slot.UnicodeEscape0R5, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_UnicodeEscape) {
				p.rtn(symbols.NT_UnicodeEscape, cU, p.cI)
			} else {
				p.parseError(slot.UnicodeEscape0R0, p.cI, followSets[symbols.NT_UnicodeEscape])
			}
		case slot.VOID0R0: // VOID : ∙void notLorD

			p.bsrSet.Add(slot.VOID0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.VOID0R1) {
				p.parseError(slot.VOID0R1, p.cI, first[slot.VOID0R1])
				break
			}

			p.bsrSet.Add(slot.VOID0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_VOID) {
				p.rtn(symbols.NT_VOID, cU, p.cI)
			} else {
				p.parseError(slot.VOID0R0, p.cI, followSets[symbols.NT_VOID])
			}
		case slot.VarDecl0R0: // VarDecl : ∙ID RepDim0x OptEqVarInit

			p.call(slot.VarDecl0R1, cU, p.cI)
		case slot.VarDecl0R1: // VarDecl : ID ∙RepDim0x OptEqVarInit

			if !p.testSelect(slot.VarDecl0R1) {
				p.parseError(slot.VarDecl0R1, p.cI, first[slot.VarDecl0R1])
				break
			}

			p.call(slot.VarDecl0R2, cU, p.cI)
		case slot.VarDecl0R2: // VarDecl : ID RepDim0x ∙OptEqVarInit

			if !p.testSelect(slot.VarDecl0R2) {
				p.parseError(slot.VarDecl0R2, p.cI, first[slot.VarDecl0R2])
				break
			}

			p.call(slot.VarDecl0R3, cU, p.cI)
		case slot.VarDecl0R3: // VarDecl : ID RepDim0x OptEqVarInit ∙

			if p.follow(symbols.NT_VarDecl) {
				p.rtn(symbols.NT_VarDecl, cU, p.cI)
			} else {
				p.parseError(slot.VarDecl0R0, p.cI, followSets[symbols.NT_VarDecl])
			}
		case slot.VarDeclInit0R0: // VarDeclInit : ∙VarDecl RepComVDecl0x

			p.call(slot.VarDeclInit0R1, cU, p.cI)
		case slot.VarDeclInit0R1: // VarDeclInit : VarDecl ∙RepComVDecl0x

			if !p.testSelect(slot.VarDeclInit0R1) {
				p.parseError(slot.VarDeclInit0R1, p.cI, first[slot.VarDeclInit0R1])
				break
			}

			p.call(slot.VarDeclInit0R2, cU, p.cI)
		case slot.VarDeclInit0R2: // VarDeclInit : VarDecl RepComVDecl0x ∙

			if p.follow(symbols.NT_VarDeclInit) {
				p.rtn(symbols.NT_VarDeclInit, cU, p.cI)
			} else {
				p.parseError(slot.VarDeclInit0R0, p.cI, followSets[symbols.NT_VarDeclInit])
			}
		case slot.VarDelID0R0: // VarDelID : ∙ID RepDim0x

			p.call(slot.VarDelID0R1, cU, p.cI)
		case slot.VarDelID0R1: // VarDelID : ID ∙RepDim0x

			if !p.testSelect(slot.VarDelID0R1) {
				p.parseError(slot.VarDelID0R1, p.cI, first[slot.VarDelID0R1])
				break
			}

			p.call(slot.VarDelID0R2, cU, p.cI)
		case slot.VarDelID0R2: // VarDelID : ID RepDim0x ∙

			if p.follow(symbols.NT_VarDelID) {
				p.rtn(symbols.NT_VarDelID, cU, p.cI)
			} else {
				p.parseError(slot.VarDelID0R0, p.cI, followSets[symbols.NT_VarDelID])
			}
		case slot.VarInitial0R0: // VarInitial : ∙ArrayInitializer

			p.call(slot.VarInitial0R1, cU, p.cI)
		case slot.VarInitial0R1: // VarInitial : ArrayInitializer ∙

			if p.follow(symbols.NT_VarInitial) {
				p.rtn(symbols.NT_VarInitial, cU, p.cI)
			} else {
				p.parseError(slot.VarInitial0R0, p.cI, followSets[symbols.NT_VarInitial])
			}
		case slot.VarInitial1R0: // VarInitial : ∙Expr

			p.call(slot.VarInitial1R1, cU, p.cI)
		case slot.VarInitial1R1: // VarInitial : Expr ∙

			if p.follow(symbols.NT_VarInitial) {
				p.rtn(symbols.NT_VarInitial, cU, p.cI)
			} else {
				p.parseError(slot.VarInitial1R0, p.cI, followSets[symbols.NT_VarInitial])
			}
		case slot.VoidIntfMethDeclRst0R0: // VoidIntfMethDeclRst : ∙FormalParams OptThrowClsTypLst SEMI

			p.call(slot.VoidIntfMethDeclRst0R1, cU, p.cI)
		case slot.VoidIntfMethDeclRst0R1: // VoidIntfMethDeclRst : FormalParams ∙OptThrowClsTypLst SEMI

			if !p.testSelect(slot.VoidIntfMethDeclRst0R1) {
				p.parseError(slot.VoidIntfMethDeclRst0R1, p.cI, first[slot.VoidIntfMethDeclRst0R1])
				break
			}

			p.call(slot.VoidIntfMethDeclRst0R2, cU, p.cI)
		case slot.VoidIntfMethDeclRst0R2: // VoidIntfMethDeclRst : FormalParams OptThrowClsTypLst ∙SEMI

			if !p.testSelect(slot.VoidIntfMethDeclRst0R2) {
				p.parseError(slot.VoidIntfMethDeclRst0R2, p.cI, first[slot.VoidIntfMethDeclRst0R2])
				break
			}

			p.call(slot.VoidIntfMethDeclRst0R3, cU, p.cI)
		case slot.VoidIntfMethDeclRst0R3: // VoidIntfMethDeclRst : FormalParams OptThrowClsTypLst SEMI ∙

			if p.follow(symbols.NT_VoidIntfMethDeclRst) {
				p.rtn(symbols.NT_VoidIntfMethDeclRst, cU, p.cI)
			} else {
				p.parseError(slot.VoidIntfMethDeclRst0R0, p.cI, followSets[symbols.NT_VoidIntfMethDeclRst])
			}
		case slot.WHILE0R0: // WHILE : ∙while notLorD

			p.bsrSet.Add(slot.WHILE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.WHILE0R1) {
				p.parseError(slot.WHILE0R1, p.cI, first[slot.WHILE0R1])
				break
			}

			p.bsrSet.Add(slot.WHILE0R2, cU, p.cI, p.cI+1)
			p.cI++
			if p.follow(symbols.NT_WHILE) {
				p.rtn(symbols.NT_WHILE, cU, p.cI)
			} else {
				p.parseError(slot.WHILE0R0, p.cI, followSets[symbols.NT_WHILE])
			}
		case slot.WS0R0: // WS : ∙EscOrLineOrBlock

			p.call(slot.WS0R1, cU, p.cI)
		case slot.WS0R1: // WS : EscOrLineOrBlock ∙

			if p.follow(symbols.NT_WS) {
				p.rtn(symbols.NT_WS, cU, p.cI)
			} else {
				p.parseError(slot.WS0R0, p.cI, followSets[symbols.NT_WS])
			}
		case slot.WS1R0: // WS : ∙
			p.bsrSet.AddEmpty(slot.WS1R0, p.cI)

			if p.follow(symbols.NT_WS) {
				p.rtn(symbols.NT_WS, cU, p.cI)
			} else {
				p.parseError(slot.WS1R0, p.cI, followSets[symbols.NT_WS])
			}
		case slot.XORExpr0R0: // XORExpr : ∙ANDExpr RepHatAND0x

			p.call(slot.XORExpr0R1, cU, p.cI)
		case slot.XORExpr0R1: // XORExpr : ANDExpr ∙RepHatAND0x

			if !p.testSelect(slot.XORExpr0R1) {
				p.parseError(slot.XORExpr0R1, p.cI, first[slot.XORExpr0R1])
				break
			}

			p.call(slot.XORExpr0R2, cU, p.cI)
		case slot.XORExpr0R2: // XORExpr : ANDExpr RepHatAND0x ∙

			if p.follow(symbols.NT_XORExpr) {
				p.rtn(symbols.NT_XORExpr, cU, p.cI)
			} else {
				p.parseError(slot.XORExpr0R0, p.cI, followSets[symbols.NT_XORExpr])
			}

		default:
			panic("This must not happen")
		}
	}
	if !p.bsrSet.Contain(symbols.NT_CompUnit, 0, m) {
		p.sortParseErrors()
		return nil, p.parseErrors
	}
	return p.bsrSet, nil
}

func (p *parser) ntAdd(nt symbols.NT, j int) {
	// fmt.Printf("p.ntAdd(%s, %d)\n", nt, j)
	failed := true
	expected := map[token.Type]string{}
	for _, l := range slot.GetAlternates(nt) {
		if p.testSelect(l) {
			p.dscAdd(l, j, j)
			failed = false
		} else {
			for k, v := range first[l] {
				expected[k] = v
			}
		}
	}
	if failed {
		for _, l := range slot.GetAlternates(nt) {
			p.parseError(l, j, expected)
		}
	}
}

/*** Call Return Forest ***/

type poppedNode struct {
	X    symbols.NT
	k, j int
}

type clusterNode struct {
	X symbols.NT
	k int
}

type crfNode struct {
	L slot.Label
	i int
}

/*
suppose that L is Y ::=αX ·β
if there is no CRF node labelled (L,i)
	create one let u be the CRF node labelled (L,i)
if there is no CRF node labelled (X, j) {
	create a CRF node v labelled (X, j)
	create an edge from v to u
	ntAdd(X, j)
} else {
	let v be the CRF node labelled (X, j)
	if there is not an edge from v to u {
		create an edge from v to u
		for all ((X, j,h)∈P) {
			dscAdd(L, i, h);
			bsrAdd(L, i, j, h)
		}
	}
}
*/
func (p *parser) call(L slot.Label, i, j int) {
	// fmt.Printf("p.call(%s,%d,%d)\n", L,i,j)
	u, exist := p.crfNodes[crfNode{L, i}]
	// fmt.Printf("  u exist=%t\n", exist)
	if !exist {
		u = &crfNode{L, i}
		p.crfNodes[*u] = u
	}
	X := L.Symbols()[L.Pos()-1].(symbols.NT)
	ndV := clusterNode{X, j}
	v, exist := p.crf[ndV]
	if !exist {
		// fmt.Println("  v !exist")
		p.crf[ndV] = []*crfNode{u}
		p.ntAdd(X, j)
	} else {
		// fmt.Println("  v exist")
		if !existEdge(v, u) {
			// fmt.Printf("  !existEdge(%v)\n", u)
			p.crf[ndV] = append(v, u)
			// fmt.Printf("|popped|=%d\n", len(popped))
			for pnd := range p.popped {
				if pnd.X == X && pnd.k == j {
					p.dscAdd(L, i, pnd.j)
					p.bsrSet.Add(L, i, j, pnd.j)
				}
			}
		}
	}
}

func existEdge(nds []*crfNode, nd *crfNode) bool {
	for _, nd1 := range nds {
		if nd1 == nd {
			return true
		}
	}
	return false
}

func (p *parser) rtn(X symbols.NT, k, j int) {
	// fmt.Printf("p.rtn(%s,%d,%d)\n", X,k,j)
	pn := poppedNode{X, k, j}
	if _, exist := p.popped[pn]; !exist {
		p.popped[pn] = true
		for _, nd := range p.crf[clusterNode{X, k}] {
			p.dscAdd(nd.L, nd.i, j)
			p.bsrSet.Add(nd.L, nd.i, k, j)
		}
	}
}

// func CRFString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("CRF: {")
// 	for cn, nds := range crf{
// 		for _, nd := range nds {
// 			fmt.Fprintf(buf, "%s->%s, ", cn, nd)
// 		}
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

func (cn clusterNode) String() string {
	return fmt.Sprintf("(%s,%d)", cn.X, cn.k)
}

func (n crfNode) String() string {
	return fmt.Sprintf("(%s,%d)", n.L.String(), n.i)
}

// func PoppedString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("Popped: {")
// 	for p, _ := range popped {
// 		fmt.Fprintf(buf, "(%s,%d,%d) ", p.X, p.k, p.j)
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

/*** descriptors ***/

type descriptors struct {
	set []*descriptor
}

func (ds *descriptors) contain(d *descriptor) bool {
	for _, d1 := range ds.set {
		if d1 == d {
			return true
		}
	}
	return false
}

func (ds *descriptors) empty() bool {
	return len(ds.set) == 0
}

func (ds *descriptors) String() string {
	buf := new(bytes.Buffer)
	buf.WriteString("{")
	for i, d := range ds.set {
		if i > 0 {
			buf.WriteString("; ")
		}
		fmt.Fprintf(buf, "%s", d)
	}
	buf.WriteString("}")
	return buf.String()
}

type descriptor struct {
	L slot.Label
	k int
	i int
}

func (d *descriptor) String() string {
	return fmt.Sprintf("%s,%d,%d", d.L, d.k, d.i)
}

func (p *parser) dscAdd(L slot.Label, k, i int) {
	// fmt.Printf("p.dscAdd(%s,%d,%d)\n", L, k, i)
	d := &descriptor{L, k, i}
	if !p.U.contain(d) {
		p.R.set = append(p.R.set, d)
		p.U.set = append(p.U.set, d)
	}
}

func (ds *descriptors) remove() (L slot.Label, k, i int) {
	d := ds.set[len(ds.set)-1]
	ds.set = ds.set[:len(ds.set)-1]
	// fmt.Printf("remove: %s,%d,%d\n", d.L, d.k, d.i)
	return d.L, d.k, d.i
}

func (p *parser) DumpDescriptors() {
	p.DumpR()
	p.DumpU()
}

func (p *parser) DumpR() {
	fmt.Println("R:")
	for _, d := range p.R.set {
		fmt.Printf(" %s\n", d)
	}
}

func (p *parser) DumpU() {
	fmt.Println("U:")
	for _, d := range p.U.set {
		fmt.Printf(" %s\n", d)
	}
}

/*** TestSelect ***/

func (p *parser) follow(nt symbols.NT) bool {
	_, exist := followSets[nt][p.lex.Tokens[p.cI].Type()]
	return exist
}

func (p *parser) testSelect(l slot.Label) bool {
	_, exist := first[l][p.lex.Tokens[p.cI].Type()]
	// fmt.Printf("testSelect(%s) = %t\n", l, exist)
	return exist
}

var first = []map[token.Type]string{
	// AND : ∙& notEqAnd WS
	{
		token.T_4: "&",
	},
	// AND : & ∙notEqAnd WS
	{
		token.T_91: "notEqAnd",
	},
	// AND : & notEqAnd ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AND : & notEqAnd WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ANDExpr : ∙EqualExpr RepANDEq0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ANDExpr : EqualExpr ∙RepANDEq0x
	{
		token.T_4:   "&",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ANDExpr : EqualExpr RepANDEq0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// AND_AND : ∙&& WS
	{
		token.T_5: "&&",
	},
	// AND_AND : && ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AND_AND : && WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AND_EQU : ∙&= WS
	{
		token.T_6: "&=",
	},
	// AND_EQU : &= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AND_EQU : &= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ASSERT : ∙assert notLorD
	{
		token.T_47: "assert",
	},
	// ASSERT : assert ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// ASSERT : assert notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddAlts : ∙PLUS
	{
		token.T_11: "+",
	},
	// AddAlts : PLUS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddAlts : ∙MINUS
	{
		token.T_15: "-",
	},
	// AddAlts : MINUS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddExpr : ∙MultExpr RepAddAltsMult0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddExpr : MultExpr ∙RepAddAltsMult0x
	{
		token.T_11:  "+",
		token.T_15:  "-",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// AddExpr : MultExpr RepAddAltsMult0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Any0xX : ∙0
	{
		token.T_21: "0",
	},
	// Any0xX : 0 ∙
	{
		token.T_112: "repHex0x",
		token.T_113: "repHex1x",
	},
	// Any0xX : ∙x
	{
		token.T_134: "x",
	},
	// Any0xX : x ∙
	{
		token.T_112: "repHex0x",
		token.T_113: "repHex1x",
	},
	// Any0xX : ∙X
	{
		token.T_39: "X",
	},
	// Any0xX : X ∙
	{
		token.T_112: "repHex0x",
		token.T_113: "repHex1x",
	},
	// Arguments : ∙LPAR OptExprs RPAR
	{
		token.T_7: "(",
	},
	// Arguments : LPAR ∙OptExprs RPAR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Arguments : LPAR OptExprs ∙RPAR
	{
		token.T_8: ")",
	},
	// Arguments : LPAR OptExprs RPAR ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayCreatorRest : ∙LBRK ArrayRest
	{
		token.T_40: "[",
	},
	// ArrayCreatorRest : LBRK ∙ArrayRest
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ArrayCreatorRest : LBRK ArrayRest ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayInitializer : ∙LWING OptVarInit RWING
	{
		token.T_136: "{",
	},
	// ArrayInitializer : LWING ∙OptVarInit RWING
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ArrayInitializer : LWING OptVarInit ∙RWING
	{
		token.T_140: "}",
	},
	// ArrayInitializer : LWING OptVarInit RWING ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayRest : ∙RBRK RepDim0x ArrayInitializer
	{
		token.T_41: "]",
	},
	// ArrayRest : RBRK ∙RepDim0x ArrayInitializer
	{
		token.T_40:  "[",
		token.T_136: "{",
	},
	// ArrayRest : RBRK RepDim0x ∙ArrayInitializer
	{
		token.T_136: "{",
	},
	// ArrayRest : RBRK RepDim0x ArrayInitializer ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayRest : ∙Expr RBRK RepDimExpr0x RepDim0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ArrayRest : Expr ∙RBRK RepDimExpr0x RepDim0x
	{
		token.T_41: "]",
	},
	// ArrayRest : Expr RBRK ∙RepDimExpr0x RepDim0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayRest : Expr RBRK RepDimExpr0x ∙RepDim0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayRest : Expr RBRK RepDimExpr0x RepDim0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// AssignOp : ∙EQU
	{
		token.T_28: "=",
	},
	// AssignOp : EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙PLUS_EQU
	{
		token.T_13: "+=",
	},
	// AssignOp : PLUS_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙MINUS_EQU
	{
		token.T_17: "-=",
	},
	// AssignOp : MINUS_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙STAR_EQU
	{
		token.T_10: "*=",
	},
	// AssignOp : STAR_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙DIV_EQU
	{
		token.T_20: "/=",
	},
	// AssignOp : DIV_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙AND_EQU
	{
		token.T_6: "&=",
	},
	// AssignOp : AND_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙OR_EQU
	{
		token.T_138: "|=",
	},
	// AssignOp : OR_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙HAT_EQU
	{
		token.T_43: "^=",
	},
	// AssignOp : HAT_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙MOD_EQU
	{
		token.T_3: "%=",
	},
	// AssignOp : MOD_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙SL_EQU
	{
		token.T_26: "<<=",
	},
	// AssignOp : SL_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙SR_EQU
	{
		token.T_33: ">>=",
	},
	// AssignOp : SR_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AssignOp : ∙BSR_EQU
	{
		token.T_35: ">>>=",
	},
	// AssignOp : BSR_EQU ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BANG : ∙! nEq WS
	{
		token.T_0: "!",
	},
	// BANG : ! ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// BANG : ! nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BANG : ! nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BREAK : ∙break notLorD
	{
		token.T_51: "break",
	},
	// BREAK : break ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// BREAK : break notLorD ∙
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// BSR : ∙>>> nEq WS
	{
		token.T_34: ">>>",
	},
	// BSR : >>> ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// BSR : >>> nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BSR : >>> nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BSR_EQU : ∙>>>= WS
	{
		token.T_35: ">>>=",
	},
	// BSR_EQU : >>>= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BSR_EQU : >>>= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BasicType : ∙BasicTypeLit notLorD
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_116: "short",
	},
	// BasicType : BasicTypeLit ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// BasicType : BasicTypeLit notLorD ∙
	{
		token.T_8:   ")",
		token.T_18:  ".",
		token.T_40:  "[",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// BasicTypeLit : ∙byte
	{
		token.T_52: "byte",
	},
	// BasicTypeLit : byte ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙short
	{
		token.T_116: "short",
	},
	// BasicTypeLit : short ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙char
	{
		token.T_56: "char",
	},
	// BasicTypeLit : char ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙int
	{
		token.T_80: "int",
	},
	// BasicTypeLit : int ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙long
	{
		token.T_86: "long",
	},
	// BasicTypeLit : long ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙float
	{
		token.T_73: "float",
	},
	// BasicTypeLit : float ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙double
	{
		token.T_61: "double",
	},
	// BasicTypeLit : double ∙
	{
		token.T_98: "notLorD",
	},
	// BasicTypeLit : ∙boolean
	{
		token.T_50: "boolean",
	},
	// BasicTypeLit : boolean ∙
	{
		token.T_98: "notLorD",
	},
	// Beoptfd : ∙binaryExponent optfFdD
	{
		token.T_48: "binaryExponent",
	},
	// Beoptfd : binaryExponent ∙optfFdD
	{
		token.T_105: "optfFdD",
	},
	// Beoptfd : binaryExponent optfFdD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Block : ∙LWING RepBlkSt0x RWING
	{
		token.T_136: "{",
	},
	// Block : LWING ∙RepBlkSt0x RWING
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Block : LWING RepBlkSt0x ∙RWING
	{
		token.T_140: "}",
	},
	// Block : LWING RepBlkSt0x RWING ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// BlockStmt : ∙LocalVarDeclStmt
	{
		token.T_71: "final",
	},
	// BlockStmt : LocalVarDeclStmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// BlockStmt : ∙RepModif0 ClsDecl
	{
		token.T_37:  "Cls",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// BlockStmt : RepModif0 ∙ClsDecl
	{
		token.T_37: "Cls",
	},
	// BlockStmt : RepModif0 ClsDecl ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// BlockStmt : ∙Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// BlockStmt : Stmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CASE : ∙case notLorD
	{
		token.T_54: "case",
	},
	// CASE : case ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// CASE : case notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CATCH : ∙catch notLorD
	{
		token.T_55: "catch",
	},
	// CATCH : catch ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// CATCH : catch notLorD ∙
	{
		token.T_7: "(",
	},
	// COLON : ∙: WS
	{
		token.T_22: ":",
	},
	// COLON : : ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// COLON : : WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// COMMA : ∙, WS
	{
		token.T_14: ",",
	},
	// COMMA : , ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// COMMA : , WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CONTINUE : ∙continue notLorD
	{
		token.T_57: "continue",
	},
	// CONTINUE : continue ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// CONTINUE : continue notLorD ∙
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// CarrotAlts : ∙SL
	{
		token.T_25: "<<",
	},
	// CarrotAlts : SL ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CarrotAlts : ∙SR
	{
		token.T_32: ">>",
	},
	// CarrotAlts : SR ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CarrotAlts : ∙BSR
	{
		token.T_34: ">>>",
	},
	// CarrotAlts : BSR ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Catch : ∙CATCH LPAR FormalParam RPAR Block
	{
		token.T_55: "catch",
	},
	// Catch : CATCH ∙LPAR FormalParam RPAR Block
	{
		token.T_7: "(",
	},
	// Catch : CATCH LPAR ∙FormalParam RPAR Block
	{
		token.T_71: "final",
	},
	// Catch : CATCH LPAR FormalParam ∙RPAR Block
	{
		token.T_8: ")",
	},
	// Catch : CATCH LPAR FormalParam RPAR ∙Block
	{
		token.T_136: "{",
	},
	// Catch : CATCH LPAR FormalParam RPAR Block ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CatchBlk : ∙Catch RepCatch0x OptFin
	{
		token.T_55: "catch",
	},
	// CatchBlk : Catch ∙RepCatch0x OptFin
	{
		token.T_55:  "catch",
		token.T_71:  "final",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CatchBlk : Catch RepCatch0x ∙OptFin
	{
		token.T_71:  "final",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CatchBlk : Catch RepCatch0x OptFin ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CatchBlk : ∙Finally
	{
		token.T_72: "finally",
	},
	// CatchBlk : Finally ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CharLiteral : ∙sinQuo EscSlash sinQuo
	{
		token.T_117: "sinQuo",
	},
	// CharLiteral : sinQuo ∙EscSlash sinQuo
	{
		token.T_42:  "^",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// CharLiteral : sinQuo EscSlash ∙sinQuo
	{
		token.T_117: "sinQuo",
	},
	// CharLiteral : sinQuo EscSlash sinQuo ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Cls : ∙Cls notLorD
	{
		token.T_37: "Cls",
	},
	// Cls : Cls ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// Cls : Cls notLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_98:  "notLorD",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsBdy : ∙LWING RepClsBDecl0x RWING
	{
		token.T_136: "{",
	},
	// ClsBdy : LWING ∙RepClsBDecl0x RWING
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// ClsBdy : LWING RepClsBDecl0x ∙RWING
	{
		token.T_140: "}",
	},
	// ClsBdy : LWING RepClsBDecl0x RWING ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ClsBdyDecl : ∙SEMI
	{
		token.T_23: ";",
	},
	// ClsBdyDecl : SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// ClsBdyDecl : ∙OptStatic Block
	{
		token.T_118: "static",
		token.T_136: "{",
	},
	// ClsBdyDecl : OptStatic ∙Block
	{
		token.T_136: "{",
	},
	// ClsBdyDecl : OptStatic Block ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// ClsBdyDecl : ∙RepModif0 MemDecl
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
	},
	// ClsBdyDecl : RepModif0 ∙MemDecl
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// ClsBdyDecl : RepModif0 MemDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// ClsCreatorRest : ∙Arguments OptClsBdy
	{
		token.T_7: "(",
	},
	// ClsCreatorRest : Arguments ∙OptClsBdy
	{
		token.T_136: "{",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsCreatorRest : Arguments OptClsBdy ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsDecl : ∙Cls ID OptExtClsType OptImpClsLst ClsBdy
	{
		token.T_37: "Cls",
	},
	// ClsDecl : Cls ∙ID OptExtClsType OptImpClsLst ClsBdy
	{
		token.T_97: "notKeyword",
	},
	// ClsDecl : Cls ID ∙OptExtClsType OptImpClsLst ClsBdy
	{
		token.T_68:  "extends",
		token.T_77:  "implements",
		token.T_136: "{",
	},
	// ClsDecl : Cls ID OptExtClsType ∙OptImpClsLst ClsBdy
	{
		token.T_77:  "implements",
		token.T_136: "{",
	},
	// ClsDecl : Cls ID OptExtClsType OptImpClsLst ∙ClsBdy
	{
		token.T_136: "{",
	},
	// ClsDecl : Cls ID OptExtClsType OptImpClsLst ClsBdy ∙
	{
		token.T_0:   "!",
		token.EOF:   "$",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ClsType : ∙ID RepDotID0x
	{
		token.T_97: "notKeyword",
	},
	// ClsType : ID ∙RepDotID0x
	{
		token.T_18:  ".",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsType : ID RepDotID0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsTypeList : ∙ClsType RepComCls0x
	{
		token.T_97: "notKeyword",
	},
	// ClsTypeList : ClsType ∙RepComCls0x
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_136: "{",
	},
	// ClsTypeList : ClsType RepComCls0x ∙
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// CompUnit : ∙WS OptPackDecl RepImpDecl0x RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_85:  "line_comment",
		token.T_88:  "native",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.EOF:   "$",
	},
	// CompUnit : WS ∙OptPackDecl RepImpDecl0x RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.EOF:   "$",
	},
	// CompUnit : WS OptPackDecl ∙RepImpDecl0x RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.EOF:   "$",
	},
	// CompUnit : WS OptPackDecl RepImpDecl0x ∙RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.EOF:   "$",
	},
	// CompUnit : WS OptPackDecl RepImpDecl0x RepSemiModDecl0x ∙
	{
		token.EOF: "$",
	},
	// CondANDExpr : ∙IORExpr RepANDIOR0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CondANDExpr : IORExpr ∙RepANDIOR0x
	{
		token.T_5:   "&&",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// CondANDExpr : IORExpr RepANDIOR0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// CondExpr : ∙CondORExpr RepCondition0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CondExpr : CondORExpr ∙RepCondition0x
	{
		token.T_36:  "?",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// CondExpr : CondORExpr RepCondition0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// CondORExpr : ∙CondANDExpr RepORcAND0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CondORExpr : CondANDExpr ∙RepORcAND0x
	{
		token.T_139: "||",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// CondORExpr : CondANDExpr RepORcAND0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// ConstDecl : ∙ID ConstDeclRest
	{
		token.T_97: "notKeyword",
	},
	// ConstDecl : ID ∙ConstDeclRest
	{
		token.T_28: "=",
		token.T_40: "[",
	},
	// ConstDecl : ID ConstDeclRest ∙
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ConstDeclRest : ∙RepDim0x EQU VarInitial
	{
		token.T_28: "=",
		token.T_40: "[",
	},
	// ConstDeclRest : RepDim0x ∙EQU VarInitial
	{
		token.T_28: "=",
	},
	// ConstDeclRest : RepDim0x EQU ∙VarInitial
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// ConstDeclRest : RepDim0x EQU VarInitial ∙
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ConstDeclsRest : ∙ConstDeclRest RepComCnstDecl0x
	{
		token.T_28: "=",
		token.T_40: "[",
	},
	// ConstDeclsRest : ConstDeclRest ∙RepComCnstDecl0x
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ConstDeclsRest : ConstDeclRest RepComCnstDecl0x ∙
	{
		token.T_23: ";",
	},
	// ConstExpr : ∙Expr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ConstExpr : Expr ∙
	{
		token.T_22: ":",
	},
	// CreatedName : ∙ID RepDotID0x
	{
		token.T_97: "notKeyword",
	},
	// CreatedName : ID ∙RepDotID0x
	{
		token.T_18: ".",
		token.T_7:  "(",
	},
	// CreatedName : ID RepDotID0x ∙
	{
		token.T_7: "(",
	},
	// Creator : ∙CreatedName ClsCreatorRest
	{
		token.T_97: "notKeyword",
	},
	// Creator : CreatedName ∙ClsCreatorRest
	{
		token.T_7: "(",
	},
	// Creator : CreatedName ClsCreatorRest ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Creator : ∙TypeAlts ArrayCreatorRest
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// Creator : TypeAlts ∙ArrayCreatorRest
	{
		token.T_40: "[",
	},
	// Creator : TypeAlts ArrayCreatorRest ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DEC : ∙-- WS
	{
		token.T_16: "--",
	},
	// DEC : -- ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// DEC : -- WS ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// DEFAULT : ∙default notLorD
	{
		token.T_58: "default",
	},
	// DEFAULT : default ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// DEFAULT : default notLorD ∙
	{
		token.T_22: ":",
	},
	// DIV : ∙/ nEq WS
	{
		token.T_19: "/",
	},
	// DIV : / ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// DIV : / nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DIV : / nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DIV_EQU : ∙/= WS
	{
		token.T_20: "/=",
	},
	// DIV_EQU : /= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DIV_EQU : /= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DO : ∙do notLorD
	{
		token.T_59: "do",
	},
	// DO : do ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// DO : do notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// DOT : ∙. WS
	{
		token.T_18: ".",
	},
	// DOT : . ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_9:   "*",
		token.T_37:  "Cls",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_120: "super",
		token.T_123: "this",
	},
	// DOT : . WS ∙
	{
		token.T_9:   "*",
		token.T_37:  "Cls",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_120: "super",
		token.T_123: "this",
	},
	// DecimalFloat : ∙repDig1x dot repDig0x optExpo fF_dD
	{
		token.T_111: "repDig1x",
	},
	// DecimalFloat : repDig1x ∙dot repDig0x optExpo fF_dD
	{
		token.T_60: "dot",
	},
	// DecimalFloat : repDig1x dot ∙repDig0x optExpo fF_dD
	{
		token.T_110: "repDig0x",
	},
	// DecimalFloat : repDig1x dot repDig0x ∙optExpo fF_dD
	{
		token.T_103: "optExpo",
	},
	// DecimalFloat : repDig1x dot repDig0x optExpo ∙fF_dD
	{
		token.T_69: "fF_dD",
	},
	// DecimalFloat : repDig1x dot repDig0x optExpo fF_dD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DecimalFloat : ∙dot RepDig1xExp
	{
		token.T_60: "dot",
	},
	// DecimalFloat : dot ∙RepDig1xExp
	{
		token.T_111: "repDig1x",
	},
	// DecimalFloat : dot RepDig1xExp ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DecimalFloat : ∙RepDig1xExp fF_dD
	{
		token.T_111: "repDig1x",
	},
	// DecimalFloat : RepDig1xExp ∙fF_dD
	{
		token.T_69: "fF_dD",
	},
	// DecimalFloat : RepDig1xExp fF_dD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DecimalFloat : ∙RepDig1xOptExp fF_dD
	{
		token.T_111: "repDig1x",
	},
	// DecimalFloat : RepDig1xOptExp ∙fF_dD
	{
		token.T_69: "fF_dD",
	},
	// DecimalFloat : RepDig1xOptExp fF_dD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DecimalNumeral : ∙ze
	{
		token.T_135: "ze",
	},
	// DecimalNumeral : ze ∙
	{
		token.T_104: "optOneL",
	},
	// DecimalNumeral : ∙onenine repNumx0
	{
		token.T_102: "onenine",
	},
	// DecimalNumeral : onenine ∙repNumx0
	{
		token.T_114: "repNumx0",
	},
	// DecimalNumeral : onenine repNumx0 ∙
	{
		token.T_104: "optOneL",
	},
	// DeclAlts : ∙ClsDecl
	{
		token.T_37: "Cls",
	},
	// DeclAlts : ClsDecl ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// DeclAlts : ∙IntfDecl
	{
		token.T_38: "Intf",
	},
	// DeclAlts : IntfDecl ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// Dim : ∙LBRK RBRK
	{
		token.T_40: "[",
	},
	// Dim : LBRK ∙RBRK
	{
		token.T_41: "]",
	},
	// Dim : LBRK RBRK ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DimExpr : ∙LBRK Expr RBRK
	{
		token.T_40: "[",
	},
	// DimExpr : LBRK ∙Expr RBRK
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DimExpr : LBRK Expr ∙RBRK
	{
		token.T_41: "]",
	},
	// DimExpr : LBRK Expr RBRK ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ELSE : ∙else notLorD
	{
		token.T_64: "else",
	},
	// ELSE : else ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// ELSE : else notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// EQU : ∙= nEq WS
	{
		token.T_28: "=",
	},
	// EQU : = ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// EQU : = nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// EQU : = nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// EQUAL : ∙== WS
	{
		token.T_29: "==",
	},
	// EQUAL : == ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EQUAL : == WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ESInst : ∙EqShift
	{
		token.T_24: "<",
		token.T_27: "<=",
		token.T_30: ">",
		token.T_31: ">=",
	},
	// ESInst : EqShift ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ESInst : ∙INSTANCEOF ReferenceType
	{
		token.T_79: "instanceof",
	},
	// ESInst : INSTANCEOF ∙ReferenceType
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// ESInst : INSTANCEOF ReferenceType ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EXTENDS : ∙extends notLorD
	{
		token.T_68: "extends",
	},
	// EXTENDS : extends ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// EXTENDS : extends notLorD ∙
	{
		token.T_97: "notKeyword",
	},
	// EqAlts : ∙EQUAL
	{
		token.T_29: "==",
	},
	// EqAlts : EQUAL ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqAlts : ∙NOT_EQUAL
	{
		token.T_1: "!=",
	},
	// EqAlts : NOT_EQUAL ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqCheck : ∙LE
	{
		token.T_27: "<=",
	},
	// EqCheck : LE ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqCheck : ∙GE
	{
		token.T_31: ">=",
	},
	// EqCheck : GE ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqCheck : ∙LT
	{
		token.T_24: "<",
	},
	// EqCheck : LT ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqCheck : ∙GT
	{
		token.T_30: ">",
	},
	// EqCheck : GT ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqShift : ∙EqCheck ShiftExpr
	{
		token.T_24: "<",
		token.T_27: "<=",
		token.T_30: ">",
		token.T_31: ">=",
	},
	// EqShift : EqCheck ∙ShiftExpr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqShift : EqCheck ShiftExpr ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EqualExpr : ∙RelateExpr RepEqExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqualExpr : RelateExpr ∙RepEqExpr0x
	{
		token.T_1:   "!=",
		token.T_29:  "==",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EqualExpr : RelateExpr RepEqExpr0x ∙
	{
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EscOrLineOrBlock : ∙line_comment
	{
		token.T_85: "line_comment",
	},
	// EscOrLineOrBlock : line_comment ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// EscOrLineOrBlock : ∙block_comment
	{
		token.T_49: "block_comment",
	},
	// EscOrLineOrBlock : block_comment ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// EscOrLineOrBlock : ∙escCharSp
	{
		token.T_66: "escCharSp",
	},
	// EscOrLineOrBlock : escCharSp ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// EscSlash : ∙Escape
	{
		token.T_63: "dubSlash",
	},
	// EscSlash : Escape ∙
	{
		token.T_117: "sinQuo",
	},
	// EscSlash : ∙EscUp
	{
		token.T_42:  "^",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// EscSlash : EscUp ∙
	{
		token.T_117: "sinQuo",
	},
	// EscUp : ∙^
	{
		token.T_42: "^",
	},
	// EscUp : ^ ∙
	{
		token.T_117: "sinQuo",
	},
	// EscUp : ∙sinQuo
	{
		token.T_117: "sinQuo",
	},
	// EscUp : sinQuo ∙
	{
		token.T_117: "sinQuo",
	},
	// EscUp : ∙dubSlash
	{
		token.T_63: "dubSlash",
	},
	// EscUp : dubSlash ∙
	{
		token.T_117: "sinQuo",
	},
	// Escape : ∙dubSlash Escs
	{
		token.T_63: "dubSlash",
	},
	// Escape : dubSlash ∙Escs
	{
		token.T_65:  "esc",
		token.T_82:  "int03Two07",
		token.T_83:  "int07",
		token.T_129: "two07",
		token.T_130: "u",
	},
	// Escape : dubSlash Escs ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Escs : ∙esc
	{
		token.T_65: "esc",
	},
	// Escs : esc ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Escs : ∙OctalEscape
	{
		token.T_82:  "int03Two07",
		token.T_83:  "int07",
		token.T_129: "two07",
	},
	// Escs : OctalEscape ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Escs : ∙UnicodeEscape
	{
		token.T_130: "u",
	},
	// Escs : UnicodeEscape ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Expr : ∙CondExpr RepAsscExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Expr : CondExpr ∙RepAsscExpr0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_43:  "^=",
		token.T_138: "|=",
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// Expr : CondExpr RepAsscExpr0x ∙
	{
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// FINAL : ∙final notLorD
	{
		token.T_71: "final",
	},
	// FINAL : final ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// FINAL : final notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// FINALLY : ∙finally notLorD
	{
		token.T_72: "finally",
	},
	// FINALLY : finally ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// FINALLY : finally notLorD ∙
	{
		token.T_136: "{",
	},
	// FOR : ∙for notLorD
	{
		token.T_74: "for",
	},
	// FOR : for ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// FOR : for notLorD ∙
	{
		token.T_7: "(",
	},
	// Finally : ∙FINALLY Block
	{
		token.T_72: "finally",
	},
	// Finally : FINALLY ∙Block
	{
		token.T_136: "{",
	},
	// Finally : FINALLY Block ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// FloatLiteral : ∙HexFloat
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// FloatLiteral : HexFloat ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// FloatLiteral : ∙DecimalFloat
	{
		token.T_60:  "dot",
		token.T_111: "repDig1x",
	},
	// FloatLiteral : DecimalFloat ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ForInit : ∙OptFinType Type VarDeclInit
	{
		token.T_71: "final",
	},
	// ForInit : OptFinType ∙Type VarDeclInit
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// ForInit : OptFinType Type ∙VarDeclInit
	{
		token.T_97: "notKeyword",
	},
	// ForInit : OptFinType Type VarDeclInit ∙
	{
		token.T_23: ";",
	},
	// ForInit : ∙StmtExpr RepComSExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ForInit : StmtExpr ∙RepComSExpr0x
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ForInit : StmtExpr RepComSExpr0x ∙
	{
		token.T_23: ";",
	},
	// ForUpdate : ∙StmtExpr RepComSExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ForUpdate : StmtExpr ∙RepComSExpr0x
	{
		token.T_14: ",",
		token.T_8:  ")",
	},
	// ForUpdate : StmtExpr RepComSExpr0x ∙
	{
		token.T_8: ")",
	},
	// FormalParam : ∙OptFinType VarDelID
	{
		token.T_71: "final",
	},
	// FormalParam : OptFinType ∙VarDelID
	{
		token.T_97: "notKeyword",
	},
	// FormalParam : OptFinType VarDelID ∙
	{
		token.T_8: ")",
	},
	// FormalParamDecls : ∙OptFinType FormalParamDeclsRest
	{
		token.T_71: "final",
	},
	// FormalParamDecls : OptFinType ∙FormalParamDeclsRest
	{
		token.T_97: "notKeyword",
	},
	// FormalParamDecls : OptFinType FormalParamDeclsRest ∙
	{
		token.T_8: ")",
	},
	// FormalParamDeclsRest : ∙VarDelID OptComFormPDecl
	{
		token.T_97: "notKeyword",
	},
	// FormalParamDeclsRest : VarDelID ∙OptComFormPDecl
	{
		token.T_14: ",",
		token.T_8:  ")",
	},
	// FormalParamDeclsRest : VarDelID OptComFormPDecl ∙
	{
		token.T_8: ")",
	},
	// FormalParams : ∙LPAR OptFormPDecl RPAR
	{
		token.T_7: "(",
	},
	// FormalParams : LPAR ∙OptFormPDecl RPAR
	{
		token.T_8:  ")",
		token.T_71: "final",
	},
	// FormalParams : LPAR OptFormPDecl ∙RPAR
	{
		token.T_8: ")",
	},
	// FormalParams : LPAR OptFormPDecl RPAR ∙
	{
		token.T_23:  ";",
		token.T_40:  "[",
		token.T_125: "throws",
		token.T_136: "{",
	},
	// GE : ∙>= WS
	{
		token.T_31: ">=",
	},
	// GE : >= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// GE : >= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// GT : ∙> notEqCar WS
	{
		token.T_30: ">",
	},
	// GT : > ∙notEqCar WS
	{
		token.T_92: "notEqCar",
	},
	// GT : > notEqCar ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// GT : > notEqCar WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT : ∙^ nEq WS
	{
		token.T_42: "^",
	},
	// HAT : ^ ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// HAT : ^ nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT : ^ nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT_EQU : ∙^= WS
	{
		token.T_43: "^=",
	},
	// HAT_EQU : ^= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT_EQU : ^= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HexFloat : ∙HexSignificand Beoptfd
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// HexFloat : HexSignificand ∙Beoptfd
	{
		token.T_48: "binaryExponent",
	},
	// HexFloat : HexSignificand Beoptfd ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// HexNumeral : ∙Any0xX repHex1x
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// HexNumeral : Any0xX ∙repHex1x
	{
		token.T_113: "repHex1x",
	},
	// HexNumeral : Any0xX repHex1x ∙
	{
		token.T_18:  ".",
		token.T_48:  "binaryExponent",
		token.T_104: "optOneL",
	},
	// HexSignificand : ∙HexNumeral OptDot
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// HexSignificand : HexNumeral ∙OptDot
	{
		token.T_18: ".",
		token.T_48: "binaryExponent",
	},
	// HexSignificand : HexNumeral OptDot ∙
	{
		token.T_48: "binaryExponent",
	},
	// HexSignificand : ∙RepHex0xDot hexDigit repHex0x
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// HexSignificand : RepHex0xDot ∙hexDigit repHex0x
	{
		token.T_75: "hexDigit",
	},
	// HexSignificand : RepHex0xDot hexDigit ∙repHex0x
	{
		token.T_112: "repHex0x",
	},
	// HexSignificand : RepHex0xDot hexDigit repHex0x ∙
	{
		token.T_48: "binaryExponent",
	},
	// ID : ∙notKeyword LetterLorD
	{
		token.T_97: "notKeyword",
	},
	// ID : notKeyword ∙LetterLorD
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_100: "num",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ID : notKeyword LetterLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IDSuffix : ∙LBRK RBRKAlts
	{
		token.T_40: "[",
	},
	// IDSuffix : LBRK ∙RBRKAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// IDSuffix : LBRK RBRKAlts ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IDSuffix : ∙Arguments
	{
		token.T_7: "(",
	},
	// IDSuffix : Arguments ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IDSuffix : ∙DOT OtherAlts
	{
		token.T_18: ".",
	},
	// IDSuffix : DOT ∙OtherAlts
	{
		token.T_37:  "Cls",
		token.T_89:  "new",
		token.T_120: "super",
		token.T_123: "this",
	},
	// IDSuffix : DOT OtherAlts ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IF : ∙if notLorD
	{
		token.T_76: "if",
	},
	// IF : if ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// IF : if notLorD ∙
	{
		token.T_7: "(",
	},
	// IMPLEMENTS : ∙implements notLorD
	{
		token.T_77: "implements",
	},
	// IMPLEMENTS : implements ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// IMPLEMENTS : implements notLorD ∙
	{
		token.T_97: "notKeyword",
	},
	// IMPORT : ∙import notLorD
	{
		token.T_78: "import",
	},
	// IMPORT : import ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// IMPORT : import notLorD ∙
	{
		token.T_97:  "notKeyword",
		token.T_118: "static",
	},
	// INC : ∙++ WS
	{
		token.T_12: "++",
	},
	// INC : ++ ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// INC : ++ WS ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// INSTANCEOF : ∙instanceof notLorD
	{
		token.T_79: "instanceof",
	},
	// INSTANCEOF : instanceof ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// INSTANCEOF : instanceof notLorD ∙
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// IORExpr : ∙XORExpr RepORXOR0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// IORExpr : XORExpr ∙RepORXOR0x
	{
		token.T_137: "|",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IORExpr : XORExpr RepORXOR0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ImportDecl : ∙IMPORT OptStatic QualifiedID OptDotStar SEMI
	{
		token.T_78: "import",
	},
	// ImportDecl : IMPORT ∙OptStatic QualifiedID OptDotStar SEMI
	{
		token.T_97:  "notKeyword",
		token.T_118: "static",
	},
	// ImportDecl : IMPORT OptStatic ∙QualifiedID OptDotStar SEMI
	{
		token.T_97: "notKeyword",
	},
	// ImportDecl : IMPORT OptStatic QualifiedID ∙OptDotStar SEMI
	{
		token.T_18: ".",
		token.T_23: ";",
	},
	// ImportDecl : IMPORT OptStatic QualifiedID OptDotStar ∙SEMI
	{
		token.T_23: ";",
	},
	// ImportDecl : IMPORT OptStatic QualifiedID OptDotStar SEMI ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// InnerCreator : ∙ID ClsCreatorRest
	{
		token.T_97: "notKeyword",
	},
	// InnerCreator : ID ∙ClsCreatorRest
	{
		token.T_7: "(",
	},
	// InnerCreator : ID ClsCreatorRest ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IntegerLiteral : ∙NumeralAlts optOneL
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_134: "x",
		token.T_135: "ze",
	},
	// IntegerLiteral : NumeralAlts ∙optOneL
	{
		token.T_104: "optOneL",
	},
	// IntegerLiteral : NumeralAlts optOneL ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Intf : ∙Intf notLorD
	{
		token.T_38: "Intf",
	},
	// Intf : Intf ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// Intf : Intf notLorD ∙
	{
		token.T_97: "notKeyword",
		token.T_98: "notLorD",
	},
	// IntfBdy : ∙LWING RepInBodDecl0x RWING
	{
		token.T_136: "{",
	},
	// IntfBdy : LWING ∙RepInBodDecl0x RWING
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfBdy : LWING RepInBodDecl0x ∙RWING
	{
		token.T_140: "}",
	},
	// IntfBdy : LWING RepInBodDecl0x RWING ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// IntfBdyDecl : ∙RepModif0 IntfMemDecl
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
	},
	// IntfBdyDecl : RepModif0 ∙IntfMemDecl
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// IntfBdyDecl : RepModif0 IntfMemDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfBdyDecl : ∙SEMI
	{
		token.T_23: ";",
	},
	// IntfBdyDecl : SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfDecl : ∙Intf ID OptExtendsClsLis IntfBdy
	{
		token.T_38: "Intf",
	},
	// IntfDecl : Intf ∙ID OptExtendsClsLis IntfBdy
	{
		token.T_97: "notKeyword",
	},
	// IntfDecl : Intf ID ∙OptExtendsClsLis IntfBdy
	{
		token.T_68:  "extends",
		token.T_136: "{",
	},
	// IntfDecl : Intf ID OptExtendsClsLis ∙IntfBdy
	{
		token.T_136: "{",
	},
	// IntfDecl : Intf ID OptExtendsClsLis IntfBdy ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// IntfMemDecl : ∙IntfMethFieldDecl
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// IntfMemDecl : IntfMethFieldDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMemDecl : ∙VOID ID VoidIntfMethDeclRst
	{
		token.T_131: "void",
	},
	// IntfMemDecl : VOID ∙ID VoidIntfMethDeclRst
	{
		token.T_97: "notKeyword",
	},
	// IntfMemDecl : VOID ID ∙VoidIntfMethDeclRst
	{
		token.T_7: "(",
	},
	// IntfMemDecl : VOID ID VoidIntfMethDeclRst ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMemDecl : ∙IntfDecl
	{
		token.T_38: "Intf",
	},
	// IntfMemDecl : IntfDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMemDecl : ∙ClsDecl
	{
		token.T_37: "Cls",
	},
	// IntfMemDecl : ClsDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethDeclRest : ∙FormalParams RepDim0x OptThrowClsTypLst SEMI
	{
		token.T_7: "(",
	},
	// IntfMethDeclRest : FormalParams ∙RepDim0x OptThrowClsTypLst SEMI
	{
		token.T_23:  ";",
		token.T_40:  "[",
		token.T_125: "throws",
	},
	// IntfMethDeclRest : FormalParams RepDim0x ∙OptThrowClsTypLst SEMI
	{
		token.T_23:  ";",
		token.T_125: "throws",
	},
	// IntfMethDeclRest : FormalParams RepDim0x OptThrowClsTypLst ∙SEMI
	{
		token.T_23: ";",
	},
	// IntfMethDeclRest : FormalParams RepDim0x OptThrowClsTypLst SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethFieldDecl : ∙Type ID IntfMethFieldRest
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// IntfMethFieldDecl : Type ∙ID IntfMethFieldRest
	{
		token.T_97: "notKeyword",
	},
	// IntfMethFieldDecl : Type ID ∙IntfMethFieldRest
	{
		token.T_7:  "(",
		token.T_28: "=",
		token.T_40: "[",
	},
	// IntfMethFieldDecl : Type ID IntfMethFieldRest ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethFieldRest : ∙ConstDeclsRest SEMI
	{
		token.T_28: "=",
		token.T_40: "[",
	},
	// IntfMethFieldRest : ConstDeclsRest ∙SEMI
	{
		token.T_23: ";",
	},
	// IntfMethFieldRest : ConstDeclsRest SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethFieldRest : ∙IntfMethDeclRest
	{
		token.T_7: "(",
	},
	// IntfMethFieldRest : IntfMethDeclRest ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// LBRK : ∙[ WS
	{
		token.T_40: "[",
	},
	// LBRK : [ ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LBRK : [ WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LE : ∙<= WS
	{
		token.T_27: "<=",
	},
	// LE : <= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LE : <= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LPAR : ∙( WS
	{
		token.T_7: "(",
	},
	// LPAR : ( ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LPAR : ( WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LT : ∙< notEqCar2 WS
	{
		token.T_24: "<",
	},
	// LT : < ∙notEqCar2 WS
	{
		token.T_93: "notEqCar2",
	},
	// LT : < notEqCar2 ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LT : < notEqCar2 WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LWING : ∙{ WS
	{
		token.T_136: "{",
	},
	// LWING : { ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// LWING : { WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Letter : ∙let
	{
		token.T_84: "let",
	},
	// Letter : let ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Letter : ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Letter : WS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LetterLorD : ∙Letter RepLorD0x WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_100: "num",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LetterLorD : Letter ∙RepLorD0x WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_100: "num",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LetterLorD : Letter RepLorD0x ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LetterLorD : Letter RepLorD0x WS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙FloatLiteral
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_60:  "dot",
		token.T_111: "repDig1x",
		token.T_134: "x",
	},
	// LitAlts : FloatLiteral ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙IntegerLiteral
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_134: "x",
		token.T_135: "ze",
	},
	// LitAlts : IntegerLiteral ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙CharLiteral
	{
		token.T_117: "sinQuo",
	},
	// LitAlts : CharLiteral ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙StringLiteral
	{
		token.T_62: "dubQuo",
	},
	// LitAlts : StringLiteral ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙true notLorD
	{
		token.T_127: "true",
	},
	// LitAlts : true ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// LitAlts : true notLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙false notLorD
	{
		token.T_70: "false",
	},
	// LitAlts : false ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// LitAlts : false notLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts : ∙null notLorD
	{
		token.T_99: "null",
	},
	// LitAlts : null ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// LitAlts : null notLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Literal : ∙LitAlts WS
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_60:  "dot",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_117: "sinQuo",
		token.T_127: "true",
		token.T_134: "x",
		token.T_135: "ze",
	},
	// Literal : LitAlts ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Literal : LitAlts WS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LocalVarDeclStmt : ∙OptFinType VarDecl RepComVDecl0x SEMI
	{
		token.T_71: "final",
	},
	// LocalVarDeclStmt : OptFinType ∙VarDecl RepComVDecl0x SEMI
	{
		token.T_97: "notKeyword",
	},
	// LocalVarDeclStmt : OptFinType VarDecl ∙RepComVDecl0x SEMI
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// LocalVarDeclStmt : OptFinType VarDecl RepComVDecl0x ∙SEMI
	{
		token.T_23: ";",
	},
	// LocalVarDeclStmt : OptFinType VarDecl RepComVDecl0x SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// LorD : ∙Letter
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LorD : Letter ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LorD : ∙num
	{
		token.T_100: "num",
	},
	// LorD : num ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// MINUS : ∙- notEqSlDash WS
	{
		token.T_15: "-",
	},
	// MINUS : - ∙notEqSlDash WS
	{
		token.T_96: "notEqSlDash",
	},
	// MINUS : - notEqSlDash ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MINUS : - notEqSlDash WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MINUS_EQU : ∙-= WS
	{
		token.T_17: "-=",
	},
	// MINUS_EQU : -= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MINUS_EQU : -= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD : ∙% nEq WS
	{
		token.T_2: "%",
	},
	// MOD : % ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// MOD : % nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD : % nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD_EQU : ∙%= WS
	{
		token.T_3: "%=",
	},
	// MOD_EQU : %= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD_EQU : %= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MemAlts : ∙SEMI
	{
		token.T_23: ";",
	},
	// MemAlts : SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemAlts : ∙Block
	{
		token.T_136: "{",
	},
	// MemAlts : Block ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙Type ID FormalParams RepDim0x OptThrowClsTypLst MemAlts
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// MemDecl : Type ∙ID FormalParams RepDim0x OptThrowClsTypLst MemAlts
	{
		token.T_97: "notKeyword",
	},
	// MemDecl : Type ID ∙FormalParams RepDim0x OptThrowClsTypLst MemAlts
	{
		token.T_7: "(",
	},
	// MemDecl : Type ID FormalParams ∙RepDim0x OptThrowClsTypLst MemAlts
	{
		token.T_23:  ";",
		token.T_40:  "[",
		token.T_125: "throws",
		token.T_136: "{",
	},
	// MemDecl : Type ID FormalParams RepDim0x ∙OptThrowClsTypLst MemAlts
	{
		token.T_23:  ";",
		token.T_125: "throws",
		token.T_136: "{",
	},
	// MemDecl : Type ID FormalParams RepDim0x OptThrowClsTypLst ∙MemAlts
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// MemDecl : Type ID FormalParams RepDim0x OptThrowClsTypLst MemAlts ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙VOID ID FormalParams OptThrowClsTypLst MemAlts
	{
		token.T_131: "void",
	},
	// MemDecl : VOID ∙ID FormalParams OptThrowClsTypLst MemAlts
	{
		token.T_97: "notKeyword",
	},
	// MemDecl : VOID ID ∙FormalParams OptThrowClsTypLst MemAlts
	{
		token.T_7: "(",
	},
	// MemDecl : VOID ID FormalParams ∙OptThrowClsTypLst MemAlts
	{
		token.T_23:  ";",
		token.T_125: "throws",
		token.T_136: "{",
	},
	// MemDecl : VOID ID FormalParams OptThrowClsTypLst ∙MemAlts
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// MemDecl : VOID ID FormalParams OptThrowClsTypLst MemAlts ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙ID FormalParams OptThrowClsTypLst Block
	{
		token.T_97: "notKeyword",
	},
	// MemDecl : ID ∙FormalParams OptThrowClsTypLst Block
	{
		token.T_7: "(",
	},
	// MemDecl : ID FormalParams ∙OptThrowClsTypLst Block
	{
		token.T_125: "throws",
		token.T_136: "{",
	},
	// MemDecl : ID FormalParams OptThrowClsTypLst ∙Block
	{
		token.T_136: "{",
	},
	// MemDecl : ID FormalParams OptThrowClsTypLst Block ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙IntfDecl
	{
		token.T_38: "Intf",
	},
	// MemDecl : IntfDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙ClsDecl
	{
		token.T_37: "Cls",
	},
	// MemDecl : ClsDecl ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : ∙Type VarDecl RepComVDecl0x
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// MemDecl : Type ∙VarDecl RepComVDecl0x
	{
		token.T_97: "notKeyword",
	},
	// MemDecl : Type VarDecl ∙RepComVDecl0x
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl : Type VarDecl RepComVDecl0x ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// Modifier : ∙Modifs notLorD
	{
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// Modifier : Modifs ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// Modifier : Modifs notLorD ∙
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
	},
	// Modifs : ∙public
	{
		token.T_109: "public",
	},
	// Modifs : public ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙protected
	{
		token.T_108: "protected",
	},
	// Modifs : protected ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙private
	{
		token.T_107: "private",
	},
	// Modifs : private ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙static
	{
		token.T_118: "static",
	},
	// Modifs : static ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙abstract
	{
		token.T_44: "abstract",
	},
	// Modifs : abstract ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙final
	{
		token.T_71: "final",
	},
	// Modifs : final ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙native
	{
		token.T_88: "native",
	},
	// Modifs : native ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙synchronized
	{
		token.T_122: "synchronized",
	},
	// Modifs : synchronized ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙transient
	{
		token.T_126: "transient",
	},
	// Modifs : transient ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙volatile
	{
		token.T_132: "volatile",
	},
	// Modifs : volatile ∙
	{
		token.T_98: "notLorD",
	},
	// Modifs : ∙strictfp
	{
		token.T_119: "strictfp",
	},
	// Modifs : strictfp ∙
	{
		token.T_98: "notLorD",
	},
	// MultExpr : ∙UnaryExpr RepSDMUExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MultExpr : UnaryExpr ∙RepSDMUExpr0x
	{
		token.T_2:   "%",
		token.T_9:   "*",
		token.T_19:  "/",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// MultExpr : UnaryExpr RepSDMUExpr0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// NEW : ∙new notLorD
	{
		token.T_89: "new",
	},
	// NEW : new ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// NEW : new notLorD ∙
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// NOT_EQUAL : ∙!= WS
	{
		token.T_1: "!=",
	},
	// NOT_EQUAL : != ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// NOT_EQUAL : != WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// NumeralAlts : ∙HexNumeral
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// NumeralAlts : HexNumeral ∙
	{
		token.T_104: "optOneL",
	},
	// NumeralAlts : ∙octalNumeral
	{
		token.T_101: "octalNumeral",
	},
	// NumeralAlts : octalNumeral ∙
	{
		token.T_104: "optOneL",
	},
	// NumeralAlts : ∙DecimalNumeral
	{
		token.T_102: "onenine",
		token.T_135: "ze",
	},
	// NumeralAlts : DecimalNumeral ∙
	{
		token.T_104: "optOneL",
	},
	// OR : ∙| notEqPipe WS
	{
		token.T_137: "|",
	},
	// OR : | ∙notEqPipe WS
	{
		token.T_94: "notEqPipe",
	},
	// OR : | notEqPipe ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OR : | notEqPipe WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ORXOR : ∙OR XORExpr
	{
		token.T_137: "|",
	},
	// ORXOR : OR ∙XORExpr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ORXOR : OR XORExpr ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OR_EQU : ∙|= WS
	{
		token.T_138: "|=",
	},
	// OR_EQU : |= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OR_EQU : |= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OR_OR : ∙|| WS
	{
		token.T_139: "||",
	},
	// OR_OR : || ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OR_OR : || WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OctalEscape : ∙int03Two07
	{
		token.T_82: "int03Two07",
	},
	// OctalEscape : int03Two07 ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// OctalEscape : ∙two07
	{
		token.T_129: "two07",
	},
	// OctalEscape : two07 ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// OctalEscape : ∙int07
	{
		token.T_83: "int07",
	},
	// OctalEscape : int07 ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// OptArgs : ∙Arguments
	{
		token.T_7: "(",
	},
	// OptArgs : Arguments ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptArgs : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptClsBdy : ∙ClsBdy
	{
		token.T_136: "{",
	},
	// OptClsBdy : ClsBdy ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptClsBdy : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptColExpr : ∙COLON Expr
	{
		token.T_22: ":",
	},
	// OptColExpr : COLON ∙Expr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OptColExpr : COLON Expr ∙
	{
		token.T_23: ";",
	},
	// OptColExpr : ∙
	{
		token.T_23: ";",
	},
	// OptCom : ∙COMMA
	{
		token.T_14: ",",
	},
	// OptCom : COMMA ∙
	{
		token.T_140: "}",
	},
	// OptCom : ∙
	{
		token.T_140: "}",
	},
	// OptComFormPDecl : ∙COMMA FormalParamDecls
	{
		token.T_14: ",",
	},
	// OptComFormPDecl : COMMA ∙FormalParamDecls
	{
		token.T_71: "final",
	},
	// OptComFormPDecl : COMMA FormalParamDecls ∙
	{
		token.T_8: ")",
	},
	// OptComFormPDecl : ∙
	{
		token.T_8: ")",
	},
	// OptDot : ∙.
	{
		token.T_18: ".",
	},
	// OptDot : . ∙
	{
		token.T_48: "binaryExponent",
	},
	// OptDot : ∙
	{
		token.T_48: "binaryExponent",
	},
	// OptDotStar : ∙DOT STAR
	{
		token.T_18: ".",
	},
	// OptDotStar : DOT ∙STAR
	{
		token.T_9: "*",
	},
	// OptDotStar : DOT STAR ∙
	{
		token.T_23: ";",
	},
	// OptDotStar : ∙
	{
		token.T_23: ";",
	},
	// OptElse : ∙ELSE Stmt
	{
		token.T_64: "else",
	},
	// OptElse : ELSE ∙Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// OptElse : ELSE Stmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptElse : ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptEqVarInit : ∙EQU VarInitial
	{
		token.T_28: "=",
	},
	// OptEqVarInit : EQU ∙VarInitial
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// OptEqVarInit : EQU VarInitial ∙
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// OptEqVarInit : ∙
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// OptEsc : ∙Escape
	{
		token.T_63: "dubSlash",
	},
	// OptEsc : Escape ∙
	{
		token.T_46: "anyCarSl",
		token.T_62: "dubQuo",
		token.T_63: "dubSlash",
	},
	// OptEsc : ∙anyCarSl
	{
		token.T_46: "anyCarSl",
	},
	// OptEsc : anyCarSl ∙
	{
		token.T_46: "anyCarSl",
		token.T_62: "dubQuo",
		token.T_63: "dubSlash",
	},
	// OptExpr : ∙Expr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OptExpr : Expr ∙
	{
		token.T_23: ";",
	},
	// OptExpr : ∙
	{
		token.T_23: ";",
	},
	// OptExprs : ∙Expr RepComExp0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OptExprs : Expr ∙RepComExp0x
	{
		token.T_14: ",",
		token.T_8:  ")",
	},
	// OptExprs : Expr RepComExp0x ∙
	{
		token.T_8: ")",
	},
	// OptExprs : ∙
	{
		token.T_8: ")",
	},
	// OptExtClsType : ∙EXTENDS ClsType
	{
		token.T_68: "extends",
	},
	// OptExtClsType : EXTENDS ∙ClsType
	{
		token.T_97: "notKeyword",
	},
	// OptExtClsType : EXTENDS ClsType ∙
	{
		token.T_77:  "implements",
		token.T_136: "{",
	},
	// OptExtClsType : ∙
	{
		token.T_77:  "implements",
		token.T_136: "{",
	},
	// OptExtendsClsLis : ∙EXTENDS ClsTypeList
	{
		token.T_68: "extends",
	},
	// OptExtendsClsLis : EXTENDS ∙ClsTypeList
	{
		token.T_97: "notKeyword",
	},
	// OptExtendsClsLis : EXTENDS ClsTypeList ∙
	{
		token.T_136: "{",
	},
	// OptExtendsClsLis : ∙
	{
		token.T_136: "{",
	},
	// OptFin : ∙FINAL
	{
		token.T_71: "final",
	},
	// OptFin : FINAL ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptFin : ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptFinType : ∙FINAL Type
	{
		token.T_71: "final",
	},
	// OptFinType : FINAL ∙Type
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// OptFinType : FINAL Type ∙
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// OptForInit : ∙ForInit
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OptForInit : ForInit ∙
	{
		token.T_23: ";",
	},
	// OptForInit : ∙
	{
		token.T_23: ";",
	},
	// OptForUpd : ∙ForUpdate
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OptForUpd : ForUpdate ∙
	{
		token.T_8: ")",
	},
	// OptForUpd : ∙
	{
		token.T_8: ")",
	},
	// OptFormPDecl : ∙FormalParamDecls
	{
		token.T_71: "final",
	},
	// OptFormPDecl : FormalParamDecls ∙
	{
		token.T_8: ")",
	},
	// OptFormPDecl : ∙
	{
		token.T_8: ")",
	},
	// OptID : ∙ID
	{
		token.T_97: "notKeyword",
	},
	// OptID : ID ∙
	{
		token.T_23: ";",
	},
	// OptID : ∙
	{
		token.T_23: ";",
	},
	// OptIDSuff : ∙IDSuffix
	{
		token.T_7:  "(",
		token.T_18: ".",
		token.T_40: "[",
	},
	// OptIDSuff : IDSuffix ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptIDSuff : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptImpClsLst : ∙IMPLEMENTS ClsTypeList
	{
		token.T_77: "implements",
	},
	// OptImpClsLst : IMPLEMENTS ∙ClsTypeList
	{
		token.T_97: "notKeyword",
	},
	// OptImpClsLst : IMPLEMENTS ClsTypeList ∙
	{
		token.T_136: "{",
	},
	// OptImpClsLst : ∙
	{
		token.T_136: "{",
	},
	// OptPackDecl : ∙PackDecl
	{
		token.T_106: "package",
	},
	// OptPackDecl : PackDecl ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// OptPackDecl : ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// OptStatic : ∙STATIC
	{
		token.T_118: "static",
	},
	// OptStatic : STATIC ∙
	{
		token.T_97:  "notKeyword",
		token.T_136: "{",
	},
	// OptStatic : ∙
	{
		token.T_97:  "notKeyword",
		token.T_136: "{",
	},
	// OptThrowClsTypLst : ∙THROWS ClsTypeList
	{
		token.T_125: "throws",
	},
	// OptThrowClsTypLst : THROWS ∙ClsTypeList
	{
		token.T_97: "notKeyword",
	},
	// OptThrowClsTypLst : THROWS ClsTypeList ∙
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// OptThrowClsTypLst : ∙
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// OptVarInit : ∙VarInitial RepComInit0x OptCom
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// OptVarInit : VarInitial ∙RepComInit0x OptCom
	{
		token.T_14:  ",",
		token.T_140: "}",
	},
	// OptVarInit : VarInitial RepComInit0x ∙OptCom
	{
		token.T_14:  ",",
		token.T_140: "}",
	},
	// OptVarInit : VarInitial RepComInit0x OptCom ∙
	{
		token.T_140: "}",
	},
	// OptVarInit : ∙
	{
		token.T_140: "}",
	},
	// OtherAlts : ∙Cls
	{
		token.T_37: "Cls",
	},
	// OtherAlts : Cls ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OtherAlts : ∙THIS
	{
		token.T_123: "this",
	},
	// OtherAlts : THIS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OtherAlts : ∙SUPER Arguments
	{
		token.T_120: "super",
	},
	// OtherAlts : SUPER ∙Arguments
	{
		token.T_7: "(",
	},
	// OtherAlts : SUPER Arguments ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OtherAlts : ∙NEW InnerCreator
	{
		token.T_89: "new",
	},
	// OtherAlts : NEW ∙InnerCreator
	{
		token.T_97: "notKeyword",
	},
	// OtherAlts : NEW InnerCreator ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// PACKAGE : ∙package notLorD
	{
		token.T_106: "package",
	},
	// PACKAGE : package ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// PACKAGE : package notLorD ∙
	{
		token.T_97: "notKeyword",
	},
	// PLUS : ∙+ notEqPlus WS
	{
		token.T_11: "+",
	},
	// PLUS : + ∙notEqPlus WS
	{
		token.T_95: "notEqPlus",
	},
	// PLUS : + notEqPlus ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PLUS : + notEqPlus WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PLUS_EQU : ∙+= WS
	{
		token.T_13: "+=",
	},
	// PLUS_EQU : += ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PLUS_EQU : += WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PackDecl : ∙PACKAGE QualifiedID SEMI
	{
		token.T_106: "package",
	},
	// PackDecl : PACKAGE ∙QualifiedID SEMI
	{
		token.T_97: "notKeyword",
	},
	// PackDecl : PACKAGE QualifiedID ∙SEMI
	{
		token.T_23: ";",
	},
	// PackDecl : PACKAGE QualifiedID SEMI ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// ParExpr : ∙LPAR Expr RPAR
	{
		token.T_7: "(",
	},
	// ParExpr : LPAR ∙Expr RPAR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ParExpr : LPAR Expr ∙RPAR
	{
		token.T_8: ")",
	},
	// ParExpr : LPAR Expr RPAR ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// PostfixOp : ∙INC
	{
		token.T_12: "++",
	},
	// PostfixOp : INC ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// PostfixOp : ∙DEC
	{
		token.T_16: "--",
	},
	// PostfixOp : DEC ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// PrefixOp : ∙INC
	{
		token.T_12: "++",
	},
	// PrefixOp : INC ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PrefixOp : ∙DEC
	{
		token.T_16: "--",
	},
	// PrefixOp : DEC ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PrefixOp : ∙BANG
	{
		token.T_0: "!",
	},
	// PrefixOp : BANG ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PrefixOp : ∙TILDA
	{
		token.T_141: "~",
	},
	// PrefixOp : TILDA ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PrefixOp : ∙PLUS
	{
		token.T_11: "+",
	},
	// PrefixOp : PLUS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PrefixOp : ∙MINUS
	{
		token.T_15: "-",
	},
	// PrefixOp : MINUS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Primary : ∙ParExpr
	{
		token.T_7: "(",
	},
	// Primary : ParExpr ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙THIS OptArgs
	{
		token.T_123: "this",
	},
	// Primary : THIS ∙OptArgs
	{
		token.T_7:   "(",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : THIS OptArgs ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙SUPER SuperSuffix
	{
		token.T_120: "super",
	},
	// Primary : SUPER ∙SuperSuffix
	{
		token.T_7:  "(",
		token.T_18: ".",
	},
	// Primary : SUPER SuperSuffix ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙Literal
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_60:  "dot",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_117: "sinQuo",
		token.T_127: "true",
		token.T_134: "x",
		token.T_135: "ze",
	},
	// Primary : Literal ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙NEW Creator
	{
		token.T_89: "new",
	},
	// Primary : NEW ∙Creator
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// Primary : NEW Creator ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙QualifiedID OptIDSuff
	{
		token.T_97: "notKeyword",
	},
	// Primary : QualifiedID ∙OptIDSuff
	{
		token.T_7:   "(",
		token.T_18:  ".",
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : QualifiedID OptIDSuff ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙BasicType RepDim0x DOT Cls
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_116: "short",
	},
	// Primary : BasicType ∙RepDim0x DOT Cls
	{
		token.T_18: ".",
		token.T_40: "[",
	},
	// Primary : BasicType RepDim0x ∙DOT Cls
	{
		token.T_18: ".",
	},
	// Primary : BasicType RepDim0x DOT ∙Cls
	{
		token.T_37: "Cls",
	},
	// Primary : BasicType RepDim0x DOT Cls ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Primary : ∙VOID DOT Cls
	{
		token.T_131: "void",
	},
	// Primary : VOID ∙DOT Cls
	{
		token.T_18: ".",
	},
	// Primary : VOID DOT ∙Cls
	{
		token.T_37: "Cls",
	},
	// Primary : VOID DOT Cls ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// QUERY : ∙? WS
	{
		token.T_36: "?",
	},
	// QUERY : ? ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// QUERY : ? WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// QualifiedID : ∙ID RepDotID0x
	{
		token.T_97: "notKeyword",
	},
	// QualifiedID : ID ∙RepDotID0x
	{
		token.T_18:  ".",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// QualifiedID : ID RepDotID0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRK : ∙] WS
	{
		token.T_41: "]",
	},
	// RBRK : ] ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRK : ] WS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRKAlts : ∙RBRK RepDim0x DOT Cls
	{
		token.T_41: "]",
	},
	// RBRKAlts : RBRK ∙RepDim0x DOT Cls
	{
		token.T_18: ".",
		token.T_40: "[",
	},
	// RBRKAlts : RBRK RepDim0x ∙DOT Cls
	{
		token.T_18: ".",
	},
	// RBRKAlts : RBRK RepDim0x DOT ∙Cls
	{
		token.T_37: "Cls",
	},
	// RBRKAlts : RBRK RepDim0x DOT Cls ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRKAlts : ∙Expr RBRK
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RBRKAlts : Expr ∙RBRK
	{
		token.T_41: "]",
	},
	// RBRKAlts : Expr RBRK ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RETURN : ∙return notLorD
	{
		token.T_115: "return",
	},
	// RETURN : return ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// RETURN : return notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RPAR : ∙) WS
	{
		token.T_8: ")",
	},
	// RPAR : ) ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RPAR : ) WS ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RWING : ∙} WS
	{
		token.T_140: "}",
	},
	// RWING : } ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RWING : } WS ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ReferenceType : ∙BasicType Dim RepDim0x
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_116: "short",
	},
	// ReferenceType : BasicType ∙Dim RepDim0x
	{
		token.T_40: "[",
	},
	// ReferenceType : BasicType Dim ∙RepDim0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ReferenceType : BasicType Dim RepDim0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ReferenceType : ∙ClsType RepDim0x
	{
		token.T_97: "notKeyword",
	},
	// ReferenceType : ClsType ∙RepDim0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ReferenceType : ClsType RepDim0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RelateExpr : ∙ShiftExpr RepESInst0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RelateExpr : ShiftExpr ∙RepESInst0x
	{
		token.T_24:  "<",
		token.T_27:  "<=",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_79:  "instanceof",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RelateExpr : ShiftExpr RepESInst0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDEq0x : ∙AND EqualExpr RepANDEq0x
	{
		token.T_4: "&",
	},
	// RepANDEq0x : AND ∙EqualExpr RepANDEq0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepANDEq0x : AND EqualExpr ∙RepANDEq0x
	{
		token.T_4:   "&",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDEq0x : AND EqualExpr RepANDEq0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDEq0x : ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDIOR0x : ∙AND_AND IORExpr RepANDIOR0x
	{
		token.T_5: "&&",
	},
	// RepANDIOR0x : AND_AND ∙IORExpr RepANDIOR0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepANDIOR0x : AND_AND IORExpr ∙RepANDIOR0x
	{
		token.T_5:   "&&",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDIOR0x : AND_AND IORExpr RepANDIOR0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDIOR0x : ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepAddAltsMult0x : ∙AddAlts MultExpr
	{
		token.T_11: "+",
		token.T_15: "-",
	},
	// RepAddAltsMult0x : AddAlts ∙MultExpr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepAddAltsMult0x : AddAlts MultExpr ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepAddAltsMult0x : ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepAsscExpr0x : ∙AssignOp CondExpr RepAsscExpr0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_43:  "^=",
		token.T_138: "|=",
	},
	// RepAsscExpr0x : AssignOp ∙CondExpr RepAsscExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepAsscExpr0x : AssignOp CondExpr ∙RepAsscExpr0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_43:  "^=",
		token.T_138: "|=",
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepAsscExpr0x : AssignOp CondExpr RepAsscExpr0x ∙
	{
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepAsscExpr0x : ∙
	{
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepBlkSt0x : ∙BlockStmt RepBlkSt0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// RepBlkSt0x : BlockStmt ∙RepBlkSt0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// RepBlkSt0x : BlockStmt RepBlkSt0x ∙
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// RepBlkSt0x : ∙
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// RepCatch0x : ∙Catch RepCatch0x
	{
		token.T_55: "catch",
	},
	// RepCatch0x : Catch ∙RepCatch0x
	{
		token.T_55:  "catch",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RepCatch0x : Catch RepCatch0x ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RepCatch0x : ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RepClsBDecl0x : ∙ClsBdyDecl RepClsBDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
	},
	// RepClsBDecl0x : ClsBdyDecl ∙RepClsBDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepClsBDecl0x : ClsBdyDecl RepClsBDecl0x ∙
	{
		token.T_140: "}",
	},
	// RepClsBDecl0x : ∙
	{
		token.T_140: "}",
	},
	// RepComCls0x : ∙COMMA ClsType RepComCls0x
	{
		token.T_14: ",",
	},
	// RepComCls0x : COMMA ∙ClsType RepComCls0x
	{
		token.T_97: "notKeyword",
	},
	// RepComCls0x : COMMA ClsType ∙RepComCls0x
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_136: "{",
	},
	// RepComCls0x : COMMA ClsType RepComCls0x ∙
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// RepComCls0x : ∙
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// RepComCnstDecl0x : ∙COMMA ConstDecl RepComCnstDecl0x
	{
		token.T_14: ",",
	},
	// RepComCnstDecl0x : COMMA ∙ConstDecl RepComCnstDecl0x
	{
		token.T_97: "notKeyword",
	},
	// RepComCnstDecl0x : COMMA ConstDecl ∙RepComCnstDecl0x
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// RepComCnstDecl0x : COMMA ConstDecl RepComCnstDecl0x ∙
	{
		token.T_23: ";",
	},
	// RepComCnstDecl0x : ∙
	{
		token.T_23: ";",
	},
	// RepComExp0x : ∙COMMA Expr RepComExp0x
	{
		token.T_14: ",",
	},
	// RepComExp0x : COMMA ∙Expr RepComExp0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepComExp0x : COMMA Expr ∙RepComExp0x
	{
		token.T_14: ",",
		token.T_8:  ")",
	},
	// RepComExp0x : COMMA Expr RepComExp0x ∙
	{
		token.T_8: ")",
	},
	// RepComExp0x : ∙
	{
		token.T_8: ")",
	},
	// RepComInit0x : ∙COMMA VarInitial RepComInit0x
	{
		token.T_14: ",",
	},
	// RepComInit0x : COMMA ∙VarInitial RepComInit0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// RepComInit0x : COMMA VarInitial ∙RepComInit0x
	{
		token.T_14:  ",",
		token.T_14:  ",",
		token.T_140: "}",
	},
	// RepComInit0x : COMMA VarInitial RepComInit0x ∙
	{
		token.T_14:  ",",
		token.T_140: "}",
	},
	// RepComInit0x : ∙
	{
		token.T_14:  ",",
		token.T_140: "}",
	},
	// RepComSExpr0x : ∙COMMA StmtExpr RepComSExpr0x
	{
		token.T_14: ",",
	},
	// RepComSExpr0x : COMMA ∙StmtExpr RepComSExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepComSExpr0x : COMMA StmtExpr ∙RepComSExpr0x
	{
		token.T_14: ",",
		token.T_8:  ")",
		token.T_23: ";",
	},
	// RepComSExpr0x : COMMA StmtExpr RepComSExpr0x ∙
	{
		token.T_8:  ")",
		token.T_23: ";",
	},
	// RepComSExpr0x : ∙
	{
		token.T_8:  ")",
		token.T_23: ";",
	},
	// RepComVDecl0x : ∙COMMA VarDecl RepComVDecl0x
	{
		token.T_14: ",",
	},
	// RepComVDecl0x : COMMA ∙VarDecl RepComVDecl0x
	{
		token.T_97: "notKeyword",
	},
	// RepComVDecl0x : COMMA VarDecl ∙RepComVDecl0x
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepComVDecl0x : COMMA VarDecl RepComVDecl0x ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepComVDecl0x : ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepCondition0x : ∙QUERY Expr COLON CondORExpr RepCondition0x
	{
		token.T_36: "?",
	},
	// RepCondition0x : QUERY ∙Expr COLON CondORExpr RepCondition0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepCondition0x : QUERY Expr ∙COLON CondORExpr RepCondition0x
	{
		token.T_22: ":",
	},
	// RepCondition0x : QUERY Expr COLON ∙CondORExpr RepCondition0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepCondition0x : QUERY Expr COLON CondORExpr ∙RepCondition0x
	{
		token.T_36:  "?",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepCondition0x : QUERY Expr COLON CondORExpr RepCondition0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepCondition0x : ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepDig1xExp : ∙repDig1x exponent
	{
		token.T_111: "repDig1x",
	},
	// RepDig1xExp : repDig1x ∙exponent
	{
		token.T_67: "exponent",
	},
	// RepDig1xExp : repDig1x exponent ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_69:  "fF_dD",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDig1xOptExp : ∙repDig1x optExpo
	{
		token.T_111: "repDig1x",
	},
	// RepDig1xOptExp : repDig1x ∙optExpo
	{
		token.T_103: "optExpo",
	},
	// RepDig1xOptExp : repDig1x optExpo ∙
	{
		token.T_69: "fF_dD",
	},
	// RepDim0x : ∙Dim RepDim0x
	{
		token.T_40: "[",
	},
	// RepDim0x : Dim ∙RepDim0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDim0x : Dim RepDim0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDim0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDimExpr0x : ∙DimExpr RepDimExpr0x
	{
		token.T_40: "[",
	},
	// RepDimExpr0x : DimExpr ∙RepDimExpr0x
	{
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDimExpr0x : DimExpr RepDimExpr0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDimExpr0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDotID0x : ∙DOT ID RepDotID0x
	{
		token.T_18: ".",
	},
	// RepDotID0x : DOT ∙ID RepDotID0x
	{
		token.T_97: "notKeyword",
	},
	// RepDotID0x : DOT ID ∙RepDotID0x
	{
		token.T_18:  ".",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDotID0x : DOT ID RepDotID0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDotID0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepESInst0x : ∙ESInst RepESInst0x
	{
		token.T_24: "<",
		token.T_27: "<=",
		token.T_30: ">",
		token.T_31: ">=",
		token.T_79: "instanceof",
	},
	// RepESInst0x : ESInst ∙RepESInst0x
	{
		token.T_24:  "<",
		token.T_27:  "<=",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_79:  "instanceof",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepESInst0x : ESInst RepESInst0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepESInst0x : ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepEqExpr0x : ∙EqAlts RelateExpr RepEqExpr0x
	{
		token.T_1:  "!=",
		token.T_29: "==",
	},
	// RepEqExpr0x : EqAlts ∙RelateExpr RepEqExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepEqExpr0x : EqAlts RelateExpr ∙RepEqExpr0x
	{
		token.T_1:   "!=",
		token.T_29:  "==",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepEqExpr0x : EqAlts RelateExpr RepEqExpr0x ∙
	{
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepEqExpr0x : ∙
	{
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHatAND0x : ∙HAT ANDExpr RepHatAND0x
	{
		token.T_42: "^",
	},
	// RepHatAND0x : HAT ∙ANDExpr RepHatAND0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepHatAND0x : HAT ANDExpr ∙RepHatAND0x
	{
		token.T_42:  "^",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHatAND0x : HAT ANDExpr RepHatAND0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHatAND0x : ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHex0xDot : ∙Any0xX repHex0x .
	{
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_134: "x",
	},
	// RepHex0xDot : Any0xX ∙repHex0x .
	{
		token.T_112: "repHex0x",
	},
	// RepHex0xDot : Any0xX repHex0x ∙.
	{
		token.T_18: ".",
	},
	// RepHex0xDot : Any0xX repHex0x . ∙
	{
		token.T_75: "hexDigit",
	},
	// RepImpDecl0x : ∙ImportDecl RepImpDecl0x
	{
		token.T_78: "import",
	},
	// RepImpDecl0x : ImportDecl ∙RepImpDecl0x
	{
		token.T_78:  "import",
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepImpDecl0x : ImportDecl RepImpDecl0x ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepImpDecl0x : ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepInBodDecl0x : ∙IntfBdyDecl RepInBodDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
	},
	// RepInBodDecl0x : IntfBdyDecl ∙RepInBodDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// RepInBodDecl0x : IntfBdyDecl RepInBodDecl0x ∙
	{
		token.T_140: "}",
	},
	// RepInBodDecl0x : ∙
	{
		token.T_140: "}",
	},
	// RepLorD0x : ∙LorD RepLorD0x
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_100: "num",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepLorD0x : LorD ∙RepLorD0x
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_100: "num",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepLorD0x : LorD RepLorD0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepLorD0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepModif0 : ∙Modifier RepModif0
	{
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepModif0 : Modifier ∙RepModif0
	{
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// RepModif0 : Modifier RepModif0 ∙
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// RepModif0 : ∙
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// RepORXOR0x : ∙ORXOR RepORXOR0x
	{
		token.T_137: "|",
	},
	// RepORXOR0x : ORXOR ∙RepORXOR0x
	{
		token.T_137: "|",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepORXOR0x : ORXOR RepORXOR0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepORXOR0x : ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepORcAND0x : ∙OR_OR CondANDExpr RepORcAND0x
	{
		token.T_139: "||",
	},
	// RepORcAND0x : OR_OR ∙CondANDExpr RepORcAND0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepORcAND0x : OR_OR CondANDExpr ∙RepORcAND0x
	{
		token.T_139: "||",
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepORcAND0x : OR_OR CondANDExpr RepORcAND0x ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepORcAND0x : ∙
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepPfOp0x : ∙PostfixOp RepPfOp0x
	{
		token.T_12: "++",
		token.T_16: "--",
	},
	// RepPfOp0x : PostfixOp ∙RepPfOp0x
	{
		token.T_12:  "++",
		token.T_16:  "--",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepPfOp0x : PostfixOp RepPfOp0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepPfOp0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSDMUExpr0x : ∙SDM UnaryExpr RepSDMUExpr0x
	{
		token.T_2:  "%",
		token.T_9:  "*",
		token.T_19: "/",
	},
	// RepSDMUExpr0x : SDM ∙UnaryExpr RepSDMUExpr0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RepSDMUExpr0x : SDM UnaryExpr ∙RepSDMUExpr0x
	{
		token.T_2:   "%",
		token.T_9:   "*",
		token.T_19:  "/",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSDMUExpr0x : SDM UnaryExpr RepSDMUExpr0x ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSDMUExpr0x : ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSel0x : ∙Selector RepSel0x
	{
		token.T_18: ".",
		token.T_40: "[",
	},
	// RepSel0x : Selector ∙RepSel0x
	{
		token.T_18:  ".",
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSel0x : Selector RepSel0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSel0x : ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSemiModDecl0x : ∙SemiModDecl RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepSemiModDecl0x : SemiModDecl ∙RepSemiModDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
		token.EOF:   "$",
	},
	// RepSemiModDecl0x : SemiModDecl RepSemiModDecl0x ∙
	{
		token.EOF: "$",
	},
	// RepSemiModDecl0x : ∙
	{
		token.EOF: "$",
	},
	// RepSwBlkStmt0x : ∙SwitchBlockStmtGrp RepSwBlkStmt0x
	{
		token.T_54: "case",
		token.T_58: "default",
	},
	// RepSwBlkStmt0x : SwitchBlockStmtGrp ∙RepSwBlkStmt0x
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// RepSwBlkStmt0x : SwitchBlockStmtGrp RepSwBlkStmt0x ∙
	{
		token.T_140: "}",
	},
	// RepSwBlkStmt0x : ∙
	{
		token.T_140: "}",
	},
	// SDM : ∙STAR
	{
		token.T_9: "*",
	},
	// SDM : STAR ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SDM : ∙DIV
	{
		token.T_19: "/",
	},
	// SDM : DIV ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SDM : ∙MOD
	{
		token.T_2: "%",
	},
	// SDM : MOD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SEMI : ∙; WS
	{
		token.T_23: ";",
	},
	// SEMI : ; ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.EOF:   "$",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_78:  "import",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// SEMI : ; WS ∙
	{
		token.T_0:   "!",
		token.EOF:   "$",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_78:  "import",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// SL : ∙<< nEq WS
	{
		token.T_25: "<<",
	},
	// SL : << ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// SL : << nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SL : << nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SL_EQU : ∙<<= WS
	{
		token.T_26: "<<=",
	},
	// SL_EQU : <<= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SL_EQU : <<= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR : ∙>> notEqCar WS
	{
		token.T_32: ">>",
	},
	// SR : >> ∙notEqCar WS
	{
		token.T_92: "notEqCar",
	},
	// SR : >> notEqCar ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR : >> notEqCar WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR_EQU : ∙>>= WS
	{
		token.T_33: ">>=",
	},
	// SR_EQU : >>= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR_EQU : >>= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR : ∙* nEq WS
	{
		token.T_9: "*",
	},
	// STAR : * ∙nEq WS
	{
		token.T_87: "nEq",
	},
	// STAR : * nEq ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR : * nEq WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR_EQU : ∙*= WS
	{
		token.T_10: "*=",
	},
	// STAR_EQU : *= ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR_EQU : *= WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STATIC : ∙static notLorD
	{
		token.T_118: "static",
	},
	// STATIC : static ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// STATIC : static notLorD ∙
	{
		token.T_97:  "notKeyword",
		token.T_136: "{",
	},
	// SUPER : ∙super notLorD
	{
		token.T_120: "super",
	},
	// SUPER : super ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// SUPER : super notLorD ∙
	{
		token.T_7:  "(",
		token.T_18: ".",
	},
	// SWITCH : ∙switch notLorD
	{
		token.T_121: "switch",
	},
	// SWITCH : switch ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// SWITCH : switch notLorD ∙
	{
		token.T_7: "(",
	},
	// SYNCHRONIZED : ∙synchronized notLorD
	{
		token.T_122: "synchronized",
	},
	// SYNCHRONIZED : synchronized ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// SYNCHRONIZED : synchronized notLorD ∙
	{
		token.T_7: "(",
	},
	// Selector : ∙DOT ID OptArgs
	{
		token.T_18: ".",
	},
	// Selector : DOT ∙ID OptArgs
	{
		token.T_97: "notKeyword",
	},
	// Selector : DOT ID ∙OptArgs
	{
		token.T_7:   "(",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Selector : DOT ID OptArgs ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Selector : ∙DOT THIS
	{
		token.T_18: ".",
	},
	// Selector : DOT ∙THIS
	{
		token.T_123: "this",
	},
	// Selector : DOT THIS ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Selector : ∙DOT SUPER SuperSuffix
	{
		token.T_18: ".",
	},
	// Selector : DOT ∙SUPER SuperSuffix
	{
		token.T_120: "super",
	},
	// Selector : DOT SUPER ∙SuperSuffix
	{
		token.T_7:  "(",
		token.T_18: ".",
	},
	// Selector : DOT SUPER SuperSuffix ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Selector : ∙DOT NEW InnerCreator
	{
		token.T_18: ".",
	},
	// Selector : DOT ∙NEW InnerCreator
	{
		token.T_89: "new",
	},
	// Selector : DOT NEW ∙InnerCreator
	{
		token.T_97: "notKeyword",
	},
	// Selector : DOT NEW InnerCreator ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Selector : ∙DimExpr
	{
		token.T_40: "[",
	},
	// Selector : DimExpr ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SemiModDecl : ∙SEMI
	{
		token.T_23: ";",
	},
	// SemiModDecl : SEMI ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// SemiModDecl : ∙RepModif0 DeclAlts
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// SemiModDecl : RepModif0 ∙DeclAlts
	{
		token.T_37: "Cls",
		token.T_38: "Intf",
	},
	// SemiModDecl : RepModif0 DeclAlts ∙
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// ShiftAlts : ∙CarrotAlts AddExpr ShiftAlts
	{
		token.T_25: "<<",
		token.T_32: ">>",
		token.T_34: ">>>",
	},
	// ShiftAlts : CarrotAlts ∙AddExpr ShiftAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ShiftAlts : CarrotAlts AddExpr ∙ShiftAlts
	{
		token.T_25:  "<<",
		token.T_32:  ">>",
		token.T_34:  ">>>",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ShiftAlts : CarrotAlts AddExpr ShiftAlts ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ShiftAlts : ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ShiftExpr : ∙AddExpr ShiftAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ShiftExpr : AddExpr ∙ShiftAlts
	{
		token.T_25:  "<<",
		token.T_32:  ">>",
		token.T_34:  ">>>",
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ShiftExpr : AddExpr ShiftAlts ∙
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Stmt : ∙Block
	{
		token.T_136: "{",
	},
	// Stmt : Block ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙ASSERT Expr OptColExpr SEMI
	{
		token.T_47: "assert",
	},
	// Stmt : ASSERT ∙Expr OptColExpr SEMI
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : ASSERT Expr ∙OptColExpr SEMI
	{
		token.T_22: ":",
		token.T_23: ";",
	},
	// Stmt : ASSERT Expr OptColExpr ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : ASSERT Expr OptColExpr SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙IF ParExpr Stmt OptElse
	{
		token.T_76: "if",
	},
	// Stmt : IF ∙ParExpr Stmt OptElse
	{
		token.T_7: "(",
	},
	// Stmt : IF ParExpr ∙Stmt OptElse
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// Stmt : IF ParExpr Stmt ∙OptElse
	{
		token.T_64:  "else",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : IF ParExpr Stmt OptElse ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt
	{
		token.T_74: "for",
	},
	// Stmt : FOR ∙LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt
	{
		token.T_7: "(",
	},
	// Stmt : FOR LPAR ∙OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : FOR LPAR OptForInit ∙SEMI OptExpr SEMI OptForUpd RPAR Stmt
	{
		token.T_23: ";",
	},
	// Stmt : FOR LPAR OptForInit SEMI ∙OptExpr SEMI OptForUpd RPAR Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : FOR LPAR OptForInit SEMI OptExpr ∙SEMI OptForUpd RPAR Stmt
	{
		token.T_23: ";",
	},
	// Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI ∙OptForUpd RPAR Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd ∙RPAR Stmt
	{
		token.T_8: ")",
	},
	// Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR ∙Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// Stmt : FOR LPAR OptForInit SEMI OptExpr SEMI OptForUpd RPAR Stmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙WHILE ParExpr Stmt
	{
		token.T_133: "while",
	},
	// Stmt : WHILE ∙ParExpr Stmt
	{
		token.T_7: "(",
	},
	// Stmt : WHILE ParExpr ∙Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// Stmt : WHILE ParExpr Stmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙DO Stmt WHILE ParExpr SEMI
	{
		token.T_59: "do",
	},
	// Stmt : DO ∙Stmt WHILE ParExpr SEMI
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// Stmt : DO Stmt ∙WHILE ParExpr SEMI
	{
		token.T_133: "while",
	},
	// Stmt : DO Stmt WHILE ∙ParExpr SEMI
	{
		token.T_7: "(",
	},
	// Stmt : DO Stmt WHILE ParExpr ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : DO Stmt WHILE ParExpr SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙TRY Block CatchBlk
	{
		token.T_128: "try",
	},
	// Stmt : TRY ∙Block CatchBlk
	{
		token.T_136: "{",
	},
	// Stmt : TRY Block ∙CatchBlk
	{
		token.T_55: "catch",
		token.T_72: "finally",
	},
	// Stmt : TRY Block CatchBlk ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙SWITCH ParExpr LWING RepSwBlkStmt0x RWING
	{
		token.T_121: "switch",
	},
	// Stmt : SWITCH ∙ParExpr LWING RepSwBlkStmt0x RWING
	{
		token.T_7: "(",
	},
	// Stmt : SWITCH ParExpr ∙LWING RepSwBlkStmt0x RWING
	{
		token.T_136: "{",
	},
	// Stmt : SWITCH ParExpr LWING ∙RepSwBlkStmt0x RWING
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// Stmt : SWITCH ParExpr LWING RepSwBlkStmt0x ∙RWING
	{
		token.T_140: "}",
	},
	// Stmt : SWITCH ParExpr LWING RepSwBlkStmt0x RWING ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙SYNCHRONIZED ParExpr Block
	{
		token.T_122: "synchronized",
	},
	// Stmt : SYNCHRONIZED ∙ParExpr Block
	{
		token.T_7: "(",
	},
	// Stmt : SYNCHRONIZED ParExpr ∙Block
	{
		token.T_136: "{",
	},
	// Stmt : SYNCHRONIZED ParExpr Block ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙RETURN OptExpr SEMI
	{
		token.T_115: "return",
	},
	// Stmt : RETURN ∙OptExpr SEMI
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : RETURN OptExpr ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : RETURN OptExpr SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙THROW Expr SEMI
	{
		token.T_124: "throw",
	},
	// Stmt : THROW ∙Expr SEMI
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : THROW Expr ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : THROW Expr SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙BREAK OptID SEMI
	{
		token.T_51: "break",
	},
	// Stmt : BREAK ∙OptID SEMI
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// Stmt : BREAK OptID ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : BREAK OptID SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙CONTINUE OptID SEMI
	{
		token.T_57: "continue",
	},
	// Stmt : CONTINUE ∙OptID SEMI
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// Stmt : CONTINUE OptID ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : CONTINUE OptID SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙StmtExpr SEMI
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Stmt : StmtExpr ∙SEMI
	{
		token.T_23: ";",
	},
	// Stmt : StmtExpr SEMI ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Stmt : ∙ID COLON Stmt
	{
		token.T_97: "notKeyword",
	},
	// Stmt : ID ∙COLON Stmt
	{
		token.T_22: ":",
	},
	// Stmt : ID COLON ∙Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// Stmt : ID COLON Stmt ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// StmtExpr : ∙Expr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// StmtExpr : Expr ∙
	{
		token.T_8:  ")",
		token.T_14: ",",
		token.T_23: ";",
	},
	// StrClose : ∙dubQuo
	{
		token.T_62: "dubQuo",
	},
	// StrClose : dubQuo ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// StrClose : ∙OptEsc StrClose
	{
		token.T_46: "anyCarSl",
		token.T_63: "dubSlash",
	},
	// StrClose : OptEsc ∙StrClose
	{
		token.T_46: "anyCarSl",
		token.T_62: "dubQuo",
		token.T_63: "dubSlash",
	},
	// StrClose : OptEsc StrClose ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// StringLiteral : ∙dubQuo StrClose
	{
		token.T_62: "dubQuo",
	},
	// StringLiteral : dubQuo ∙StrClose
	{
		token.T_46: "anyCarSl",
		token.T_62: "dubQuo",
		token.T_63: "dubSlash",
	},
	// StringLiteral : dubQuo StrClose ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SuperSuffix : ∙Arguments
	{
		token.T_7: "(",
	},
	// SuperSuffix : Arguments ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SuperSuffix : ∙DOT ID OptArgs
	{
		token.T_18: ".",
	},
	// SuperSuffix : DOT ∙ID OptArgs
	{
		token.T_97: "notKeyword",
	},
	// SuperSuffix : DOT ID ∙OptArgs
	{
		token.T_7:   "(",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SuperSuffix : DOT ID OptArgs ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SwitchBlockStmtGrp : ∙SwitchLabel RepBlkSt0x
	{
		token.T_54: "case",
		token.T_58: "default",
	},
	// SwitchBlockStmtGrp : SwitchLabel ∙RepBlkSt0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// SwitchBlockStmtGrp : SwitchLabel RepBlkSt0x ∙
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// SwitchLabel : ∙CASE ConstExpr COLON
	{
		token.T_54: "case",
	},
	// SwitchLabel : CASE ∙ConstExpr COLON
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SwitchLabel : CASE ConstExpr ∙COLON
	{
		token.T_22: ":",
	},
	// SwitchLabel : CASE ConstExpr COLON ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// SwitchLabel : ∙DEFAULT COLON
	{
		token.T_58: "default",
	},
	// SwitchLabel : DEFAULT ∙COLON
	{
		token.T_22: ":",
	},
	// SwitchLabel : DEFAULT COLON ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// THIS : ∙this notLorD
	{
		token.T_123: "this",
	},
	// THIS : this ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// THIS : this notLorD ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// THROW : ∙throw notLorD
	{
		token.T_124: "throw",
	},
	// THROW : throw ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// THROW : throw notLorD ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// THROWS : ∙throws notLorD
	{
		token.T_125: "throws",
	},
	// THROWS : throws ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// THROWS : throws notLorD ∙
	{
		token.T_97: "notKeyword",
	},
	// TILDA : ∙~ WS
	{
		token.T_141: "~",
	},
	// TILDA : ~ ∙WS
	{
		token.T_49:  "block_comment",
		token.T_66:  "escCharSp",
		token.T_85:  "line_comment",
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// TILDA : ~ WS ∙
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// TRY : ∙try notLorD
	{
		token.T_128: "try",
	},
	// TRY : try ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// TRY : try notLorD ∙
	{
		token.T_136: "{",
	},
	// Type : ∙TypeAlts RepDim0x
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// Type : TypeAlts ∙RepDim0x
	{
		token.T_40:  "[",
		token.T_8:   ")",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// Type : TypeAlts RepDim0x ∙
	{
		token.T_8:   ")",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// TypeAlts : ∙BasicType
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_116: "short",
	},
	// TypeAlts : BasicType ∙
	{
		token.T_8:   ")",
		token.T_40:  "[",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// TypeAlts : ∙ClsType
	{
		token.T_97: "notKeyword",
	},
	// TypeAlts : ClsType ∙
	{
		token.T_8:   ")",
		token.T_40:  "[",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// UnaryExpr : ∙PrefixOp UnaryExpr
	{
		token.T_0:   "!",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_141: "~",
	},
	// UnaryExpr : PrefixOp ∙UnaryExpr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// UnaryExpr : PrefixOp UnaryExpr ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnaryExpr : ∙LPAR Type RPAR UnaryExpr
	{
		token.T_7: "(",
	},
	// UnaryExpr : LPAR ∙Type RPAR UnaryExpr
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// UnaryExpr : LPAR Type ∙RPAR UnaryExpr
	{
		token.T_8: ")",
	},
	// UnaryExpr : LPAR Type RPAR ∙UnaryExpr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// UnaryExpr : LPAR Type RPAR UnaryExpr ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnaryExpr : ∙Primary RepSel0x RepPfOp0x
	{
		token.T_7:   "(",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
	},
	// UnaryExpr : Primary ∙RepSel0x RepPfOp0x
	{
		token.T_12:  "++",
		token.T_16:  "--",
		token.T_18:  ".",
		token.T_40:  "[",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnaryExpr : Primary RepSel0x ∙RepPfOp0x
	{
		token.T_12:  "++",
		token.T_16:  "--",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnaryExpr : Primary RepSel0x RepPfOp0x ∙
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnicodeEscape : ∙u hexDigit hexDigit hexDigit hexDigit
	{
		token.T_130: "u",
	},
	// UnicodeEscape : u ∙hexDigit hexDigit hexDigit hexDigit
	{
		token.T_75: "hexDigit",
	},
	// UnicodeEscape : u hexDigit ∙hexDigit hexDigit hexDigit
	{
		token.T_75: "hexDigit",
	},
	// UnicodeEscape : u hexDigit hexDigit ∙hexDigit hexDigit
	{
		token.T_75: "hexDigit",
	},
	// UnicodeEscape : u hexDigit hexDigit hexDigit ∙hexDigit
	{
		token.T_75: "hexDigit",
	},
	// UnicodeEscape : u hexDigit hexDigit hexDigit hexDigit ∙
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// VOID : ∙void notLorD
	{
		token.T_131: "void",
	},
	// VOID : void ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// VOID : void notLorD ∙
	{
		token.T_18: ".",
		token.T_97: "notKeyword",
	},
	// VarDecl : ∙ID RepDim0x OptEqVarInit
	{
		token.T_97: "notKeyword",
	},
	// VarDecl : ID ∙RepDim0x OptEqVarInit
	{
		token.T_28:  "=",
		token.T_40:  "[",
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VarDecl : ID RepDim0x ∙OptEqVarInit
	{
		token.T_28:  "=",
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VarDecl : ID RepDim0x OptEqVarInit ∙
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VarDeclInit : ∙VarDecl RepComVDecl0x
	{
		token.T_97: "notKeyword",
	},
	// VarDeclInit : VarDecl ∙RepComVDecl0x
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// VarDeclInit : VarDecl RepComVDecl0x ∙
	{
		token.T_23: ";",
	},
	// VarDelID : ∙ID RepDim0x
	{
		token.T_97: "notKeyword",
	},
	// VarDelID : ID ∙RepDim0x
	{
		token.T_40: "[",
		token.T_8:  ")",
		token.T_14: ",",
	},
	// VarDelID : ID RepDim0x ∙
	{
		token.T_8:  ")",
		token.T_14: ",",
	},
	// VarInitial : ∙ArrayInitializer
	{
		token.T_136: "{",
	},
	// VarInitial : ArrayInitializer ∙
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VarInitial : ∙Expr
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// VarInitial : Expr ∙
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VoidIntfMethDeclRst : ∙FormalParams OptThrowClsTypLst SEMI
	{
		token.T_7: "(",
	},
	// VoidIntfMethDeclRst : FormalParams ∙OptThrowClsTypLst SEMI
	{
		token.T_23:  ";",
		token.T_125: "throws",
	},
	// VoidIntfMethDeclRst : FormalParams OptThrowClsTypLst ∙SEMI
	{
		token.T_23: ";",
	},
	// VoidIntfMethDeclRst : FormalParams OptThrowClsTypLst SEMI ∙
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// WHILE : ∙while notLorD
	{
		token.T_133: "while",
	},
	// WHILE : while ∙notLorD
	{
		token.T_98: "notLorD",
	},
	// WHILE : while notLorD ∙
	{
		token.T_7: "(",
	},
	// WS : ∙EscOrLineOrBlock
	{
		token.T_49: "block_comment",
		token.T_66: "escCharSp",
		token.T_85: "line_comment",
	},
	// WS : EscOrLineOrBlock ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// WS : ∙
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// XORExpr : ∙ANDExpr RepHatAND0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// XORExpr : ANDExpr ∙RepHatAND0x
	{
		token.T_42:  "^",
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// XORExpr : ANDExpr RepHatAND0x ∙
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
}

var followSets = []map[token.Type]string{
	// AND
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ANDExpr
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// AND_AND
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AND_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ASSERT
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// AddExpr
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Any0xX
	{
		token.T_112: "repHex0x",
		token.T_113: "repHex1x",
	},
	// Arguments
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayCreatorRest
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayInitializer
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ArrayRest
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// AssignOp
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BANG
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BREAK
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// BSR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BSR_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// BasicType
	{
		token.T_8:   ")",
		token.T_18:  ".",
		token.T_40:  "[",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// BasicTypeLit
	{
		token.T_98: "notLorD",
	},
	// Beoptfd
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Block
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// BlockStmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CASE
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// CATCH
	{
		token.T_7: "(",
	},
	// COLON
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// COMMA
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CONTINUE
	{
		token.T_23: ";",
		token.T_97: "notKeyword",
	},
	// CarrotAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Catch
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CatchBlk
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// CharLiteral
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Cls
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_98:  "notLorD",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsBdy
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ClsBdyDecl
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// ClsCreatorRest
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsDecl
	{
		token.T_0:   "!",
		token.EOF:   "$",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ClsType
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ClsTypeList
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// CompUnit
	{
		token.EOF: "$",
	},
	// CondANDExpr
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// CondExpr
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// CondORExpr
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// ConstDecl
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ConstDeclRest
	{
		token.T_14: ",",
		token.T_23: ";",
	},
	// ConstDeclsRest
	{
		token.T_23: ";",
	},
	// ConstExpr
	{
		token.T_22: ":",
	},
	// CreatedName
	{
		token.T_7: "(",
	},
	// Creator
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DEC
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// DEFAULT
	{
		token.T_22: ":",
	},
	// DIV
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DIV_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// DO
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// DOT
	{
		token.T_9:   "*",
		token.T_37:  "Cls",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_120: "super",
		token.T_123: "this",
	},
	// DecimalFloat
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DecimalNumeral
	{
		token.T_104: "optOneL",
	},
	// DeclAlts
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// Dim
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// DimExpr
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ELSE
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_141: "~",
	},
	// EQUAL
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ESInst
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EXTENDS
	{
		token.T_97: "notKeyword",
	},
	// EqAlts
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqCheck
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// EqShift
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EqualExpr
	{
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// EscOrLineOrBlock
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// EscSlash
	{
		token.T_117: "sinQuo",
	},
	// EscUp
	{
		token.T_117: "sinQuo",
	},
	// Escape
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Escs
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// Expr
	{
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// FINAL
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// FINALLY
	{
		token.T_136: "{",
	},
	// FOR
	{
		token.T_7: "(",
	},
	// Finally
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// FloatLiteral
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ForInit
	{
		token.T_23: ";",
	},
	// ForUpdate
	{
		token.T_8: ")",
	},
	// FormalParam
	{
		token.T_8: ")",
	},
	// FormalParamDecls
	{
		token.T_8: ")",
	},
	// FormalParamDeclsRest
	{
		token.T_8: ")",
	},
	// FormalParams
	{
		token.T_23:  ";",
		token.T_40:  "[",
		token.T_125: "throws",
		token.T_136: "{",
	},
	// GE
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// GT
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HAT_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// HexFloat
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// HexNumeral
	{
		token.T_18:  ".",
		token.T_48:  "binaryExponent",
		token.T_104: "optOneL",
	},
	// HexSignificand
	{
		token.T_48: "binaryExponent",
	},
	// ID
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IDSuffix
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IF
	{
		token.T_7: "(",
	},
	// IMPLEMENTS
	{
		token.T_97: "notKeyword",
	},
	// IMPORT
	{
		token.T_97:  "notKeyword",
		token.T_118: "static",
	},
	// INC
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// INSTANCEOF
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// IORExpr
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ImportDecl
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// InnerCreator
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// IntegerLiteral
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Intf
	{
		token.T_97: "notKeyword",
		token.T_98: "notLorD",
	},
	// IntfBdy
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// IntfBdyDecl
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfDecl
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// IntfMemDecl
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethDeclRest
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethFieldDecl
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// IntfMethFieldRest
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// LBRK
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_41:  "]",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LE
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LPAR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LT
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// LWING
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// Letter
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LetterLorD
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LitAlts
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Literal
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// LocalVarDeclStmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// LorD
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_100: "num",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// MINUS
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MINUS_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MOD_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// MemAlts
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// MemDecl
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// Modifier
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
	},
	// Modifs
	{
		token.T_98: "notLorD",
	},
	// MultExpr
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// NEW
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// NOT_EQUAL
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// NumeralAlts
	{
		token.T_104: "optOneL",
	},
	// OR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// ORXOR
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OR_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OR_OR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// OctalEscape
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// OptArgs
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptClsBdy
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptColExpr
	{
		token.T_23: ";",
	},
	// OptCom
	{
		token.T_140: "}",
	},
	// OptComFormPDecl
	{
		token.T_8: ")",
	},
	// OptDot
	{
		token.T_48: "binaryExponent",
	},
	// OptDotStar
	{
		token.T_23: ";",
	},
	// OptElse
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptEqVarInit
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// OptEsc
	{
		token.T_46: "anyCarSl",
		token.T_62: "dubQuo",
		token.T_63: "dubSlash",
	},
	// OptExpr
	{
		token.T_23: ";",
	},
	// OptExprs
	{
		token.T_8: ")",
	},
	// OptExtClsType
	{
		token.T_77:  "implements",
		token.T_136: "{",
	},
	// OptExtendsClsLis
	{
		token.T_136: "{",
	},
	// OptFin
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// OptFinType
	{
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// OptForInit
	{
		token.T_23: ";",
	},
	// OptForUpd
	{
		token.T_8: ")",
	},
	// OptFormPDecl
	{
		token.T_8: ")",
	},
	// OptID
	{
		token.T_23: ";",
	},
	// OptIDSuff
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// OptImpClsLst
	{
		token.T_136: "{",
	},
	// OptPackDecl
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// OptStatic
	{
		token.T_97:  "notKeyword",
		token.T_136: "{",
	},
	// OptThrowClsTypLst
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// OptVarInit
	{
		token.T_140: "}",
	},
	// OtherAlts
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// PACKAGE
	{
		token.T_97: "notKeyword",
	},
	// PLUS
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PLUS_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// PackDecl
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_78:  "import",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// ParExpr
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// PostfixOp
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// PrefixOp
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// Primary
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// QUERY
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// QualifiedID
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRK
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RBRKAlts
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RETURN
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// RPAR
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RWING
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// ReferenceType
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RelateExpr
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDEq0x
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepANDIOR0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepAddAltsMult0x
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepAsscExpr0x
	{
		token.T_8:   ")",
		token.T_14:  ",",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepBlkSt0x
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// RepCatch0x
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// RepClsBDecl0x
	{
		token.T_140: "}",
	},
	// RepComCls0x
	{
		token.T_23:  ";",
		token.T_136: "{",
	},
	// RepComCnstDecl0x
	{
		token.T_23: ";",
	},
	// RepComExp0x
	{
		token.T_8: ")",
	},
	// RepComInit0x
	{
		token.T_14:  ",",
		token.T_140: "}",
	},
	// RepComSExpr0x
	{
		token.T_8:  ")",
		token.T_23: ";",
	},
	// RepComVDecl0x
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// RepCondition0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepDig1xExp
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_69:  "fF_dD",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDig1xOptExp
	{
		token.T_69: "fF_dD",
	},
	// RepDim0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDimExpr0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepDotID0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepESInst0x
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepEqExpr0x
	{
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHatAND0x
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepHex0xDot
	{
		token.T_75: "hexDigit",
	},
	// RepImpDecl0x
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// RepInBodDecl0x
	{
		token.T_140: "}",
	},
	// RepLorD0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_77:  "implements",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepModif0
	{
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
		token.T_131: "void",
	},
	// RepORXOR0x
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepORcAND0x
	{
		token.T_3:   "%=",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_138: "|=",
		token.T_140: "}",
	},
	// RepPfOp0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSDMUExpr0x
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSel0x
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// RepSemiModDecl0x
	{
		token.EOF: "$",
	},
	// RepSwBlkStmt0x
	{
		token.T_140: "}",
	},
	// SDM
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SEMI
	{
		token.T_0:   "!",
		token.EOF:   "$",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_78:  "import",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// SL
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SL_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// SR_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STAR_EQU
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// STATIC
	{
		token.T_97:  "notKeyword",
		token.T_136: "{",
	},
	// SUPER
	{
		token.T_7:  "(",
		token.T_18: ".",
	},
	// SWITCH
	{
		token.T_7: "(",
	},
	// SYNCHRONIZED
	{
		token.T_7: "(",
	},
	// Selector
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SemiModDecl
	{
		token.EOF:   "$",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_71:  "final",
		token.T_88:  "native",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_132: "volatile",
	},
	// ShiftAlts
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// ShiftExpr
	{
		token.T_1:   "!=",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// Stmt
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// StmtExpr
	{
		token.T_8:  ")",
		token.T_14: ",",
		token.T_23: ";",
	},
	// StrClose
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// StringLiteral
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_66:  "escCharSp",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SuperSuffix
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// SwitchBlockStmtGrp
	{
		token.T_54:  "case",
		token.T_58:  "default",
		token.T_140: "}",
	},
	// SwitchLabel
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_39:  "X",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_140: "}",
		token.T_141: "~",
	},
	// THIS
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// THROW
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// THROWS
	{
		token.T_97: "notKeyword",
	},
	// TILDA
	{
		token.T_0:   "!",
		token.T_7:   "(",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_21:  "0",
		token.T_39:  "X",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_70:  "false",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_111: "repDig1x",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_120: "super",
		token.T_123: "this",
		token.T_127: "true",
		token.T_131: "void",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_141: "~",
	},
	// TRY
	{
		token.T_136: "{",
	},
	// Type
	{
		token.T_8:   ")",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// TypeAlts
	{
		token.T_8:   ")",
		token.T_40:  "[",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_97:  "notKeyword",
		token.T_116: "short",
	},
	// UnaryExpr
	{
		token.T_1:   "!=",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_17:  "-=",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
	// UnicodeEscape
	{
		token.T_46:  "anyCarSl",
		token.T_62:  "dubQuo",
		token.T_63:  "dubSlash",
		token.T_117: "sinQuo",
	},
	// VOID
	{
		token.T_18: ".",
		token.T_97: "notKeyword",
	},
	// VarDecl
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VarDeclInit
	{
		token.T_23: ";",
	},
	// VarDelID
	{
		token.T_8:  ")",
		token.T_14: ",",
	},
	// VarInitial
	{
		token.T_14:  ",",
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_140: "}",
	},
	// VoidIntfMethDeclRst
	{
		token.T_23:  ";",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_140: "}",
	},
	// WHILE
	{
		token.T_7: "(",
	},
	// WS
	{
		token.T_0:   "!",
		token.T_1:   "!=",
		token.EOF:   "$",
		token.T_2:   "%",
		token.T_3:   "%=",
		token.T_4:   "&",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_7:   "(",
		token.T_8:   ")",
		token.T_9:   "*",
		token.T_10:  "*=",
		token.T_11:  "+",
		token.T_12:  "++",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_15:  "-",
		token.T_16:  "--",
		token.T_17:  "-=",
		token.T_18:  ".",
		token.T_19:  "/",
		token.T_20:  "/=",
		token.T_21:  "0",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_24:  "<",
		token.T_25:  "<<",
		token.T_26:  "<<=",
		token.T_27:  "<=",
		token.T_28:  "=",
		token.T_29:  "==",
		token.T_30:  ">",
		token.T_31:  ">=",
		token.T_32:  ">>",
		token.T_33:  ">>=",
		token.T_34:  ">>>",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_39:  "X",
		token.T_40:  "[",
		token.T_41:  "]",
		token.T_42:  "^",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_47:  "assert",
		token.T_49:  "block_comment",
		token.T_50:  "boolean",
		token.T_51:  "break",
		token.T_52:  "byte",
		token.T_54:  "case",
		token.T_55:  "catch",
		token.T_56:  "char",
		token.T_57:  "continue",
		token.T_58:  "default",
		token.T_59:  "do",
		token.T_60:  "dot",
		token.T_61:  "double",
		token.T_62:  "dubQuo",
		token.T_64:  "else",
		token.T_66:  "escCharSp",
		token.T_68:  "extends",
		token.T_70:  "false",
		token.T_71:  "final",
		token.T_72:  "finally",
		token.T_73:  "float",
		token.T_74:  "for",
		token.T_76:  "if",
		token.T_77:  "implements",
		token.T_78:  "import",
		token.T_79:  "instanceof",
		token.T_80:  "int",
		token.T_84:  "let",
		token.T_85:  "line_comment",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_89:  "new",
		token.T_97:  "notKeyword",
		token.T_99:  "null",
		token.T_100: "num",
		token.T_101: "octalNumeral",
		token.T_102: "onenine",
		token.T_106: "package",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_111: "repDig1x",
		token.T_115: "return",
		token.T_116: "short",
		token.T_117: "sinQuo",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_120: "super",
		token.T_121: "switch",
		token.T_122: "synchronized",
		token.T_123: "this",
		token.T_124: "throw",
		token.T_125: "throws",
		token.T_126: "transient",
		token.T_127: "true",
		token.T_128: "try",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_133: "while",
		token.T_134: "x",
		token.T_135: "ze",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
		token.T_141: "~",
	},
	// XORExpr
	{
		token.T_3:   "%=",
		token.T_5:   "&&",
		token.T_6:   "&=",
		token.T_8:   ")",
		token.T_10:  "*=",
		token.T_13:  "+=",
		token.T_14:  ",",
		token.T_17:  "-=",
		token.T_20:  "/=",
		token.T_22:  ":",
		token.T_23:  ";",
		token.T_26:  "<<=",
		token.T_28:  "=",
		token.T_33:  ">>=",
		token.T_35:  ">>>=",
		token.T_36:  "?",
		token.T_37:  "Cls",
		token.T_38:  "Intf",
		token.T_41:  "]",
		token.T_43:  "^=",
		token.T_44:  "abstract",
		token.T_50:  "boolean",
		token.T_52:  "byte",
		token.T_56:  "char",
		token.T_61:  "double",
		token.T_71:  "final",
		token.T_73:  "float",
		token.T_80:  "int",
		token.T_86:  "long",
		token.T_88:  "native",
		token.T_97:  "notKeyword",
		token.T_107: "private",
		token.T_108: "protected",
		token.T_109: "public",
		token.T_116: "short",
		token.T_118: "static",
		token.T_119: "strictfp",
		token.T_122: "synchronized",
		token.T_126: "transient",
		token.T_131: "void",
		token.T_132: "volatile",
		token.T_136: "{",
		token.T_137: "|",
		token.T_138: "|=",
		token.T_139: "||",
		token.T_140: "}",
	},
}

/*** Errors ***/

/*
Error is returned by Parse at every point at which the parser fails to parse
a grammar production. For non-LL-1 grammars there will be an error for each
alternate attempted by the parser.

The errors are sorted in descending order of input position (index of token in
the stream of tokens).

Normally the error of interest is the one that has parsed the largest number of
tokens.
*/
type Error struct {
	// Index of token that caused the error.
	cI int

	// Grammar slot at which the error occured.
	Slot slot.Label

	// The token at which the error occurred.
	Token *token.Token

	// The line and column in the input text at which the error occurred
	Line, Column int

	// The tokens expected at the point where the error occurred
	Expected map[token.Type]string
}

func (pe *Error) String() string {
	w := new(bytes.Buffer)
	fmt.Fprintf(w, "Parse Error: %s I[%d]=%s at line %d col %d\n",
		pe.Slot, pe.cI, pe.Token, pe.Line, pe.Column)
	exp := []string{}
	for _, e := range pe.Expected {
		exp = append(exp, e)
	}
	fmt.Fprintf(w, "Expected one of: [%s]", strings.Join(exp, ","))
	return w.String()
}

func (p *parser) parseError(slot slot.Label, i int, expected map[token.Type]string) {
	pe := &Error{cI: i, Slot: slot, Token: p.lex.Tokens[i], Expected: expected}
	p.parseErrors = append(p.parseErrors, pe)
}

func (p *parser) sortParseErrors() {
	sort.Slice(p.parseErrors,
		func(i, j int) bool {
			return p.parseErrors[j].Token.Lext() < p.parseErrors[i].Token.Lext()
		})
	for _, pe := range p.parseErrors {
		pe.Line, pe.Column = p.lex.GetLineColumn(pe.Token.Lext())
	}
}
