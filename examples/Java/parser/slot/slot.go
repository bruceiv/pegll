
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"Java/parser/symbols"
)

type Label int

const(
	EscOrLineOrBlock0R0 Label = iota
	EscOrLineOrBlock0R1
	EscOrLineOrBlock1R0
	EscOrLineOrBlock1R1
	EscOrLineOrBlock2R0
	EscOrLineOrBlock2R1
	WS0R0
	WS0R1
	WS1R0
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	EscOrLineOrBlock0R0: {
		symbols.NT_EscOrLineOrBlock, 0, 0, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		EscOrLineOrBlock0R0, 
	},
	EscOrLineOrBlock0R1: {
		symbols.NT_EscOrLineOrBlock, 0, 1, 
		symbols.Symbols{  
			symbols.T_2,
		}, 
		EscOrLineOrBlock0R1, 
	},
	EscOrLineOrBlock1R0: {
		symbols.NT_EscOrLineOrBlock, 1, 0, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		EscOrLineOrBlock1R0, 
	},
	EscOrLineOrBlock1R1: {
		symbols.NT_EscOrLineOrBlock, 1, 1, 
		symbols.Symbols{  
			symbols.T_0,
		}, 
		EscOrLineOrBlock1R1, 
	},
	EscOrLineOrBlock2R0: {
		symbols.NT_EscOrLineOrBlock, 2, 0, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		EscOrLineOrBlock2R0, 
	},
	EscOrLineOrBlock2R1: {
		symbols.NT_EscOrLineOrBlock, 2, 1, 
		symbols.Symbols{  
			symbols.T_1,
		}, 
		EscOrLineOrBlock2R1, 
	},
	WS0R0: {
		symbols.NT_WS, 0, 0, 
		symbols.Symbols{  
			symbols.NT_EscOrLineOrBlock,
		}, 
		WS0R0, 
	},
	WS0R1: {
		symbols.NT_WS, 0, 1, 
		symbols.Symbols{  
			symbols.NT_EscOrLineOrBlock,
		}, 
		WS0R1, 
	},
	WS1R0: {
		symbols.NT_WS, 1, 0, 
		symbols.Symbols{ 
		}, 
		WS1R0, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_EscOrLineOrBlock,0,0 }: EscOrLineOrBlock0R0,
	Index{ symbols.NT_EscOrLineOrBlock,0,1 }: EscOrLineOrBlock0R1,
	Index{ symbols.NT_EscOrLineOrBlock,1,0 }: EscOrLineOrBlock1R0,
	Index{ symbols.NT_EscOrLineOrBlock,1,1 }: EscOrLineOrBlock1R1,
	Index{ symbols.NT_EscOrLineOrBlock,2,0 }: EscOrLineOrBlock2R0,
	Index{ symbols.NT_EscOrLineOrBlock,2,1 }: EscOrLineOrBlock2R1,
	Index{ symbols.NT_WS,0,0 }: WS0R0,
	Index{ symbols.NT_WS,0,1 }: WS0R1,
	Index{ symbols.NT_WS,1,0 }: WS1R0,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_WS:[]Label{ WS0R0,WS1R0 },
	symbols.NT_EscOrLineOrBlock:[]Label{ EscOrLineOrBlock0R0,EscOrLineOrBlock1R0,EscOrLineOrBlock2R0 },
}

