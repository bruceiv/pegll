
// Package token is generated by GoGLL. Do not edit
package token

import(
    "fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
    typ        Type
    lext, rext int
    input      []rune
}

/*
New returns a new token.
lext is the left extent and rext the right extent of the token in the input.
input is the input slice scanned by the lexer.
*/
func New(t Type, lext, rext int, input []rune) *Token {
    return &Token{
        typ:   t,
        lext:  lext,
        rext:  rext,
        input: input,
    }
}

// GetLineColumn returns the line and column of the left extent of t
func (t *Token) GetLineColumn() (line, col int) {
    line, col = 1, 1
    for j := 0; j < t.lext; j++ {
        switch t.input[j] {
        case '\n':
            line++
            col = 1
        case '\t':
            col += 4
        default:
            col++
        }
    }
    return
}

// GetInput returns the input from which t was parsed.
func (t *Token) GetInput() []rune {
    return t.input
}

// Lext returns the left extent of t
func (t *Token) Lext() int {
    return t.lext
}

// Literal returs the literal runes of t scanned by the lexer
func (t *Token) Literal() []rune {
    return t.input[t.lext:t.rext]
}

// LiteralString returns string(t.Literal())
func (t *Token) LiteralString() string {
    return string(t.Literal())
}

// Rext returns the right extent of t in the input
func (t *Token) Rext() int {
    return t.rext
}

func (t *Token) String() string {
    return fmt.Sprintf("%s (%d,%d) %s",
        t.TypeID(), t.lext, t.rext, t.LiteralString())
}

// Suppress returns true iff t is suppressed by the lexer
func (t *Token) Suppress() bool {
	return Suppress[t.typ]
}

// Type returns the token Type of t
func (t *Token) Type() Type {
    return t.typ
}

// TypeID returns the token Type ID of t. 
// This may be different from the literal of token t.
func (t *Token) TypeID() string {
    return t.Type().ID()
}

// Type is the token type
type Type int

func (t Type) String() string {
    return TypeToString[t]
}

// ID returns the token type ID of token Type t
func (t Type) ID() string {
    return TypeToID[t]
}


const(
    Error  Type = iota  // Error 
    EOF  // $ 
    T_0  // ! 
    T_1  // != 
    T_2  // % 
    T_3  // %= 
    T_4  // & 
    T_5  // && 
    T_6  // &= 
    T_7  // ( 
    T_8  // ) 
    T_9  // * 
    T_10  // *= 
    T_11  // + 
    T_12  // ++ 
    T_13  // += 
    T_14  // , 
    T_15  // - 
    T_16  // -- 
    T_17  // -= 
    T_18  // . 
    T_19  // / 
    T_20  // /= 
    T_21  // 0 
    T_22  // : 
    T_23  // ; 
    T_24  // < 
    T_25  // << 
    T_26  // <<= 
    T_27  // <= 
    T_28  // = 
    T_29  // == 
    T_30  // > 
    T_31  // >= 
    T_32  // >> 
    T_33  // >>= 
    T_34  // >>> 
    T_35  // >>>= 
    T_36  // ? 
    T_37  // Cls 
    T_38  // Intf 
    T_39  // X 
    T_40  // [ 
    T_41  // ] 
    T_42  // ^ 
    T_43  // ^= 
    T_44  // abstract 
    T_45  // any4567 
    T_46  // anyCarSl 
    T_47  // assert 
    T_48  // binaryExponent 
    T_49  // block_comment 
    T_50  // boolean 
    T_51  // break 
    T_52  // byte 
    T_53  // carrot 
    T_54  // case 
    T_55  // catch 
    T_56  // char 
    T_57  // continue 
    T_58  // default 
    T_59  // do 
    T_60  // dot 
    T_61  // double 
    T_62  // dubQuo 
    T_63  // dubSlash 
    T_64  // else 
    T_65  // esc 
    T_66  // escCharSp 
    T_67  // exponent 
    T_68  // extends 
    T_69  // fF_dD 
    T_70  // false 
    T_71  // final 
    T_72  // finally 
    T_73  // float 
    T_74  // for 
    T_75  // hexDigit 
    T_76  // if 
    T_77  // implements 
    T_78  // import 
    T_79  // instanceof 
    T_80  // int 
    T_81  // int03 
    T_82  // int03Two07 
    T_83  // int07 
    T_84  // let 
    T_85  // line_comment 
    T_86  // long 
    T_87  // nEq 
    T_88  // native 
    T_89  // new 
    T_90  // newline 
    T_91  // notEqAnd 
    T_92  // notEqCar 
    T_93  // notEqCar2 
    T_94  // notEqPipe 
    T_95  // notEqPlus 
    T_96  // notEqSlDash 
    T_97  // notKeyword 
    T_98  // notLorD 
    T_99  // null 
    T_100  // num 
    T_101  // octalNumeral 
    T_102  // onenine 
    T_103  // optExpo 
    T_104  // optOneL 
    T_105  // optfFdD 
    T_106  // package 
    T_107  // private 
    T_108  // protected 
    T_109  // public 
    T_110  // repDig0x 
    T_111  // repDig1x 
    T_112  // repHex0x 
    T_113  // repHex1x 
    T_114  // repNumx0 
    T_115  // return 
    T_116  // short 
    T_117  // sinQuo 
    T_118  // static 
    T_119  // strictfp 
    T_120  // super 
    T_121  // switch 
    T_122  // synchronized 
    T_123  // this 
    T_124  // throw 
    T_125  // throws 
    T_126  // transient 
    T_127  // true 
    T_128  // try 
    T_129  // two07 
    T_130  // u 
    T_131  // void 
    T_132  // volatile 
    T_133  // while 
    T_134  // x 
    T_135  // ze 
    T_136  // { 
    T_137  // | 
    T_138  // |= 
    T_139  // || 
    T_140  // } 
    T_141  // ~ 
)

var TypeToString = []string{ 
    "Error",
    "EOF",
    "T_0",
    "T_1",
    "T_2",
    "T_3",
    "T_4",
    "T_5",
    "T_6",
    "T_7",
    "T_8",
    "T_9",
    "T_10",
    "T_11",
    "T_12",
    "T_13",
    "T_14",
    "T_15",
    "T_16",
    "T_17",
    "T_18",
    "T_19",
    "T_20",
    "T_21",
    "T_22",
    "T_23",
    "T_24",
    "T_25",
    "T_26",
    "T_27",
    "T_28",
    "T_29",
    "T_30",
    "T_31",
    "T_32",
    "T_33",
    "T_34",
    "T_35",
    "T_36",
    "T_37",
    "T_38",
    "T_39",
    "T_40",
    "T_41",
    "T_42",
    "T_43",
    "T_44",
    "T_45",
    "T_46",
    "T_47",
    "T_48",
    "T_49",
    "T_50",
    "T_51",
    "T_52",
    "T_53",
    "T_54",
    "T_55",
    "T_56",
    "T_57",
    "T_58",
    "T_59",
    "T_60",
    "T_61",
    "T_62",
    "T_63",
    "T_64",
    "T_65",
    "T_66",
    "T_67",
    "T_68",
    "T_69",
    "T_70",
    "T_71",
    "T_72",
    "T_73",
    "T_74",
    "T_75",
    "T_76",
    "T_77",
    "T_78",
    "T_79",
    "T_80",
    "T_81",
    "T_82",
    "T_83",
    "T_84",
    "T_85",
    "T_86",
    "T_87",
    "T_88",
    "T_89",
    "T_90",
    "T_91",
    "T_92",
    "T_93",
    "T_94",
    "T_95",
    "T_96",
    "T_97",
    "T_98",
    "T_99",
    "T_100",
    "T_101",
    "T_102",
    "T_103",
    "T_104",
    "T_105",
    "T_106",
    "T_107",
    "T_108",
    "T_109",
    "T_110",
    "T_111",
    "T_112",
    "T_113",
    "T_114",
    "T_115",
    "T_116",
    "T_117",
    "T_118",
    "T_119",
    "T_120",
    "T_121",
    "T_122",
    "T_123",
    "T_124",
    "T_125",
    "T_126",
    "T_127",
    "T_128",
    "T_129",
    "T_130",
    "T_131",
    "T_132",
    "T_133",
    "T_134",
    "T_135",
    "T_136",
    "T_137",
    "T_138",
    "T_139",
    "T_140",
    "T_141",
}

var StringToType = map[string] Type { 
    "Error" : Error, 
    "EOF" : EOF, 
    "T_0" : T_0, 
    "T_1" : T_1, 
    "T_2" : T_2, 
    "T_3" : T_3, 
    "T_4" : T_4, 
    "T_5" : T_5, 
    "T_6" : T_6, 
    "T_7" : T_7, 
    "T_8" : T_8, 
    "T_9" : T_9, 
    "T_10" : T_10, 
    "T_11" : T_11, 
    "T_12" : T_12, 
    "T_13" : T_13, 
    "T_14" : T_14, 
    "T_15" : T_15, 
    "T_16" : T_16, 
    "T_17" : T_17, 
    "T_18" : T_18, 
    "T_19" : T_19, 
    "T_20" : T_20, 
    "T_21" : T_21, 
    "T_22" : T_22, 
    "T_23" : T_23, 
    "T_24" : T_24, 
    "T_25" : T_25, 
    "T_26" : T_26, 
    "T_27" : T_27, 
    "T_28" : T_28, 
    "T_29" : T_29, 
    "T_30" : T_30, 
    "T_31" : T_31, 
    "T_32" : T_32, 
    "T_33" : T_33, 
    "T_34" : T_34, 
    "T_35" : T_35, 
    "T_36" : T_36, 
    "T_37" : T_37, 
    "T_38" : T_38, 
    "T_39" : T_39, 
    "T_40" : T_40, 
    "T_41" : T_41, 
    "T_42" : T_42, 
    "T_43" : T_43, 
    "T_44" : T_44, 
    "T_45" : T_45, 
    "T_46" : T_46, 
    "T_47" : T_47, 
    "T_48" : T_48, 
    "T_49" : T_49, 
    "T_50" : T_50, 
    "T_51" : T_51, 
    "T_52" : T_52, 
    "T_53" : T_53, 
    "T_54" : T_54, 
    "T_55" : T_55, 
    "T_56" : T_56, 
    "T_57" : T_57, 
    "T_58" : T_58, 
    "T_59" : T_59, 
    "T_60" : T_60, 
    "T_61" : T_61, 
    "T_62" : T_62, 
    "T_63" : T_63, 
    "T_64" : T_64, 
    "T_65" : T_65, 
    "T_66" : T_66, 
    "T_67" : T_67, 
    "T_68" : T_68, 
    "T_69" : T_69, 
    "T_70" : T_70, 
    "T_71" : T_71, 
    "T_72" : T_72, 
    "T_73" : T_73, 
    "T_74" : T_74, 
    "T_75" : T_75, 
    "T_76" : T_76, 
    "T_77" : T_77, 
    "T_78" : T_78, 
    "T_79" : T_79, 
    "T_80" : T_80, 
    "T_81" : T_81, 
    "T_82" : T_82, 
    "T_83" : T_83, 
    "T_84" : T_84, 
    "T_85" : T_85, 
    "T_86" : T_86, 
    "T_87" : T_87, 
    "T_88" : T_88, 
    "T_89" : T_89, 
    "T_90" : T_90, 
    "T_91" : T_91, 
    "T_92" : T_92, 
    "T_93" : T_93, 
    "T_94" : T_94, 
    "T_95" : T_95, 
    "T_96" : T_96, 
    "T_97" : T_97, 
    "T_98" : T_98, 
    "T_99" : T_99, 
    "T_100" : T_100, 
    "T_101" : T_101, 
    "T_102" : T_102, 
    "T_103" : T_103, 
    "T_104" : T_104, 
    "T_105" : T_105, 
    "T_106" : T_106, 
    "T_107" : T_107, 
    "T_108" : T_108, 
    "T_109" : T_109, 
    "T_110" : T_110, 
    "T_111" : T_111, 
    "T_112" : T_112, 
    "T_113" : T_113, 
    "T_114" : T_114, 
    "T_115" : T_115, 
    "T_116" : T_116, 
    "T_117" : T_117, 
    "T_118" : T_118, 
    "T_119" : T_119, 
    "T_120" : T_120, 
    "T_121" : T_121, 
    "T_122" : T_122, 
    "T_123" : T_123, 
    "T_124" : T_124, 
    "T_125" : T_125, 
    "T_126" : T_126, 
    "T_127" : T_127, 
    "T_128" : T_128, 
    "T_129" : T_129, 
    "T_130" : T_130, 
    "T_131" : T_131, 
    "T_132" : T_132, 
    "T_133" : T_133, 
    "T_134" : T_134, 
    "T_135" : T_135, 
    "T_136" : T_136, 
    "T_137" : T_137, 
    "T_138" : T_138, 
    "T_139" : T_139, 
    "T_140" : T_140, 
    "T_141" : T_141, 
}

var TypeToID = []string { 
    "Error", 
    "$", 
    "!", 
    "!=", 
    "%", 
    "%=", 
    "&", 
    "&&", 
    "&=", 
    "(", 
    ")", 
    "*", 
    "*=", 
    "+", 
    "++", 
    "+=", 
    ",", 
    "-", 
    "--", 
    "-=", 
    ".", 
    "/", 
    "/=", 
    "0", 
    ":", 
    ";", 
    "<", 
    "<<", 
    "<<=", 
    "<=", 
    "=", 
    "==", 
    ">", 
    ">=", 
    ">>", 
    ">>=", 
    ">>>", 
    ">>>=", 
    "?", 
    "Cls", 
    "Intf", 
    "X", 
    "[", 
    "]", 
    "^", 
    "^=", 
    "abstract", 
    "any4567", 
    "anyCarSl", 
    "assert", 
    "binaryExponent", 
    "block_comment", 
    "boolean", 
    "break", 
    "byte", 
    "carrot", 
    "case", 
    "catch", 
    "char", 
    "continue", 
    "default", 
    "do", 
    "dot", 
    "double", 
    "dubQuo", 
    "dubSlash", 
    "else", 
    "esc", 
    "escCharSp", 
    "exponent", 
    "extends", 
    "fF_dD", 
    "false", 
    "final", 
    "finally", 
    "float", 
    "for", 
    "hexDigit", 
    "if", 
    "implements", 
    "import", 
    "instanceof", 
    "int", 
    "int03", 
    "int03Two07", 
    "int07", 
    "let", 
    "line_comment", 
    "long", 
    "nEq", 
    "native", 
    "new", 
    "newline", 
    "notEqAnd", 
    "notEqCar", 
    "notEqCar2", 
    "notEqPipe", 
    "notEqPlus", 
    "notEqSlDash", 
    "notKeyword", 
    "notLorD", 
    "null", 
    "num", 
    "octalNumeral", 
    "onenine", 
    "optExpo", 
    "optOneL", 
    "optfFdD", 
    "package", 
    "private", 
    "protected", 
    "public", 
    "repDig0x", 
    "repDig1x", 
    "repHex0x", 
    "repHex1x", 
    "repNumx0", 
    "return", 
    "short", 
    "sinQuo", 
    "static", 
    "strictfp", 
    "super", 
    "switch", 
    "synchronized", 
    "this", 
    "throw", 
    "throws", 
    "transient", 
    "true", 
    "try", 
    "two07", 
    "u", 
    "void", 
    "volatile", 
    "while", 
    "x", 
    "ze", 
    "{", 
    "|", 
    "|=", 
    "||", 
    "}", 
    "~", 
}

var Suppress = []bool { 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    true, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    true, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
}

