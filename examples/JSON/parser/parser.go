// Package parser is generated by gogll. Do not edit.
package parser

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"JSON/lexer"
	"JSON/parser/bsr"
	"JSON/parser/slot"
	"JSON/parser/symbols"
	"JSON/token"
)

type parser struct {
	cI int

	R *descriptors
	U *descriptors

	popped   map[poppedNode]bool
	crf      map[clusterNode][]*crfNode
	crfNodes map[crfNode]*crfNode

	lex         *lexer.Lexer
	parseErrors []*Error

	bsrSet *bsr.Set
}

func newParser(l *lexer.Lexer) *parser {
	return &parser{
		cI:     0,
		lex:    l,
		R:      &descriptors{},
		U:      &descriptors{},
		popped: make(map[poppedNode]bool),
		crf: map[clusterNode][]*crfNode{
			{symbols.NT_JSON, 0}: {},
		},
		crfNodes:    map[crfNode]*crfNode{},
		bsrSet:      bsr.New(symbols.NT_JSON, l),
		parseErrors: nil,
	}
}

// Parse returns the BSR set containing the parse forest.
// If the parse was successfull []*Error is nil
func Parse(l *lexer.Lexer) (*bsr.Set, []*Error) {
	return newParser(l).parse()
}

func (p *parser) parse() (*bsr.Set, []*Error) {
	var L slot.Label
	m, cU := len(p.lex.Tokens)-1, 0
	p.ntAdd(symbols.NT_JSON, 0)
	// p.DumpDescriptors()
	for !p.R.empty() {
		L, cU, p.cI = p.R.remove()

		// fmt.Println()
		// fmt.Printf("L:%s, cI:%d, I[p.cI]:%s, cU:%d\n", L, p.cI, p.lex.Tokens[p.cI], cU)
		// p.DumpDescriptors()

		switch L {
		case slot.Array0R0: // Array : ∙LBRACKET OptElem RBRACKET

			p.call(slot.Array0R1, cU, p.cI)
		case slot.Array0R1: // Array : LBRACKET ∙OptElem RBRACKET

			if !p.testSelect(slot.Array0R1) {
				p.parseError(slot.Array0R1, p.cI, first[slot.Array0R1])
				break
			}

			p.call(slot.Array0R2, cU, p.cI)
		case slot.Array0R2: // Array : LBRACKET OptElem ∙RBRACKET

			if !p.testSelect(slot.Array0R2) {
				p.parseError(slot.Array0R2, p.cI, first[slot.Array0R2])
				break
			}

			p.call(slot.Array0R3, cU, p.cI)
		case slot.Array0R3: // Array : LBRACKET OptElem RBRACKET ∙

			p.rtn(symbols.NT_Array, cU, p.cI)
		case slot.COLON0R0: // COLON : ∙: WS

			p.bsrSet.Add(slot.COLON0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.COLON0R1) {
				p.parseError(slot.COLON0R1, p.cI, first[slot.COLON0R1])
				break
			}

			p.call(slot.COLON0R2, cU, p.cI)
		case slot.COLON0R2: // COLON : : WS ∙

			p.rtn(symbols.NT_COLON, cU, p.cI)
		case slot.COMMA0R0: // COMMA : ∙, WS

			p.bsrSet.Add(slot.COMMA0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.COMMA0R1) {
				p.parseError(slot.COMMA0R1, p.cI, first[slot.COMMA0R1])
				break
			}

			p.call(slot.COMMA0R2, cU, p.cI)
		case slot.COMMA0R2: // COMMA : , WS ∙

			p.rtn(symbols.NT_COMMA, cU, p.cI)
		case slot.ComPair0R0: // ComPair : ∙COMMA Pair

			p.call(slot.ComPair0R1, cU, p.cI)
		case slot.ComPair0R1: // ComPair : COMMA ∙Pair

			if !p.testSelect(slot.ComPair0R1) {
				p.parseError(slot.ComPair0R1, p.cI, first[slot.ComPair0R1])
				break
			}

			p.call(slot.ComPair0R2, cU, p.cI)
		case slot.ComPair0R2: // ComPair : COMMA Pair ∙

			p.rtn(symbols.NT_ComPair, cU, p.cI)
		case slot.ComVal0R0: // ComVal : ∙COMMA Value

			p.call(slot.ComVal0R1, cU, p.cI)
		case slot.ComVal0R1: // ComVal : COMMA ∙Value

			if !p.testSelect(slot.ComVal0R1) {
				p.parseError(slot.ComVal0R1, p.cI, first[slot.ComVal0R1])
				break
			}

			p.call(slot.ComVal0R2, cU, p.cI)
		case slot.ComVal0R2: // ComVal : COMMA Value ∙

			p.rtn(symbols.NT_ComVal, cU, p.cI)
		case slot.EXP0R0: // EXP : ∙eE OptPM repNum1x

			p.bsrSet.Add(slot.EXP0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.EXP0R1) {
				p.parseError(slot.EXP0R1, p.cI, first[slot.EXP0R1])
				break
			}

			p.call(slot.EXP0R2, cU, p.cI)
		case slot.EXP0R2: // EXP : eE OptPM ∙repNum1x

			if !p.testSelect(slot.EXP0R2) {
				p.parseError(slot.EXP0R2, p.cI, first[slot.EXP0R2])
				break
			}

			p.bsrSet.Add(slot.EXP0R3, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_EXP, cU, p.cI)
		case slot.Elements0R0: // Elements : ∙Value RepComVal0x

			p.call(slot.Elements0R1, cU, p.cI)
		case slot.Elements0R1: // Elements : Value ∙RepComVal0x

			if !p.testSelect(slot.Elements0R1) {
				p.parseError(slot.Elements0R1, p.cI, first[slot.Elements0R1])
				break
			}

			p.call(slot.Elements0R2, cU, p.cI)
		case slot.Elements0R2: // Elements : Value RepComVal0x ∙

			p.rtn(symbols.NT_Elements, cU, p.cI)
		case slot.EscOrComment0R0: // EscOrComment : ∙escCharSpace

			p.bsrSet.Add(slot.EscOrComment0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_EscOrComment, cU, p.cI)
		case slot.EscOrComment1R0: // EscOrComment : ∙line_comment

			p.bsrSet.Add(slot.EscOrComment1R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_EscOrComment, cU, p.cI)
		case slot.EscOrComment2R0: // EscOrComment : ∙block_comment

			p.bsrSet.Add(slot.EscOrComment2R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_EscOrComment, cU, p.cI)
		case slot.EscOrComment3R0: // EscOrComment : ∙
			p.bsrSet.AddEmpty(slot.EscOrComment3R0, p.cI)

			p.rtn(symbols.NT_EscOrComment, cU, p.cI)
		case slot.FALSE0R0: // FALSE : ∙false WS

			p.bsrSet.Add(slot.FALSE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FALSE0R1) {
				p.parseError(slot.FALSE0R1, p.cI, first[slot.FALSE0R1])
				break
			}

			p.call(slot.FALSE0R2, cU, p.cI)
		case slot.FALSE0R2: // FALSE : false WS ∙

			p.rtn(symbols.NT_FALSE, cU, p.cI)
		case slot.FRAC0R0: // FRAC : ∙. repNum1x

			p.bsrSet.Add(slot.FRAC0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.FRAC0R1) {
				p.parseError(slot.FRAC0R1, p.cI, first[slot.FRAC0R1])
				break
			}

			p.bsrSet.Add(slot.FRAC0R2, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_FRAC, cU, p.cI)
		case slot.INT0R0: // INT : ∙OptNeg Integers

			p.call(slot.INT0R1, cU, p.cI)
		case slot.INT0R1: // INT : OptNeg ∙Integers

			if !p.testSelect(slot.INT0R1) {
				p.parseError(slot.INT0R1, p.cI, first[slot.INT0R1])
				break
			}

			p.call(slot.INT0R2, cU, p.cI)
		case slot.INT0R2: // INT : OptNeg Integers ∙

			p.rtn(symbols.NT_INT, cU, p.cI)
		case slot.Integers0R0: // Integers : ∙nonZero

			p.bsrSet.Add(slot.Integers0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_Integers, cU, p.cI)
		case slot.Integers1R0: // Integers : ∙0

			p.bsrSet.Add(slot.Integers1R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_Integers, cU, p.cI)
		case slot.JSON0R0: // JSON : ∙WS Object

			p.call(slot.JSON0R1, cU, p.cI)
		case slot.JSON0R1: // JSON : WS ∙Object

			if !p.testSelect(slot.JSON0R1) {
				p.parseError(slot.JSON0R1, p.cI, first[slot.JSON0R1])
				break
			}

			p.call(slot.JSON0R2, cU, p.cI)
		case slot.JSON0R2: // JSON : WS Object ∙

			p.rtn(symbols.NT_JSON, cU, p.cI)
		case slot.LBRACE0R0: // LBRACE : ∙{ WS

			p.bsrSet.Add(slot.LBRACE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LBRACE0R1) {
				p.parseError(slot.LBRACE0R1, p.cI, first[slot.LBRACE0R1])
				break
			}

			p.call(slot.LBRACE0R2, cU, p.cI)
		case slot.LBRACE0R2: // LBRACE : { WS ∙

			p.rtn(symbols.NT_LBRACE, cU, p.cI)
		case slot.LBRACKET0R0: // LBRACKET : ∙[ WS

			p.bsrSet.Add(slot.LBRACKET0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.LBRACKET0R1) {
				p.parseError(slot.LBRACKET0R1, p.cI, first[slot.LBRACKET0R1])
				break
			}

			p.call(slot.LBRACKET0R2, cU, p.cI)
		case slot.LBRACKET0R2: // LBRACKET : [ WS ∙

			p.rtn(symbols.NT_LBRACKET, cU, p.cI)
		case slot.Members0R0: // Members : ∙Pair RepComPair0x

			p.call(slot.Members0R1, cU, p.cI)
		case slot.Members0R1: // Members : Pair ∙RepComPair0x

			if !p.testSelect(slot.Members0R1) {
				p.parseError(slot.Members0R1, p.cI, first[slot.Members0R1])
				break
			}

			p.call(slot.Members0R2, cU, p.cI)
		case slot.Members0R2: // Members : Pair RepComPair0x ∙

			p.rtn(symbols.NT_Members, cU, p.cI)
		case slot.NUL0R0: // NUL : ∙null WS

			p.bsrSet.Add(slot.NUL0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.NUL0R1) {
				p.parseError(slot.NUL0R1, p.cI, first[slot.NUL0R1])
				break
			}

			p.call(slot.NUL0R2, cU, p.cI)
		case slot.NUL0R2: // NUL : null WS ∙

			p.rtn(symbols.NT_NUL, cU, p.cI)
		case slot.Number0R0: // Number : ∙INT OptFrac OptExp WS

			p.call(slot.Number0R1, cU, p.cI)
		case slot.Number0R1: // Number : INT ∙OptFrac OptExp WS

			if !p.testSelect(slot.Number0R1) {
				p.parseError(slot.Number0R1, p.cI, first[slot.Number0R1])
				break
			}

			p.call(slot.Number0R2, cU, p.cI)
		case slot.Number0R2: // Number : INT OptFrac ∙OptExp WS

			if !p.testSelect(slot.Number0R2) {
				p.parseError(slot.Number0R2, p.cI, first[slot.Number0R2])
				break
			}

			p.call(slot.Number0R3, cU, p.cI)
		case slot.Number0R3: // Number : INT OptFrac OptExp ∙WS

			if !p.testSelect(slot.Number0R3) {
				p.parseError(slot.Number0R3, p.cI, first[slot.Number0R3])
				break
			}

			p.call(slot.Number0R4, cU, p.cI)
		case slot.Number0R4: // Number : INT OptFrac OptExp WS ∙

			p.rtn(symbols.NT_Number, cU, p.cI)
		case slot.Object0R0: // Object : ∙LBRACE OptMems RBRACE

			p.call(slot.Object0R1, cU, p.cI)
		case slot.Object0R1: // Object : LBRACE ∙OptMems RBRACE

			if !p.testSelect(slot.Object0R1) {
				p.parseError(slot.Object0R1, p.cI, first[slot.Object0R1])
				break
			}

			p.call(slot.Object0R2, cU, p.cI)
		case slot.Object0R2: // Object : LBRACE OptMems ∙RBRACE

			if !p.testSelect(slot.Object0R2) {
				p.parseError(slot.Object0R2, p.cI, first[slot.Object0R2])
				break
			}

			p.call(slot.Object0R3, cU, p.cI)
		case slot.Object0R3: // Object : LBRACE OptMems RBRACE ∙

			p.rtn(symbols.NT_Object, cU, p.cI)
		case slot.OptElem0R0: // OptElem : ∙Elements

			p.call(slot.OptElem0R1, cU, p.cI)
		case slot.OptElem0R1: // OptElem : Elements ∙

			p.rtn(symbols.NT_OptElem, cU, p.cI)
		case slot.OptElem1R0: // OptElem : ∙
			p.bsrSet.AddEmpty(slot.OptElem1R0, p.cI)

			p.rtn(symbols.NT_OptElem, cU, p.cI)
		case slot.OptExp0R0: // OptExp : ∙EXP

			p.call(slot.OptExp0R1, cU, p.cI)
		case slot.OptExp0R1: // OptExp : EXP ∙

			p.rtn(symbols.NT_OptExp, cU, p.cI)
		case slot.OptExp1R0: // OptExp : ∙
			p.bsrSet.AddEmpty(slot.OptExp1R0, p.cI)

			p.rtn(symbols.NT_OptExp, cU, p.cI)
		case slot.OptFrac0R0: // OptFrac : ∙FRAC

			p.call(slot.OptFrac0R1, cU, p.cI)
		case slot.OptFrac0R1: // OptFrac : FRAC ∙

			p.rtn(symbols.NT_OptFrac, cU, p.cI)
		case slot.OptFrac1R0: // OptFrac : ∙
			p.bsrSet.AddEmpty(slot.OptFrac1R0, p.cI)

			p.rtn(symbols.NT_OptFrac, cU, p.cI)
		case slot.OptMems0R0: // OptMems : ∙Members

			p.call(slot.OptMems0R1, cU, p.cI)
		case slot.OptMems0R1: // OptMems : Members ∙

			p.rtn(symbols.NT_OptMems, cU, p.cI)
		case slot.OptMems1R0: // OptMems : ∙
			p.bsrSet.AddEmpty(slot.OptMems1R0, p.cI)

			p.rtn(symbols.NT_OptMems, cU, p.cI)
		case slot.OptNeg0R0: // OptNeg : ∙-

			p.bsrSet.Add(slot.OptNeg0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_OptNeg, cU, p.cI)
		case slot.OptNeg1R0: // OptNeg : ∙
			p.bsrSet.AddEmpty(slot.OptNeg1R0, p.cI)

			p.rtn(symbols.NT_OptNeg, cU, p.cI)
		case slot.OptPM0R0: // OptPM : ∙PlusORMinus

			p.call(slot.OptPM0R1, cU, p.cI)
		case slot.OptPM0R1: // OptPM : PlusORMinus ∙

			p.rtn(symbols.NT_OptPM, cU, p.cI)
		case slot.OptPM1R0: // OptPM : ∙
			p.bsrSet.AddEmpty(slot.OptPM1R0, p.cI)

			p.rtn(symbols.NT_OptPM, cU, p.cI)
		case slot.Pair0R0: // Pair : ∙String COLON Value

			p.call(slot.Pair0R1, cU, p.cI)
		case slot.Pair0R1: // Pair : String ∙COLON Value

			if !p.testSelect(slot.Pair0R1) {
				p.parseError(slot.Pair0R1, p.cI, first[slot.Pair0R1])
				break
			}

			p.call(slot.Pair0R2, cU, p.cI)
		case slot.Pair0R2: // Pair : String COLON ∙Value

			if !p.testSelect(slot.Pair0R2) {
				p.parseError(slot.Pair0R2, p.cI, first[slot.Pair0R2])
				break
			}

			p.call(slot.Pair0R3, cU, p.cI)
		case slot.Pair0R3: // Pair : String COLON Value ∙

			p.rtn(symbols.NT_Pair, cU, p.cI)
		case slot.PlusORMinus0R0: // PlusORMinus : ∙+

			p.bsrSet.Add(slot.PlusORMinus0R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_PlusORMinus, cU, p.cI)
		case slot.PlusORMinus1R0: // PlusORMinus : ∙-

			p.bsrSet.Add(slot.PlusORMinus1R1, cU, p.cI, p.cI+1)
			p.cI++
			p.rtn(symbols.NT_PlusORMinus, cU, p.cI)
		case slot.RBRACE0R0: // RBRACE : ∙} WS

			p.bsrSet.Add(slot.RBRACE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RBRACE0R1) {
				p.parseError(slot.RBRACE0R1, p.cI, first[slot.RBRACE0R1])
				break
			}

			p.call(slot.RBRACE0R2, cU, p.cI)
		case slot.RBRACE0R2: // RBRACE : } WS ∙

			p.rtn(symbols.NT_RBRACE, cU, p.cI)
		case slot.RBRACKET0R0: // RBRACKET : ∙] WS

			p.bsrSet.Add(slot.RBRACKET0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.RBRACKET0R1) {
				p.parseError(slot.RBRACKET0R1, p.cI, first[slot.RBRACKET0R1])
				break
			}

			p.call(slot.RBRACKET0R2, cU, p.cI)
		case slot.RBRACKET0R2: // RBRACKET : ] WS ∙

			p.rtn(symbols.NT_RBRACKET, cU, p.cI)
		case slot.RepComPair0x0R0: // RepComPair0x : ∙ComPair RepComPair0x

			p.call(slot.RepComPair0x0R1, cU, p.cI)
		case slot.RepComPair0x0R1: // RepComPair0x : ComPair ∙RepComPair0x

			if !p.testSelect(slot.RepComPair0x0R1) {
				p.parseError(slot.RepComPair0x0R1, p.cI, first[slot.RepComPair0x0R1])
				break
			}

			p.call(slot.RepComPair0x0R2, cU, p.cI)
		case slot.RepComPair0x0R2: // RepComPair0x : ComPair RepComPair0x ∙

			p.rtn(symbols.NT_RepComPair0x, cU, p.cI)
		case slot.RepComPair0x1R0: // RepComPair0x : ∙
			p.bsrSet.AddEmpty(slot.RepComPair0x1R0, p.cI)

			p.rtn(symbols.NT_RepComPair0x, cU, p.cI)
		case slot.RepComVal0x0R0: // RepComVal0x : ∙ComVal RepComVal0x

			p.call(slot.RepComVal0x0R1, cU, p.cI)
		case slot.RepComVal0x0R1: // RepComVal0x : ComVal ∙RepComVal0x

			if !p.testSelect(slot.RepComVal0x0R1) {
				p.parseError(slot.RepComVal0x0R1, p.cI, first[slot.RepComVal0x0R1])
				break
			}

			p.call(slot.RepComVal0x0R2, cU, p.cI)
		case slot.RepComVal0x0R2: // RepComVal0x : ComVal RepComVal0x ∙

			p.rtn(symbols.NT_RepComVal0x, cU, p.cI)
		case slot.RepComVal0x1R0: // RepComVal0x : ∙
			p.bsrSet.AddEmpty(slot.RepComVal0x1R0, p.cI)

			p.rtn(symbols.NT_RepComVal0x, cU, p.cI)
		case slot.String0R0: // String : ∙string_ns WS

			p.bsrSet.Add(slot.String0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.String0R1) {
				p.parseError(slot.String0R1, p.cI, first[slot.String0R1])
				break
			}

			p.call(slot.String0R2, cU, p.cI)
		case slot.String0R2: // String : string_ns WS ∙

			p.rtn(symbols.NT_String, cU, p.cI)
		case slot.TRUE0R0: // TRUE : ∙true WS

			p.bsrSet.Add(slot.TRUE0R1, cU, p.cI, p.cI+1)
			p.cI++
			if !p.testSelect(slot.TRUE0R1) {
				p.parseError(slot.TRUE0R1, p.cI, first[slot.TRUE0R1])
				break
			}

			p.call(slot.TRUE0R2, cU, p.cI)
		case slot.TRUE0R2: // TRUE : true WS ∙

			p.rtn(symbols.NT_TRUE, cU, p.cI)
		case slot.Value0R0: // Value : ∙String

			p.call(slot.Value0R1, cU, p.cI)
		case slot.Value0R1: // Value : String ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value1R0: // Value : ∙Number

			p.call(slot.Value1R1, cU, p.cI)
		case slot.Value1R1: // Value : Number ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value2R0: // Value : ∙Object

			p.call(slot.Value2R1, cU, p.cI)
		case slot.Value2R1: // Value : Object ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value3R0: // Value : ∙Array

			p.call(slot.Value3R1, cU, p.cI)
		case slot.Value3R1: // Value : Array ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value4R0: // Value : ∙TRUE

			p.call(slot.Value4R1, cU, p.cI)
		case slot.Value4R1: // Value : TRUE ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value5R0: // Value : ∙FALSE

			p.call(slot.Value5R1, cU, p.cI)
		case slot.Value5R1: // Value : FALSE ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.Value6R0: // Value : ∙NUL

			p.call(slot.Value6R1, cU, p.cI)
		case slot.Value6R1: // Value : NUL ∙

			p.rtn(symbols.NT_Value, cU, p.cI)
		case slot.WS0R0: // WS : ∙EscOrComment WS

			p.call(slot.WS0R1, cU, p.cI)
		case slot.WS0R1: // WS : EscOrComment ∙WS

			if !p.testSelect(slot.WS0R1) {
				p.parseError(slot.WS0R1, p.cI, first[slot.WS0R1])
				break
			}

			p.call(slot.WS0R2, cU, p.cI)
		case slot.WS0R2: // WS : EscOrComment WS ∙

			p.rtn(symbols.NT_WS, cU, p.cI)
		case slot.WS1R0: // WS : ∙
			p.bsrSet.AddEmpty(slot.WS1R0, p.cI)

			p.rtn(symbols.NT_WS, cU, p.cI)

		default:
			panic("This must not happen")
		}
	}
	if !p.bsrSet.Contain(symbols.NT_JSON, 0, m) {
		p.sortParseErrors()
		return nil, p.parseErrors
	}
	return p.bsrSet, nil
}

func (p *parser) ntAdd(nt symbols.NT, j int) {
	// fmt.Printf("p.ntAdd(%s, %d)\n", nt, j)
	failed := true
	expected := map[token.Type]string{}
	for _, l := range slot.GetAlternates(nt) {
		if p.testSelect(l) {
			p.dscAdd(l, j, j)
			failed = false
		} else {
			for k, v := range first[l] {
				expected[k] = v
			}
		}
	}
	if failed {
		for _, l := range slot.GetAlternates(nt) {
			p.parseError(l, j, expected)
		}
	}
}

/*** Call Return Forest ***/

type poppedNode struct {
	X    symbols.NT
	k, j int
}

type clusterNode struct {
	X symbols.NT
	k int
}

type crfNode struct {
	L slot.Label
	i int
}

/*
suppose that L is Y ::=αX ·β
if there is no CRF node labelled (L,i)
	create one let u be the CRF node labelled (L,i)
if there is no CRF node labelled (X, j) {
	create a CRF node v labelled (X, j)
	create an edge from v to u
	ntAdd(X, j)
} else {
	let v be the CRF node labelled (X, j)
	if there is not an edge from v to u {
		create an edge from v to u
		for all ((X, j,h)∈P) {
			dscAdd(L, i, h);
			bsrAdd(L, i, j, h)
		}
	}
}
*/
func (p *parser) call(L slot.Label, i, j int) {
	// fmt.Printf("p.call(%s,%d,%d)\n", L,i,j)
	u, exist := p.crfNodes[crfNode{L, i}]
	// fmt.Printf("  u exist=%t\n", exist)
	if !exist {
		u = &crfNode{L, i}
		p.crfNodes[*u] = u
	}
	X := L.Symbols()[L.Pos()-1].(symbols.NT)
	ndV := clusterNode{X, j}
	v, exist := p.crf[ndV]
	if !exist {
		// fmt.Println("  v !exist")
		p.crf[ndV] = []*crfNode{u}
		p.ntAdd(X, j)
	} else {
		// fmt.Println("  v exist")
		if !existEdge(v, u) {
			// fmt.Printf("  !existEdge(%v)\n", u)
			p.crf[ndV] = append(v, u)
			// fmt.Printf("|popped|=%d\n", len(popped))
			for pnd := range p.popped {
				if pnd.X == X && pnd.k == j {
					p.dscAdd(L, i, pnd.j)
					p.bsrSet.Add(L, i, j, pnd.j)
				}
			}
		}
	}
}

func existEdge(nds []*crfNode, nd *crfNode) bool {
	for _, nd1 := range nds {
		if nd1 == nd {
			return true
		}
	}
	return false
}

func (p *parser) rtn(X symbols.NT, k, j int) {
	// fmt.Printf("p.rtn(%s,%d,%d)\n", X,k,j)
	pn := poppedNode{X, k, j}
	if _, exist := p.popped[pn]; !exist {
		p.popped[pn] = true
		for _, nd := range p.crf[clusterNode{X, k}] {
			p.dscAdd(nd.L, nd.i, j)
			p.bsrSet.Add(nd.L, nd.i, k, j)
		}
	}
}

// func CRFString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("CRF: {")
// 	for cn, nds := range crf{
// 		for _, nd := range nds {
// 			fmt.Fprintf(buf, "%s->%s, ", cn, nd)
// 		}
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

func (cn clusterNode) String() string {
	return fmt.Sprintf("(%s,%d)", cn.X, cn.k)
}

func (n crfNode) String() string {
	return fmt.Sprintf("(%s,%d)", n.L.String(), n.i)
}

// func PoppedString() string {
// 	buf := new(bytes.Buffer)
// 	buf.WriteString("Popped: {")
// 	for p, _ := range popped {
// 		fmt.Fprintf(buf, "(%s,%d,%d) ", p.X, p.k, p.j)
// 	}
// 	buf.WriteString("}")
// 	return buf.String()
// }

/*** descriptors ***/

type descriptors struct {
	set []*descriptor
}

func (ds *descriptors) contain(d *descriptor) bool {
	for _, d1 := range ds.set {
		if d1 == d {
			return true
		}
	}
	return false
}

func (ds *descriptors) empty() bool {
	return len(ds.set) == 0
}

func (ds *descriptors) String() string {
	buf := new(bytes.Buffer)
	buf.WriteString("{")
	for i, d := range ds.set {
		if i > 0 {
			buf.WriteString("; ")
		}
		fmt.Fprintf(buf, "%s", d)
	}
	buf.WriteString("}")
	return buf.String()
}

type descriptor struct {
	L slot.Label
	k int
	i int
}

func (d *descriptor) String() string {
	return fmt.Sprintf("%s,%d,%d", d.L, d.k, d.i)
}

func (p *parser) dscAdd(L slot.Label, k, i int) {
	// fmt.Printf("p.dscAdd(%s,%d,%d)\n", L, k, i)
	d := &descriptor{L, k, i}
	if !p.U.contain(d) {
		p.R.set = append(p.R.set, d)
		p.U.set = append(p.U.set, d)
	}
}

func (ds *descriptors) remove() (L slot.Label, k, i int) {
	d := ds.set[len(ds.set)-1]
	ds.set = ds.set[:len(ds.set)-1]
	// fmt.Printf("remove: %s,%d,%d\n", d.L, d.k, d.i)
	return d.L, d.k, d.i
}

func (p *parser) DumpDescriptors() {
	p.DumpR()
	p.DumpU()
}

func (p *parser) DumpR() {
	fmt.Println("R:")
	for _, d := range p.R.set {
		fmt.Printf(" %s\n", d)
	}
}

func (p *parser) DumpU() {
	fmt.Println("U:")
	for _, d := range p.U.set {
		fmt.Printf(" %s\n", d)
	}
}

/*** TestSelect ***/

func (p *parser) follow(nt symbols.NT) bool {
	_, exist := followSets[nt][p.lex.Tokens[p.cI].Type()]
	return exist
}

func (p *parser) testSelect(l slot.Label) bool {
	return l.IsNullable() || l.FirstContains(p.lex.Tokens[p.cI].Type())
	// _, exist := first[l][p.lex.Tokens[p.cI].Type()]
	// return exist
}

var first = []map[token.Type]string{
	// Array : ∙LBRACKET OptElem RBRACKET
	{
		token.T_6: "[",
	},
	// Array : LBRACKET ∙OptElem RBRACKET
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// Array : LBRACKET OptElem ∙RBRACKET
	{
		token.T_7: "]",
	},
	// Array : LBRACKET OptElem RBRACKET ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// COLON : ∙: WS
	{
		token.T_5: ":",
	},
	// COLON : : ∙WS
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// COLON : : WS ∙
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// COMMA : ∙, WS
	{
		token.T_1: ",",
	},
	// COMMA : , ∙WS
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// COMMA : , WS ∙
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// ComPair : ∙COMMA Pair
	{
		token.T_1: ",",
	},
	// ComPair : COMMA ∙Pair
	{
		token.T_17: "string_ns",
	},
	// ComPair : COMMA Pair ∙
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// ComVal : ∙COMMA Value
	{
		token.T_1: ",",
	},
	// ComVal : COMMA ∙Value
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// ComVal : COMMA Value ∙
	{
		token.T_1: ",",
		token.T_7: "]",
	},
	// EXP : ∙eE OptPM repNum1x
	{
		token.T_9: "eE",
	},
	// EXP : eE ∙OptPM repNum1x
	{
		token.T_0:  "+",
		token.T_2:  "-",
		token.T_16: "repNum1x",
	},
	// EXP : eE OptPM ∙repNum1x
	{
		token.T_16: "repNum1x",
	},
	// EXP : eE OptPM repNum1x ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Elements : ∙Value RepComVal0x
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// Elements : Value ∙RepComVal0x
	{
		token.T_1: ",",
		token.T_7: "]",
	},
	// Elements : Value RepComVal0x ∙
	{
		token.T_7: "]",
	},
	// EscOrComment : ∙escCharSpace
	{
		token.T_10: "escCharSpace",
	},
	// EscOrComment : escCharSpace ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// EscOrComment : ∙line_comment
	{
		token.T_13: "line_comment",
	},
	// EscOrComment : line_comment ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// EscOrComment : ∙block_comment
	{
		token.T_8: "block_comment",
	},
	// EscOrComment : block_comment ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// EscOrComment : ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// FALSE : ∙false WS
	{
		token.T_11: "false",
	},
	// FALSE : false ∙WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// FALSE : false WS ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// FRAC : ∙. repNum1x
	{
		token.T_3: ".",
	},
	// FRAC : . ∙repNum1x
	{
		token.T_16: "repNum1x",
	},
	// FRAC : . repNum1x ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// INT : ∙OptNeg Integers
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// INT : OptNeg ∙Integers
	{
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// INT : OptNeg Integers ∙
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Integers : ∙nonZero
	{
		token.T_14: "nonZero",
	},
	// Integers : nonZero ∙
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Integers : ∙0
	{
		token.T_4: "0",
	},
	// Integers : 0 ∙
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// JSON : ∙WS Object
	{
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_19: "{",
	},
	// JSON : WS ∙Object
	{
		token.T_19: "{",
	},
	// JSON : WS Object ∙
	{
		token.EOF: "$",
	},
	// LBRACE : ∙{ WS
	{
		token.T_19: "{",
	},
	// LBRACE : { ∙WS
	{
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_17: "string_ns",
		token.T_20: "}",
	},
	// LBRACE : { WS ∙
	{
		token.T_17: "string_ns",
		token.T_20: "}",
	},
	// LBRACKET : ∙[ WS
	{
		token.T_6: "[",
	},
	// LBRACKET : [ ∙WS
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// LBRACKET : [ WS ∙
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// Members : ∙Pair RepComPair0x
	{
		token.T_17: "string_ns",
	},
	// Members : Pair ∙RepComPair0x
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// Members : Pair RepComPair0x ∙
	{
		token.T_20: "}",
	},
	// NUL : ∙null WS
	{
		token.T_15: "null",
	},
	// NUL : null ∙WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// NUL : null WS ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Number : ∙INT OptFrac OptExp WS
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// Number : INT ∙OptFrac OptExp WS
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Number : INT OptFrac ∙OptExp WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Number : INT OptFrac OptExp ∙WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Number : INT OptFrac OptExp WS ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Object : ∙LBRACE OptMems RBRACE
	{
		token.T_19: "{",
	},
	// Object : LBRACE ∙OptMems RBRACE
	{
		token.T_17: "string_ns",
		token.T_20: "}",
	},
	// Object : LBRACE OptMems ∙RBRACE
	{
		token.T_20: "}",
	},
	// Object : LBRACE OptMems RBRACE ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// OptElem : ∙Elements
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// OptElem : Elements ∙
	{
		token.T_7: "]",
	},
	// OptElem : ∙
	{
		token.T_7: "]",
	},
	// OptExp : ∙EXP
	{
		token.T_9: "eE",
	},
	// OptExp : EXP ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptExp : ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptFrac : ∙FRAC
	{
		token.T_3: ".",
	},
	// OptFrac : FRAC ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptFrac : ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptMems : ∙Members
	{
		token.T_17: "string_ns",
	},
	// OptMems : Members ∙
	{
		token.T_20: "}",
	},
	// OptMems : ∙
	{
		token.T_20: "}",
	},
	// OptNeg : ∙-
	{
		token.T_2: "-",
	},
	// OptNeg : - ∙
	{
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// OptNeg : ∙
	{
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// OptPM : ∙PlusORMinus
	{
		token.T_0: "+",
		token.T_2: "-",
	},
	// OptPM : PlusORMinus ∙
	{
		token.T_16: "repNum1x",
	},
	// OptPM : ∙
	{
		token.T_16: "repNum1x",
	},
	// Pair : ∙String COLON Value
	{
		token.T_17: "string_ns",
	},
	// Pair : String ∙COLON Value
	{
		token.T_5: ":",
	},
	// Pair : String COLON ∙Value
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// Pair : String COLON Value ∙
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// PlusORMinus : ∙+
	{
		token.T_0: "+",
	},
	// PlusORMinus : + ∙
	{
		token.T_16: "repNum1x",
	},
	// PlusORMinus : ∙-
	{
		token.T_2: "-",
	},
	// PlusORMinus : - ∙
	{
		token.T_16: "repNum1x",
	},
	// RBRACE : ∙} WS
	{
		token.T_20: "}",
	},
	// RBRACE : } ∙WS
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// RBRACE : } WS ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// RBRACKET : ∙] WS
	{
		token.T_7: "]",
	},
	// RBRACKET : ] ∙WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// RBRACKET : ] WS ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// RepComPair0x : ∙ComPair RepComPair0x
	{
		token.T_1: ",",
	},
	// RepComPair0x : ComPair ∙RepComPair0x
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// RepComPair0x : ComPair RepComPair0x ∙
	{
		token.T_20: "}",
	},
	// RepComPair0x : ∙
	{
		token.T_20: "}",
	},
	// RepComVal0x : ∙ComVal RepComVal0x
	{
		token.T_1: ",",
	},
	// RepComVal0x : ComVal ∙RepComVal0x
	{
		token.T_1: ",",
		token.T_7: "]",
	},
	// RepComVal0x : ComVal RepComVal0x ∙
	{
		token.T_7: "]",
	},
	// RepComVal0x : ∙
	{
		token.T_7: "]",
	},
	// String : ∙string_ns WS
	{
		token.T_17: "string_ns",
	},
	// String : string_ns ∙WS
	{
		token.T_1:  ",",
		token.T_5:  ":",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// String : string_ns WS ∙
	{
		token.T_1:  ",",
		token.T_5:  ":",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// TRUE : ∙true WS
	{
		token.T_18: "true",
	},
	// TRUE : true ∙WS
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// TRUE : true WS ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙String
	{
		token.T_17: "string_ns",
	},
	// Value : String ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙Number
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// Value : Number ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙Object
	{
		token.T_19: "{",
	},
	// Value : Object ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙Array
	{
		token.T_6: "[",
	},
	// Value : Array ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙TRUE
	{
		token.T_18: "true",
	},
	// Value : TRUE ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙FALSE
	{
		token.T_11: "false",
	},
	// Value : FALSE ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value : ∙NUL
	{
		token.T_15: "null",
	},
	// Value : NUL ∙
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// WS : ∙EscOrComment WS
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// WS : EscOrComment ∙WS
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// WS : EscOrComment WS ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// WS : ∙
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
}

var followSets = []map[token.Type]string{
	// Array
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// COLON
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// COMMA
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// ComPair
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// ComVal
	{
		token.T_1: ",",
		token.T_7: "]",
	},
	// EXP
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Elements
	{
		token.T_7: "]",
	},
	// EscOrComment
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_11: "false",
		token.T_13: "line_comment",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
	// FALSE
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// FRAC
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// INT
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// Integers
	{
		token.T_1:  ",",
		token.T_3:  ".",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// JSON
	{
		token.EOF: "$",
	},
	// LBRACE
	{
		token.T_17: "string_ns",
		token.T_20: "}",
	},
	// LBRACKET
	{
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
	},
	// Members
	{
		token.T_20: "}",
	},
	// NUL
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Number
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Object
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// OptElem
	{
		token.T_7: "]",
	},
	// OptExp
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptFrac
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_8:  "block_comment",
		token.T_9:  "eE",
		token.T_10: "escCharSpace",
		token.T_13: "line_comment",
		token.T_20: "}",
	},
	// OptMems
	{
		token.T_20: "}",
	},
	// OptNeg
	{
		token.T_4:  "0",
		token.T_14: "nonZero",
	},
	// OptPM
	{
		token.T_16: "repNum1x",
	},
	// Pair
	{
		token.T_1:  ",",
		token.T_20: "}",
	},
	// PlusORMinus
	{
		token.T_16: "repNum1x",
	},
	// RBRACE
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// RBRACKET
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// RepComPair0x
	{
		token.T_20: "}",
	},
	// RepComVal0x
	{
		token.T_7: "]",
	},
	// String
	{
		token.T_1:  ",",
		token.T_5:  ":",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// TRUE
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// Value
	{
		token.T_1:  ",",
		token.T_7:  "]",
		token.T_20: "}",
	},
	// WS
	{
		token.EOF:  "$",
		token.T_1:  ",",
		token.T_2:  "-",
		token.T_4:  "0",
		token.T_5:  ":",
		token.T_6:  "[",
		token.T_7:  "]",
		token.T_11: "false",
		token.T_14: "nonZero",
		token.T_15: "null",
		token.T_17: "string_ns",
		token.T_18: "true",
		token.T_19: "{",
		token.T_20: "}",
	},
}

/*** Errors ***/

/*
Error is returned by Parse at every point at which the parser fails to parse
a grammar production. For non-LL-1 grammars there will be an error for each
alternate attempted by the parser.

The errors are sorted in descending order of input position (index of token in
the stream of tokens).

Normally the error of interest is the one that has parsed the largest number of
tokens.
*/
type Error struct {
	// Index of token that caused the error.
	cI int

	// Grammar slot at which the error occured.
	Slot slot.Label

	// The token at which the error occurred.
	Token *token.Token

	// The line and column in the input text at which the error occurred
	Line, Column int

	// The tokens expected at the point where the error occurred
	Expected map[token.Type]string
}

func (pe *Error) String() string {
	w := new(bytes.Buffer)
	fmt.Fprintf(w, "Parse Error: %s I[%d]=%s at line %d col %d\n",
		pe.Slot, pe.cI, pe.Token, pe.Line, pe.Column)
	exp := []string{}
	for _, e := range pe.Expected {
		exp = append(exp, e)
	}
	fmt.Fprintf(w, "Expected one of: [%s]", strings.Join(exp, ","))
	return w.String()
}

func (p *parser) parseError(slot slot.Label, i int, expected map[token.Type]string) {
	pe := &Error{cI: i, Slot: slot, Token: p.lex.Tokens[i], Expected: expected}
	p.parseErrors = append(p.parseErrors, pe)
}

func (p *parser) sortParseErrors() {
	sort.Slice(p.parseErrors,
		func(i, j int) bool {
			return p.parseErrors[j].Token.Lext() < p.parseErrors[i].Token.Lext()
		})
	for _, pe := range p.parseErrors {
		pe.Line, pe.Column = p.lex.GetLineColumn(pe.Token.Lext())
	}
}
