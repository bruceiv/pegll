
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	IsLookahead() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}
func (L) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_Array NT = iota
	NT_CHAR 
	NT_COLON 
	NT_COMMA 
	NT_CharCode 
	NT_ComPair 
	NT_ComVal 
	NT_EXP 
	NT_Elements 
	NT_EscOrComment 
	NT_FALSE 
	NT_FRAC 
	NT_INT 
	NT_Integers 
	NT_JSON 
	NT_LBRACE 
	NT_LBRACKET 
	NT_Members 
	NT_NUL 
	NT_Neg 
	NT_NumSeq 
	NT_Number 
	NT_Object 
	NT_Pair 
	NT_PlusORMinus 
	NT_RBRACE 
	NT_RBRACKET 
	NT_String 
	NT_Suff1xchar 
	NT_SuffCHAR 
	NT_SuffComPair 
	NT_SuffComVal 
	NT_SuffEXP 
	NT_SuffElements 
	NT_SuffFRAC 
	NT_SuffMembers 
	NT_SuffNeg 
	NT_SuffPlusORMinus 
	NT_Suffchar 
	NT_Suffnum 
	NT_TRUE 
	NT_Value 
	NT_WS 
)

const NumNTs = 43

type NTs []NT

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // + 
	T_1  // , 
	T_2  // - 
	T_3  // . 
	T_4  // 0 
	T_5  // : 
	T_6  // [ 
	T_7  // ] 
	T_8  // bSlash 
	T_9  // block_comment 
	T_10  // char 
	T_11  // dQuote 
	T_12  // eE 
	T_13  // esc 
	T_14  // escCharSpace 
	T_15  // false 
	T_16  // hex 
	T_17  // line_comment 
	T_18  // nonZero 
	T_19  // null 
	T_20  // num 
	T_21  // true 
	T_22  // u 
	T_23  // { 
	T_24  // } 
)

// L is the type of lookahead symbols
type L int
const( 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (L) IsNonTerminal() bool {
	return false
}

func (NT) IsLookahead() bool {
	return false
}

func (T) IsLookahead() bool {
	return false
}

func (L) IsLookahead() bool {
	return true
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

func (lk L) String() string {
	if lk.IsNegative() {
		return "!" + lk.ArgSymbol().String()
	} else {
		return "&" + lk.ArgSymbol().String()
	}
}

func (nt NT) LeftRec() NTs {
	return leftRec[nt]
}

func (nt NT) IsOrdered() bool {
	return ordered[nt]
}

const(
	negTerm    = 0
	negNonterm = 1
	posTerm    = 2
	posNonterm = 3
	isNonterm  = 1
	isPos      = 2
)

func (lk L) IsNegative() bool {
	return lkMode[lk] & isPos == 0
}

func (lk L) IsPositive() bool {
	return lkMode[lk] & isPos != 0
}

func (lk L) ArgSymbol() Symbol {
	switch lkMode[lk] & isNonterm {
	case 0: // terminal
		return T(lkSym[lk])
	case 1: // nonterminal
		return NT(lkSym[lk])
	default:
		panic("Invalid lookahead")
	}
}

var ntToString = []string { 
	"Array", /* NT_Array */
	"CHAR", /* NT_CHAR */
	"COLON", /* NT_COLON */
	"COMMA", /* NT_COMMA */
	"CharCode", /* NT_CharCode */
	"ComPair", /* NT_ComPair */
	"ComVal", /* NT_ComVal */
	"EXP", /* NT_EXP */
	"Elements", /* NT_Elements */
	"EscOrComment", /* NT_EscOrComment */
	"FALSE", /* NT_FALSE */
	"FRAC", /* NT_FRAC */
	"INT", /* NT_INT */
	"Integers", /* NT_Integers */
	"JSON", /* NT_JSON */
	"LBRACE", /* NT_LBRACE */
	"LBRACKET", /* NT_LBRACKET */
	"Members", /* NT_Members */
	"NUL", /* NT_NUL */
	"Neg", /* NT_Neg */
	"NumSeq", /* NT_NumSeq */
	"Number", /* NT_Number */
	"Object", /* NT_Object */
	"Pair", /* NT_Pair */
	"PlusORMinus", /* NT_PlusORMinus */
	"RBRACE", /* NT_RBRACE */
	"RBRACKET", /* NT_RBRACKET */
	"String", /* NT_String */
	"Suff1xchar", /* NT_Suff1xchar */
	"SuffCHAR", /* NT_SuffCHAR */
	"SuffComPair", /* NT_SuffComPair */
	"SuffComVal", /* NT_SuffComVal */
	"SuffEXP", /* NT_SuffEXP */
	"SuffElements", /* NT_SuffElements */
	"SuffFRAC", /* NT_SuffFRAC */
	"SuffMembers", /* NT_SuffMembers */
	"SuffNeg", /* NT_SuffNeg */
	"SuffPlusORMinus", /* NT_SuffPlusORMinus */
	"Suffchar", /* NT_Suffchar */
	"Suffnum", /* NT_Suffnum */
	"TRUE", /* NT_TRUE */
	"Value", /* NT_Value */
	"WS", /* NT_WS */ 
}

var tToString = []string { 
	"+", /* T_0 */
	",", /* T_1 */
	"-", /* T_2 */
	".", /* T_3 */
	"0", /* T_4 */
	":", /* T_5 */
	"[", /* T_6 */
	"]", /* T_7 */
	"bSlash", /* T_8 */
	"block_comment", /* T_9 */
	"char", /* T_10 */
	"dQuote", /* T_11 */
	"eE", /* T_12 */
	"esc", /* T_13 */
	"escCharSpace", /* T_14 */
	"false", /* T_15 */
	"hex", /* T_16 */
	"line_comment", /* T_17 */
	"nonZero", /* T_18 */
	"null", /* T_19 */
	"num", /* T_20 */
	"true", /* T_21 */
	"u", /* T_22 */
	"{", /* T_23 */
	"}", /* T_24 */ 
}

var stringNT = map[string]NT{ 
	"Array":NT_Array,
	"CHAR":NT_CHAR,
	"COLON":NT_COLON,
	"COMMA":NT_COMMA,
	"CharCode":NT_CharCode,
	"ComPair":NT_ComPair,
	"ComVal":NT_ComVal,
	"EXP":NT_EXP,
	"Elements":NT_Elements,
	"EscOrComment":NT_EscOrComment,
	"FALSE":NT_FALSE,
	"FRAC":NT_FRAC,
	"INT":NT_INT,
	"Integers":NT_Integers,
	"JSON":NT_JSON,
	"LBRACE":NT_LBRACE,
	"LBRACKET":NT_LBRACKET,
	"Members":NT_Members,
	"NUL":NT_NUL,
	"Neg":NT_Neg,
	"NumSeq":NT_NumSeq,
	"Number":NT_Number,
	"Object":NT_Object,
	"Pair":NT_Pair,
	"PlusORMinus":NT_PlusORMinus,
	"RBRACE":NT_RBRACE,
	"RBRACKET":NT_RBRACKET,
	"String":NT_String,
	"Suff1xchar":NT_Suff1xchar,
	"SuffCHAR":NT_SuffCHAR,
	"SuffComPair":NT_SuffComPair,
	"SuffComVal":NT_SuffComVal,
	"SuffEXP":NT_SuffEXP,
	"SuffElements":NT_SuffElements,
	"SuffFRAC":NT_SuffFRAC,
	"SuffMembers":NT_SuffMembers,
	"SuffNeg":NT_SuffNeg,
	"SuffPlusORMinus":NT_SuffPlusORMinus,
	"Suffchar":NT_Suffchar,
	"Suffnum":NT_Suffnum,
	"TRUE":NT_TRUE,
	"Value":NT_Value,
	"WS":NT_WS,
}

var leftRec = map[NT]NTs { 
	NT_Array: NTs {  NT_LBRACKET,  },
	NT_CHAR: NTs {  NT_Suff1xchar,  },
	NT_COLON: NTs {  },
	NT_COMMA: NTs {  },
	NT_CharCode: NTs {  },
	NT_ComPair: NTs {  NT_COMMA,  },
	NT_ComVal: NTs {  NT_COMMA,  },
	NT_EXP: NTs {  },
	NT_Elements: NTs {  NT_NUL,  NT_INT,  NT_LBRACE,  NT_Integers,  NT_TRUE,  NT_FALSE,  NT_SuffNeg,  NT_Array,  NT_String,  NT_NumSeq,  NT_Object,  NT_LBRACKET,  NT_Value,  NT_Neg,  NT_Number,  },
	NT_EscOrComment: NTs {  },
	NT_FALSE: NTs {  },
	NT_FRAC: NTs {  },
	NT_INT: NTs {  NT_SuffNeg,  NT_Neg,  NT_Integers,  NT_NumSeq,  },
	NT_Integers: NTs {  NT_NumSeq,  },
	NT_JSON: NTs {  NT_WS,  NT_EscOrComment,  NT_Object,  NT_LBRACE,  },
	NT_LBRACE: NTs {  },
	NT_LBRACKET: NTs {  },
	NT_Members: NTs {  NT_String,  NT_Pair,  },
	NT_NUL: NTs {  },
	NT_Neg: NTs {  },
	NT_NumSeq: NTs {  },
	NT_Number: NTs {  NT_INT,  NT_Integers,  NT_NumSeq,  NT_SuffNeg,  NT_Neg,  },
	NT_Object: NTs {  NT_LBRACE,  },
	NT_Pair: NTs {  NT_String,  },
	NT_PlusORMinus: NTs {  },
	NT_RBRACE: NTs {  },
	NT_RBRACKET: NTs {  },
	NT_String: NTs {  },
	NT_Suff1xchar: NTs {  },
	NT_SuffCHAR: NTs {  NT_CHAR,  NT_Suff1xchar,  },
	NT_SuffComPair: NTs {  NT_ComPair,  NT_COMMA,  },
	NT_SuffComVal: NTs {  NT_ComVal,  NT_COMMA,  },
	NT_SuffEXP: NTs {  NT_EXP,  },
	NT_SuffElements: NTs {  NT_String,  NT_NUL,  NT_INT,  NT_TRUE,  NT_SuffNeg,  NT_Value,  NT_Neg,  NT_Number,  NT_Elements,  NT_FALSE,  NT_LBRACKET,  NT_Integers,  NT_Array,  NT_NumSeq,  NT_Object,  NT_LBRACE,  },
	NT_SuffFRAC: NTs {  NT_FRAC,  },
	NT_SuffMembers: NTs {  NT_Members,  NT_Pair,  NT_String,  },
	NT_SuffNeg: NTs {  NT_Neg,  },
	NT_SuffPlusORMinus: NTs {  NT_PlusORMinus,  },
	NT_Suffchar: NTs {  },
	NT_Suffnum: NTs {  },
	NT_TRUE: NTs {  },
	NT_Value: NTs {  NT_Neg,  NT_String,  NT_NumSeq,  NT_Object,  NT_LBRACKET,  NT_Number,  NT_Integers,  NT_TRUE,  NT_FALSE,  NT_NUL,  NT_SuffNeg,  NT_INT,  NT_LBRACE,  NT_Array,  },
	NT_WS: NTs {  NT_WS,  NT_EscOrComment,  },
}

var ordered = map[NT]bool { 
	NT_CHAR:true,
	NT_CharCode:true,
	NT_EscOrComment:true,
	NT_Integers:true,
	NT_Suff1xchar:true,
	NT_SuffCHAR:true,
	NT_SuffComPair:true,
	NT_SuffComVal:true,
	NT_SuffEXP:true,
	NT_SuffElements:true,
	NT_SuffFRAC:true,
	NT_SuffMembers:true,
	NT_SuffNeg:true,
	NT_SuffPlusORMinus:true,
	NT_Suffchar:true,
	NT_Suffnum:true,
	NT_Value:true,
	NT_WS:true,
}

var lkMode = []int { 
}

var lkSym = []int { 
}
