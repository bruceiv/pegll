
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_EscOrComment NT = iota
	NT_LineOrBlock 
	NT_WS 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // block_comment 
	T_1  // eE 
	T_2  // escChar 
	T_3  // escCharSpace 
	T_4  // line_comment 
	T_5  // newLine 
	T_6  // notZero 
	T_7  // optNumbers 
	T_8  // plusMinus 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"EscOrComment", /* NT_EscOrComment */
	"LineOrBlock", /* NT_LineOrBlock */
	"WS", /* NT_WS */ 
}

var tToString = []string { 
	"block_comment", /* T_0 */
	"eE", /* T_1 */
	"escChar", /* T_2 */
	"escCharSpace", /* T_3 */
	"line_comment", /* T_4 */
	"newLine", /* T_5 */
	"notZero", /* T_6 */
	"optNumbers", /* T_7 */
	"plusMinus", /* T_8 */ 
}

var stringNT = map[string]NT{ 
	"EscOrComment":NT_EscOrComment,
	"LineOrBlock":NT_LineOrBlock,
	"WS":NT_WS,
}
