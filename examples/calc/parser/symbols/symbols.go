
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_ELEM NT = iota
	NT_Expr 
	NT_PROD 
	NT_SUM 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // close 
	T_1  // divide 
	T_2  // minus 
	T_3  // num 
	T_4  // open 
	T_5  // plus 
	T_6  // times 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"ELEM", /* NT_ELEM */
	"Expr", /* NT_Expr */
	"PROD", /* NT_PROD */
	"SUM", /* NT_SUM */ 
}

var tToString = []string { 
	"close", /* T_0 */
	"divide", /* T_1 */
	"minus", /* T_2 */
	"num", /* T_3 */
	"open", /* T_4 */
	"plus", /* T_5 */
	"times", /* T_6 */ 
}

var stringNT = map[string]NT{ 
	"ELEM":NT_ELEM,
	"Expr":NT_Expr,
	"PROD":NT_PROD,
	"SUM":NT_SUM,
}
