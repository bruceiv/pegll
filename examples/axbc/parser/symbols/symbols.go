
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_AorB NT = iota
	NT_As 
	NT_AxBC 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // a 
	T_1  // b 
	T_2  // c 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"AorB", /* NT_AorB */
	"As", /* NT_As */
	"AxBC", /* NT_AxBC */ 
}

var tToString = []string { 
	"a", /* T_0 */
	"b", /* T_1 */
	"c", /* T_2 */ 
}

var stringNT = map[string]NT{ 
	"AorB":NT_AorB,
	"As":NT_As,
	"AxBC":NT_AxBC,
}
