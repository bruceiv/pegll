
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_AND NT = iota
	NT_ANY 
	NT_CLOSE 
	NT_CharClass 
	NT_CharLiteral 
	NT_Character 
	NT_Choice 
	NT_EMPTY 
	NT_EQUAL 
	NT_Expression 
	NT_Grammar 
	NT_Identifier 
	NT_LetOrNum 
	NT_LetOrNum0x 
	NT_LetWS 
	NT_LineOrBlock 
	NT_NEQUAL 
	NT_NOT 
	NT_OPEN 
	NT_OPT 
	NT_OptStarPlus 
	NT_PIPE 
	NT_PLUS 
	NT_Primary 
	NT_RepExpr0x 
	NT_RepPipedSeq0x 
	NT_RepRule0x 
	NT_Rule 
	NT_STAR 
	NT_Sequence 
	NT_SpaceOrComment 
	NT_String 
	NT_StringLiteral 
	NT_UnclosedChar 
	NT_UnclosedChars 
	NT_WS 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // ! 
	T_1  // & 
	T_2  // ' 
	T_3  // ( 
	T_4  // * 
	T_5  // + 
	T_6  // . 
	T_7  // ; 
	T_8  // = 
	T_9  // ? 
	T_10  // [ 
	T_11  // ] 
	T_12  // blockComment 
	T_13  // dQuote 
	T_14  // endOfLine 
	T_15  // esc 
	T_16  // let 
	T_17  // lineComment 
	T_18  // neq 
	T_19  // notQuotesEsc 
	T_20  // notSqBk 
	T_21  // num 
	T_22  // space 
	T_23  // | 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"AND", /* NT_AND */
	"ANY", /* NT_ANY */
	"CLOSE", /* NT_CLOSE */
	"CharClass", /* NT_CharClass */
	"CharLiteral", /* NT_CharLiteral */
	"Character", /* NT_Character */
	"Choice", /* NT_Choice */
	"EMPTY", /* NT_EMPTY */
	"EQUAL", /* NT_EQUAL */
	"Expression", /* NT_Expression */
	"Grammar", /* NT_Grammar */
	"Identifier", /* NT_Identifier */
	"LetOrNum", /* NT_LetOrNum */
	"LetOrNum0x", /* NT_LetOrNum0x */
	"LetWS", /* NT_LetWS */
	"LineOrBlock", /* NT_LineOrBlock */
	"NEQUAL", /* NT_NEQUAL */
	"NOT", /* NT_NOT */
	"OPEN", /* NT_OPEN */
	"OPT", /* NT_OPT */
	"OptStarPlus", /* NT_OptStarPlus */
	"PIPE", /* NT_PIPE */
	"PLUS", /* NT_PLUS */
	"Primary", /* NT_Primary */
	"RepExpr0x", /* NT_RepExpr0x */
	"RepPipedSeq0x", /* NT_RepPipedSeq0x */
	"RepRule0x", /* NT_RepRule0x */
	"Rule", /* NT_Rule */
	"STAR", /* NT_STAR */
	"Sequence", /* NT_Sequence */
	"SpaceOrComment", /* NT_SpaceOrComment */
	"String", /* NT_String */
	"StringLiteral", /* NT_StringLiteral */
	"UnclosedChar", /* NT_UnclosedChar */
	"UnclosedChars", /* NT_UnclosedChars */
	"WS", /* NT_WS */ 
}

var tToString = []string { 
	"!", /* T_0 */
	"&", /* T_1 */
	"'", /* T_2 */
	"(", /* T_3 */
	"*", /* T_4 */
	"+", /* T_5 */
	".", /* T_6 */
	";", /* T_7 */
	"=", /* T_8 */
	"?", /* T_9 */
	"[", /* T_10 */
	"]", /* T_11 */
	"blockComment", /* T_12 */
	"dQuote", /* T_13 */
	"endOfLine", /* T_14 */
	"esc", /* T_15 */
	"let", /* T_16 */
	"lineComment", /* T_17 */
	"neq", /* T_18 */
	"notQuotesEsc", /* T_19 */
	"notSqBk", /* T_20 */
	"num", /* T_21 */
	"space", /* T_22 */
	"|", /* T_23 */ 
}

var stringNT = map[string]NT{ 
	"AND":NT_AND,
	"ANY":NT_ANY,
	"CLOSE":NT_CLOSE,
	"CharClass":NT_CharClass,
	"CharLiteral":NT_CharLiteral,
	"Character":NT_Character,
	"Choice":NT_Choice,
	"EMPTY":NT_EMPTY,
	"EQUAL":NT_EQUAL,
	"Expression":NT_Expression,
	"Grammar":NT_Grammar,
	"Identifier":NT_Identifier,
	"LetOrNum":NT_LetOrNum,
	"LetOrNum0x":NT_LetOrNum0x,
	"LetWS":NT_LetWS,
	"LineOrBlock":NT_LineOrBlock,
	"NEQUAL":NT_NEQUAL,
	"NOT":NT_NOT,
	"OPEN":NT_OPEN,
	"OPT":NT_OPT,
	"OptStarPlus":NT_OptStarPlus,
	"PIPE":NT_PIPE,
	"PLUS":NT_PLUS,
	"Primary":NT_Primary,
	"RepExpr0x":NT_RepExpr0x,
	"RepPipedSeq0x":NT_RepPipedSeq0x,
	"RepRule0x":NT_RepRule0x,
	"Rule":NT_Rule,
	"STAR":NT_STAR,
	"Sequence":NT_Sequence,
	"SpaceOrComment":NT_SpaceOrComment,
	"String":NT_String,
	"StringLiteral":NT_StringLiteral,
	"UnclosedChar":NT_UnclosedChar,
	"UnclosedChars":NT_UnclosedChars,
	"WS":NT_WS,
}
