
// Package slot is generated by gogll. Do not edit. 
package slot

import(
	"bytes"
	"fmt"
	
	"eggr/parser/symbols"
)

type Label int

const(
	AND0R0 Label = iota
	AND0R1
	AND0R2
	ANY0R0
	ANY0R1
	ANY0R2
	CLOSE0R0
	CLOSE0R1
	CLOSE0R2
	CharClass0R0
	CharClass0R1
	CharClass0R2
	CharClass0R3
	CharClass0R4
	CharLiteral0R0
	CharLiteral0R1
	CharLiteral0R2
	CharLiteral0R3
	Character0R0
	Character0R1
	Character1R0
	Character1R1
	Choice0R0
	Choice0R1
	Choice0R2
	EMPTY0R0
	EMPTY0R1
	EMPTY0R2
	EQUAL0R0
	EQUAL0R1
	EQUAL0R2
	Expression0R0
	Expression0R1
	Expression0R2
	Expression1R0
	Expression1R1
	Expression1R2
	Expression2R0
	Expression2R1
	Expression2R2
	Grammar0R0
	Grammar0R1
	Grammar0R2
	Grammar0R3
	Identifier0R0
	Identifier0R1
	Identifier0R2
	Identifier0R3
	LetOrNum0R0
	LetOrNum0R1
	LetOrNum1R0
	LetOrNum1R1
	LetOrNum2R0
	LetOrNum2R1
	LetOrNum0x0R0
	LetOrNum0x0R1
	LetOrNum0x0R2
	LetOrNum0x1R0
	LetOrNum0x1R1
	LetWS0R0
	LetWS0R1
	LetWS1R0
	LetWS1R1
	LineOrBlock0R0
	LineOrBlock0R1
	LineOrBlock1R0
	LineOrBlock1R1
	NEQUAL0R0
	NEQUAL0R1
	NEQUAL0R2
	NOT0R0
	NOT0R1
	NOT0R2
	OPEN0R0
	OPEN0R1
	OPEN0R2
	OPT0R0
	OPT0R1
	OPT0R2
	OptStarPlus0R0
	OptStarPlus0R1
	OptStarPlus1R0
	OptStarPlus1R1
	OptStarPlus2R0
	OptStarPlus2R1
	OptStarPlus3R0
	PIPE0R0
	PIPE0R1
	PIPE0R2
	PLUS0R0
	PLUS0R1
	PLUS0R2
	Primary0R0
	Primary0R1
	Primary0R2
	Primary1R0
	Primary1R1
	Primary1R2
	Primary1R3
	Primary2R0
	Primary2R1
	Primary3R0
	Primary3R1
	Primary4R0
	Primary4R1
	Primary5R0
	Primary5R1
	Primary6R0
	Primary6R1
	RepExpr0x0R0
	RepExpr0x0R1
	RepExpr0x0R2
	RepExpr0x1R0
	RepPipedSeq0x0R0
	RepPipedSeq0x0R1
	RepPipedSeq0x0R2
	RepPipedSeq0x0R3
	RepPipedSeq0x1R0
	RepRule0x0R0
	RepRule0x0R1
	RepRule0x0R2
	RepRule0x1R0
	Rule0R0
	Rule0R1
	Rule0R2
	Rule0R3
	STAR0R0
	STAR0R1
	STAR0R2
	Sequence0R0
	Sequence0R1
	Sequence0R2
	SpaceOrComment0R0
	SpaceOrComment0R1
	SpaceOrComment1R0
	SpaceOrComment1R1
	String0R0
	String0R1
	String0R2
	String1R0
	StringLiteral0R0
	StringLiteral0R1
	StringLiteral0R2
	StringLiteral0R3
	StringLiteral0R4
	UnclosedChar0R0
	UnclosedChar0R1
	UnclosedChar0R2
	UnclosedChars0R0
	UnclosedChars0R1
	UnclosedChars0R2
	UnclosedChars1R0
	WS0R0
	WS0R1
	WS0R2
	WS1R0
	WS1R1
)

type Slot struct {
	NT      symbols.NT
	Alt     int
	Pos     int
	Symbols symbols.Symbols
	Label 	Label
}

type Index struct {
	NT      symbols.NT
	Alt     int
	Pos     int
}

func GetAlternates(nt symbols.NT) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt symbols.NT, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() symbols.NT {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() symbols.Symbols {
	return l.Slot().Symbols
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

var slots = map[Label]*Slot{ 
	AND0R0: {
		symbols.NT_AND, 0, 0, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_WS,
		}, 
		AND0R0, 
	},
	AND0R1: {
		symbols.NT_AND, 0, 1, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_WS,
		}, 
		AND0R1, 
	},
	AND0R2: {
		symbols.NT_AND, 0, 2, 
		symbols.Symbols{  
			symbols.T_1, 
			symbols.NT_WS,
		}, 
		AND0R2, 
	},
	ANY0R0: {
		symbols.NT_ANY, 0, 0, 
		symbols.Symbols{  
			symbols.T_6, 
			symbols.NT_WS,
		}, 
		ANY0R0, 
	},
	ANY0R1: {
		symbols.NT_ANY, 0, 1, 
		symbols.Symbols{  
			symbols.T_6, 
			symbols.NT_WS,
		}, 
		ANY0R1, 
	},
	ANY0R2: {
		symbols.NT_ANY, 0, 2, 
		symbols.Symbols{  
			symbols.T_6, 
			symbols.NT_WS,
		}, 
		ANY0R2, 
	},
	CLOSE0R0: {
		symbols.NT_CLOSE, 0, 0, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		CLOSE0R0, 
	},
	CLOSE0R1: {
		symbols.NT_CLOSE, 0, 1, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		CLOSE0R1, 
	},
	CLOSE0R2: {
		symbols.NT_CLOSE, 0, 2, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		CLOSE0R2, 
	},
	CharClass0R0: {
		symbols.NT_CharClass, 0, 0, 
		symbols.Symbols{  
			symbols.T_10, 
			symbols.NT_UnclosedChars, 
			symbols.T_11, 
			symbols.NT_WS,
		}, 
		CharClass0R0, 
	},
	CharClass0R1: {
		symbols.NT_CharClass, 0, 1, 
		symbols.Symbols{  
			symbols.T_10, 
			symbols.NT_UnclosedChars, 
			symbols.T_11, 
			symbols.NT_WS,
		}, 
		CharClass0R1, 
	},
	CharClass0R2: {
		symbols.NT_CharClass, 0, 2, 
		symbols.Symbols{  
			symbols.T_10, 
			symbols.NT_UnclosedChars, 
			symbols.T_11, 
			symbols.NT_WS,
		}, 
		CharClass0R2, 
	},
	CharClass0R3: {
		symbols.NT_CharClass, 0, 3, 
		symbols.Symbols{  
			symbols.T_10, 
			symbols.NT_UnclosedChars, 
			symbols.T_11, 
			symbols.NT_WS,
		}, 
		CharClass0R3, 
	},
	CharClass0R4: {
		symbols.NT_CharClass, 0, 4, 
		symbols.Symbols{  
			symbols.T_10, 
			symbols.NT_UnclosedChars, 
			symbols.T_11, 
			symbols.NT_WS,
		}, 
		CharClass0R4, 
	},
	CharLiteral0R0: {
		symbols.NT_CharLiteral, 0, 0, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_Character, 
			symbols.T_2,
		}, 
		CharLiteral0R0, 
	},
	CharLiteral0R1: {
		symbols.NT_CharLiteral, 0, 1, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_Character, 
			symbols.T_2,
		}, 
		CharLiteral0R1, 
	},
	CharLiteral0R2: {
		symbols.NT_CharLiteral, 0, 2, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_Character, 
			symbols.T_2,
		}, 
		CharLiteral0R2, 
	},
	CharLiteral0R3: {
		symbols.NT_CharLiteral, 0, 3, 
		symbols.Symbols{  
			symbols.T_2, 
			symbols.NT_Character, 
			symbols.T_2,
		}, 
		CharLiteral0R3, 
	},
	Character0R0: {
		symbols.NT_Character, 0, 0, 
		symbols.Symbols{  
			symbols.T_19,
		}, 
		Character0R0, 
	},
	Character0R1: {
		symbols.NT_Character, 0, 1, 
		symbols.Symbols{  
			symbols.T_19,
		}, 
		Character0R1, 
	},
	Character1R0: {
		symbols.NT_Character, 1, 0, 
		symbols.Symbols{  
			symbols.T_15,
		}, 
		Character1R0, 
	},
	Character1R1: {
		symbols.NT_Character, 1, 1, 
		symbols.Symbols{  
			symbols.T_15,
		}, 
		Character1R1, 
	},
	Choice0R0: {
		symbols.NT_Choice, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		Choice0R0, 
	},
	Choice0R1: {
		symbols.NT_Choice, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		Choice0R1, 
	},
	Choice0R2: {
		symbols.NT_Choice, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		Choice0R2, 
	},
	EMPTY0R0: {
		symbols.NT_EMPTY, 0, 0, 
		symbols.Symbols{  
			symbols.T_7, 
			symbols.NT_WS,
		}, 
		EMPTY0R0, 
	},
	EMPTY0R1: {
		symbols.NT_EMPTY, 0, 1, 
		symbols.Symbols{  
			symbols.T_7, 
			symbols.NT_WS,
		}, 
		EMPTY0R1, 
	},
	EMPTY0R2: {
		symbols.NT_EMPTY, 0, 2, 
		symbols.Symbols{  
			symbols.T_7, 
			symbols.NT_WS,
		}, 
		EMPTY0R2, 
	},
	EQUAL0R0: {
		symbols.NT_EQUAL, 0, 0, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_WS,
		}, 
		EQUAL0R0, 
	},
	EQUAL0R1: {
		symbols.NT_EQUAL, 0, 1, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_WS,
		}, 
		EQUAL0R1, 
	},
	EQUAL0R2: {
		symbols.NT_EQUAL, 0, 2, 
		symbols.Symbols{  
			symbols.T_8, 
			symbols.NT_WS,
		}, 
		EQUAL0R2, 
	},
	Expression0R0: {
		symbols.NT_Expression, 0, 0, 
		symbols.Symbols{  
			symbols.NT_AND, 
			symbols.NT_Primary,
		}, 
		Expression0R0, 
	},
	Expression0R1: {
		symbols.NT_Expression, 0, 1, 
		symbols.Symbols{  
			symbols.NT_AND, 
			symbols.NT_Primary,
		}, 
		Expression0R1, 
	},
	Expression0R2: {
		symbols.NT_Expression, 0, 2, 
		symbols.Symbols{  
			symbols.NT_AND, 
			symbols.NT_Primary,
		}, 
		Expression0R2, 
	},
	Expression1R0: {
		symbols.NT_Expression, 1, 0, 
		symbols.Symbols{  
			symbols.NT_NOT, 
			symbols.NT_Primary,
		}, 
		Expression1R0, 
	},
	Expression1R1: {
		symbols.NT_Expression, 1, 1, 
		symbols.Symbols{  
			symbols.NT_NOT, 
			symbols.NT_Primary,
		}, 
		Expression1R1, 
	},
	Expression1R2: {
		symbols.NT_Expression, 1, 2, 
		symbols.Symbols{  
			symbols.NT_NOT, 
			symbols.NT_Primary,
		}, 
		Expression1R2, 
	},
	Expression2R0: {
		symbols.NT_Expression, 2, 0, 
		symbols.Symbols{  
			symbols.NT_Primary, 
			symbols.NT_OptStarPlus,
		}, 
		Expression2R0, 
	},
	Expression2R1: {
		symbols.NT_Expression, 2, 1, 
		symbols.Symbols{  
			symbols.NT_Primary, 
			symbols.NT_OptStarPlus,
		}, 
		Expression2R1, 
	},
	Expression2R2: {
		symbols.NT_Expression, 2, 2, 
		symbols.Symbols{  
			symbols.NT_Primary, 
			symbols.NT_OptStarPlus,
		}, 
		Expression2R2, 
	},
	Grammar0R0: {
		symbols.NT_Grammar, 0, 0, 
		symbols.Symbols{  
			symbols.NT_WS, 
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		Grammar0R0, 
	},
	Grammar0R1: {
		symbols.NT_Grammar, 0, 1, 
		symbols.Symbols{  
			symbols.NT_WS, 
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		Grammar0R1, 
	},
	Grammar0R2: {
		symbols.NT_Grammar, 0, 2, 
		symbols.Symbols{  
			symbols.NT_WS, 
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		Grammar0R2, 
	},
	Grammar0R3: {
		symbols.NT_Grammar, 0, 3, 
		symbols.Symbols{  
			symbols.NT_WS, 
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		Grammar0R3, 
	},
	Identifier0R0: {
		symbols.NT_Identifier, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LetWS, 
			symbols.NT_LetOrNum0x, 
			symbols.NT_WS,
		}, 
		Identifier0R0, 
	},
	Identifier0R1: {
		symbols.NT_Identifier, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LetWS, 
			symbols.NT_LetOrNum0x, 
			symbols.NT_WS,
		}, 
		Identifier0R1, 
	},
	Identifier0R2: {
		symbols.NT_Identifier, 0, 2, 
		symbols.Symbols{  
			symbols.NT_LetWS, 
			symbols.NT_LetOrNum0x, 
			symbols.NT_WS,
		}, 
		Identifier0R2, 
	},
	Identifier0R3: {
		symbols.NT_Identifier, 0, 3, 
		symbols.Symbols{  
			symbols.NT_LetWS, 
			symbols.NT_LetOrNum0x, 
			symbols.NT_WS,
		}, 
		Identifier0R3, 
	},
	LetOrNum0R0: {
		symbols.NT_LetOrNum, 0, 0, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		LetOrNum0R0, 
	},
	LetOrNum0R1: {
		symbols.NT_LetOrNum, 0, 1, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		LetOrNum0R1, 
	},
	LetOrNum1R0: {
		symbols.NT_LetOrNum, 1, 0, 
		symbols.Symbols{  
			symbols.T_21,
		}, 
		LetOrNum1R0, 
	},
	LetOrNum1R1: {
		symbols.NT_LetOrNum, 1, 1, 
		symbols.Symbols{  
			symbols.T_21,
		}, 
		LetOrNum1R1, 
	},
	LetOrNum2R0: {
		symbols.NT_LetOrNum, 2, 0, 
		symbols.Symbols{  
			symbols.NT_WS,
		}, 
		LetOrNum2R0, 
	},
	LetOrNum2R1: {
		symbols.NT_LetOrNum, 2, 1, 
		symbols.Symbols{  
			symbols.NT_WS,
		}, 
		LetOrNum2R1, 
	},
	LetOrNum0x0R0: {
		symbols.NT_LetOrNum0x, 0, 0, 
		symbols.Symbols{  
			symbols.NT_LetOrNum, 
			symbols.NT_LetOrNum0x,
		}, 
		LetOrNum0x0R0, 
	},
	LetOrNum0x0R1: {
		symbols.NT_LetOrNum0x, 0, 1, 
		symbols.Symbols{  
			symbols.NT_LetOrNum, 
			symbols.NT_LetOrNum0x,
		}, 
		LetOrNum0x0R1, 
	},
	LetOrNum0x0R2: {
		symbols.NT_LetOrNum0x, 0, 2, 
		symbols.Symbols{  
			symbols.NT_LetOrNum, 
			symbols.NT_LetOrNum0x,
		}, 
		LetOrNum0x0R2, 
	},
	LetOrNum0x1R0: {
		symbols.NT_LetOrNum0x, 1, 0, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		LetOrNum0x1R0, 
	},
	LetOrNum0x1R1: {
		symbols.NT_LetOrNum0x, 1, 1, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		LetOrNum0x1R1, 
	},
	LetWS0R0: {
		symbols.NT_LetWS, 0, 0, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		LetWS0R0, 
	},
	LetWS0R1: {
		symbols.NT_LetWS, 0, 1, 
		symbols.Symbols{  
			symbols.T_16,
		}, 
		LetWS0R1, 
	},
	LetWS1R0: {
		symbols.NT_LetWS, 1, 0, 
		symbols.Symbols{  
			symbols.NT_WS,
		}, 
		LetWS1R0, 
	},
	LetWS1R1: {
		symbols.NT_LetWS, 1, 1, 
		symbols.Symbols{  
			symbols.NT_WS,
		}, 
		LetWS1R1, 
	},
	LineOrBlock0R0: {
		symbols.NT_LineOrBlock, 0, 0, 
		symbols.Symbols{  
			symbols.T_17,
		}, 
		LineOrBlock0R0, 
	},
	LineOrBlock0R1: {
		symbols.NT_LineOrBlock, 0, 1, 
		symbols.Symbols{  
			symbols.T_17,
		}, 
		LineOrBlock0R1, 
	},
	LineOrBlock1R0: {
		symbols.NT_LineOrBlock, 1, 0, 
		symbols.Symbols{  
			symbols.T_12,
		}, 
		LineOrBlock1R0, 
	},
	LineOrBlock1R1: {
		symbols.NT_LineOrBlock, 1, 1, 
		symbols.Symbols{  
			symbols.T_12,
		}, 
		LineOrBlock1R1, 
	},
	NEQUAL0R0: {
		symbols.NT_NEQUAL, 0, 0, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.NT_WS,
		}, 
		NEQUAL0R0, 
	},
	NEQUAL0R1: {
		symbols.NT_NEQUAL, 0, 1, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.NT_WS,
		}, 
		NEQUAL0R1, 
	},
	NEQUAL0R2: {
		symbols.NT_NEQUAL, 0, 2, 
		symbols.Symbols{  
			symbols.T_18, 
			symbols.NT_WS,
		}, 
		NEQUAL0R2, 
	},
	NOT0R0: {
		symbols.NT_NOT, 0, 0, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_WS,
		}, 
		NOT0R0, 
	},
	NOT0R1: {
		symbols.NT_NOT, 0, 1, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_WS,
		}, 
		NOT0R1, 
	},
	NOT0R2: {
		symbols.NT_NOT, 0, 2, 
		symbols.Symbols{  
			symbols.T_0, 
			symbols.NT_WS,
		}, 
		NOT0R2, 
	},
	OPEN0R0: {
		symbols.NT_OPEN, 0, 0, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		OPEN0R0, 
	},
	OPEN0R1: {
		symbols.NT_OPEN, 0, 1, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		OPEN0R1, 
	},
	OPEN0R2: {
		symbols.NT_OPEN, 0, 2, 
		symbols.Symbols{  
			symbols.T_3, 
			symbols.NT_WS,
		}, 
		OPEN0R2, 
	},
	OPT0R0: {
		symbols.NT_OPT, 0, 0, 
		symbols.Symbols{  
			symbols.T_9, 
			symbols.NT_WS,
		}, 
		OPT0R0, 
	},
	OPT0R1: {
		symbols.NT_OPT, 0, 1, 
		symbols.Symbols{  
			symbols.T_9, 
			symbols.NT_WS,
		}, 
		OPT0R1, 
	},
	OPT0R2: {
		symbols.NT_OPT, 0, 2, 
		symbols.Symbols{  
			symbols.T_9, 
			symbols.NT_WS,
		}, 
		OPT0R2, 
	},
	OptStarPlus0R0: {
		symbols.NT_OptStarPlus, 0, 0, 
		symbols.Symbols{  
			symbols.NT_OPT,
		}, 
		OptStarPlus0R0, 
	},
	OptStarPlus0R1: {
		symbols.NT_OptStarPlus, 0, 1, 
		symbols.Symbols{  
			symbols.NT_OPT,
		}, 
		OptStarPlus0R1, 
	},
	OptStarPlus1R0: {
		symbols.NT_OptStarPlus, 1, 0, 
		symbols.Symbols{  
			symbols.NT_STAR,
		}, 
		OptStarPlus1R0, 
	},
	OptStarPlus1R1: {
		symbols.NT_OptStarPlus, 1, 1, 
		symbols.Symbols{  
			symbols.NT_STAR,
		}, 
		OptStarPlus1R1, 
	},
	OptStarPlus2R0: {
		symbols.NT_OptStarPlus, 2, 0, 
		symbols.Symbols{  
			symbols.NT_PLUS,
		}, 
		OptStarPlus2R0, 
	},
	OptStarPlus2R1: {
		symbols.NT_OptStarPlus, 2, 1, 
		symbols.Symbols{  
			symbols.NT_PLUS,
		}, 
		OptStarPlus2R1, 
	},
	OptStarPlus3R0: {
		symbols.NT_OptStarPlus, 3, 0, 
		symbols.Symbols{ 
		}, 
		OptStarPlus3R0, 
	},
	PIPE0R0: {
		symbols.NT_PIPE, 0, 0, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.NT_WS,
		}, 
		PIPE0R0, 
	},
	PIPE0R1: {
		symbols.NT_PIPE, 0, 1, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.NT_WS,
		}, 
		PIPE0R1, 
	},
	PIPE0R2: {
		symbols.NT_PIPE, 0, 2, 
		symbols.Symbols{  
			symbols.T_23, 
			symbols.NT_WS,
		}, 
		PIPE0R2, 
	},
	PLUS0R0: {
		symbols.NT_PLUS, 0, 0, 
		symbols.Symbols{  
			symbols.T_5, 
			symbols.NT_WS,
		}, 
		PLUS0R0, 
	},
	PLUS0R1: {
		symbols.NT_PLUS, 0, 1, 
		symbols.Symbols{  
			symbols.T_5, 
			symbols.NT_WS,
		}, 
		PLUS0R1, 
	},
	PLUS0R2: {
		symbols.NT_PLUS, 0, 2, 
		symbols.Symbols{  
			symbols.T_5, 
			symbols.NT_WS,
		}, 
		PLUS0R2, 
	},
	Primary0R0: {
		symbols.NT_Primary, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_NEQUAL,
		}, 
		Primary0R0, 
	},
	Primary0R1: {
		symbols.NT_Primary, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_NEQUAL,
		}, 
		Primary0R1, 
	},
	Primary0R2: {
		symbols.NT_Primary, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_NEQUAL,
		}, 
		Primary0R2, 
	},
	Primary1R0: {
		symbols.NT_Primary, 1, 0, 
		symbols.Symbols{  
			symbols.NT_OPEN, 
			symbols.NT_Choice, 
			symbols.NT_CLOSE,
		}, 
		Primary1R0, 
	},
	Primary1R1: {
		symbols.NT_Primary, 1, 1, 
		symbols.Symbols{  
			symbols.NT_OPEN, 
			symbols.NT_Choice, 
			symbols.NT_CLOSE,
		}, 
		Primary1R1, 
	},
	Primary1R2: {
		symbols.NT_Primary, 1, 2, 
		symbols.Symbols{  
			symbols.NT_OPEN, 
			symbols.NT_Choice, 
			symbols.NT_CLOSE,
		}, 
		Primary1R2, 
	},
	Primary1R3: {
		symbols.NT_Primary, 1, 3, 
		symbols.Symbols{  
			symbols.NT_OPEN, 
			symbols.NT_Choice, 
			symbols.NT_CLOSE,
		}, 
		Primary1R3, 
	},
	Primary2R0: {
		symbols.NT_Primary, 2, 0, 
		symbols.Symbols{  
			symbols.NT_StringLiteral,
		}, 
		Primary2R0, 
	},
	Primary2R1: {
		symbols.NT_Primary, 2, 1, 
		symbols.Symbols{  
			symbols.NT_StringLiteral,
		}, 
		Primary2R1, 
	},
	Primary3R0: {
		symbols.NT_Primary, 3, 0, 
		symbols.Symbols{  
			symbols.NT_CharLiteral,
		}, 
		Primary3R0, 
	},
	Primary3R1: {
		symbols.NT_Primary, 3, 1, 
		symbols.Symbols{  
			symbols.NT_CharLiteral,
		}, 
		Primary3R1, 
	},
	Primary4R0: {
		symbols.NT_Primary, 4, 0, 
		symbols.Symbols{  
			symbols.NT_CharClass,
		}, 
		Primary4R0, 
	},
	Primary4R1: {
		symbols.NT_Primary, 4, 1, 
		symbols.Symbols{  
			symbols.NT_CharClass,
		}, 
		Primary4R1, 
	},
	Primary5R0: {
		symbols.NT_Primary, 5, 0, 
		symbols.Symbols{  
			symbols.NT_ANY,
		}, 
		Primary5R0, 
	},
	Primary5R1: {
		symbols.NT_Primary, 5, 1, 
		symbols.Symbols{  
			symbols.NT_ANY,
		}, 
		Primary5R1, 
	},
	Primary6R0: {
		symbols.NT_Primary, 6, 0, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		Primary6R0, 
	},
	Primary6R1: {
		symbols.NT_Primary, 6, 1, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		Primary6R1, 
	},
	RepExpr0x0R0: {
		symbols.NT_RepExpr0x, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		RepExpr0x0R0, 
	},
	RepExpr0x0R1: {
		symbols.NT_RepExpr0x, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		RepExpr0x0R1, 
	},
	RepExpr0x0R2: {
		symbols.NT_RepExpr0x, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		RepExpr0x0R2, 
	},
	RepExpr0x1R0: {
		symbols.NT_RepExpr0x, 1, 0, 
		symbols.Symbols{ 
		}, 
		RepExpr0x1R0, 
	},
	RepPipedSeq0x0R0: {
		symbols.NT_RepPipedSeq0x, 0, 0, 
		symbols.Symbols{  
			symbols.NT_PIPE, 
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		RepPipedSeq0x0R0, 
	},
	RepPipedSeq0x0R1: {
		symbols.NT_RepPipedSeq0x, 0, 1, 
		symbols.Symbols{  
			symbols.NT_PIPE, 
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		RepPipedSeq0x0R1, 
	},
	RepPipedSeq0x0R2: {
		symbols.NT_RepPipedSeq0x, 0, 2, 
		symbols.Symbols{  
			symbols.NT_PIPE, 
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		RepPipedSeq0x0R2, 
	},
	RepPipedSeq0x0R3: {
		symbols.NT_RepPipedSeq0x, 0, 3, 
		symbols.Symbols{  
			symbols.NT_PIPE, 
			symbols.NT_Sequence, 
			symbols.NT_RepPipedSeq0x,
		}, 
		RepPipedSeq0x0R3, 
	},
	RepPipedSeq0x1R0: {
		symbols.NT_RepPipedSeq0x, 1, 0, 
		symbols.Symbols{ 
		}, 
		RepPipedSeq0x1R0, 
	},
	RepRule0x0R0: {
		symbols.NT_RepRule0x, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		RepRule0x0R0, 
	},
	RepRule0x0R1: {
		symbols.NT_RepRule0x, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		RepRule0x0R1, 
	},
	RepRule0x0R2: {
		symbols.NT_RepRule0x, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Rule, 
			symbols.NT_RepRule0x,
		}, 
		RepRule0x0R2, 
	},
	RepRule0x1R0: {
		symbols.NT_RepRule0x, 1, 0, 
		symbols.Symbols{ 
		}, 
		RepRule0x1R0, 
	},
	Rule0R0: {
		symbols.NT_Rule, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_EQUAL, 
			symbols.NT_Choice,
		}, 
		Rule0R0, 
	},
	Rule0R1: {
		symbols.NT_Rule, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_EQUAL, 
			symbols.NT_Choice,
		}, 
		Rule0R1, 
	},
	Rule0R2: {
		symbols.NT_Rule, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_EQUAL, 
			symbols.NT_Choice,
		}, 
		Rule0R2, 
	},
	Rule0R3: {
		symbols.NT_Rule, 0, 3, 
		symbols.Symbols{  
			symbols.NT_Identifier, 
			symbols.NT_EQUAL, 
			symbols.NT_Choice,
		}, 
		Rule0R3, 
	},
	STAR0R0: {
		symbols.NT_STAR, 0, 0, 
		symbols.Symbols{  
			symbols.T_4, 
			symbols.NT_WS,
		}, 
		STAR0R0, 
	},
	STAR0R1: {
		symbols.NT_STAR, 0, 1, 
		symbols.Symbols{  
			symbols.T_4, 
			symbols.NT_WS,
		}, 
		STAR0R1, 
	},
	STAR0R2: {
		symbols.NT_STAR, 0, 2, 
		symbols.Symbols{  
			symbols.T_4, 
			symbols.NT_WS,
		}, 
		STAR0R2, 
	},
	Sequence0R0: {
		symbols.NT_Sequence, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		Sequence0R0, 
	},
	Sequence0R1: {
		symbols.NT_Sequence, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		Sequence0R1, 
	},
	Sequence0R2: {
		symbols.NT_Sequence, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Expression, 
			symbols.NT_RepExpr0x,
		}, 
		Sequence0R2, 
	},
	SpaceOrComment0R0: {
		symbols.NT_SpaceOrComment, 0, 0, 
		symbols.Symbols{  
			symbols.T_22,
		}, 
		SpaceOrComment0R0, 
	},
	SpaceOrComment0R1: {
		symbols.NT_SpaceOrComment, 0, 1, 
		symbols.Symbols{  
			symbols.T_22,
		}, 
		SpaceOrComment0R1, 
	},
	SpaceOrComment1R0: {
		symbols.NT_SpaceOrComment, 1, 0, 
		symbols.Symbols{  
			symbols.NT_LineOrBlock,
		}, 
		SpaceOrComment1R0, 
	},
	SpaceOrComment1R1: {
		symbols.NT_SpaceOrComment, 1, 1, 
		symbols.Symbols{  
			symbols.NT_LineOrBlock,
		}, 
		SpaceOrComment1R1, 
	},
	String0R0: {
		symbols.NT_String, 0, 0, 
		symbols.Symbols{  
			symbols.NT_Character, 
			symbols.NT_String,
		}, 
		String0R0, 
	},
	String0R1: {
		symbols.NT_String, 0, 1, 
		symbols.Symbols{  
			symbols.NT_Character, 
			symbols.NT_String,
		}, 
		String0R1, 
	},
	String0R2: {
		symbols.NT_String, 0, 2, 
		symbols.Symbols{  
			symbols.NT_Character, 
			symbols.NT_String,
		}, 
		String0R2, 
	},
	String1R0: {
		symbols.NT_String, 1, 0, 
		symbols.Symbols{ 
		}, 
		String1R0, 
	},
	StringLiteral0R0: {
		symbols.NT_StringLiteral, 0, 0, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.NT_String, 
			symbols.T_13, 
			symbols.NT_WS,
		}, 
		StringLiteral0R0, 
	},
	StringLiteral0R1: {
		symbols.NT_StringLiteral, 0, 1, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.NT_String, 
			symbols.T_13, 
			symbols.NT_WS,
		}, 
		StringLiteral0R1, 
	},
	StringLiteral0R2: {
		symbols.NT_StringLiteral, 0, 2, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.NT_String, 
			symbols.T_13, 
			symbols.NT_WS,
		}, 
		StringLiteral0R2, 
	},
	StringLiteral0R3: {
		symbols.NT_StringLiteral, 0, 3, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.NT_String, 
			symbols.T_13, 
			symbols.NT_WS,
		}, 
		StringLiteral0R3, 
	},
	StringLiteral0R4: {
		symbols.NT_StringLiteral, 0, 4, 
		symbols.Symbols{  
			symbols.T_13, 
			symbols.NT_String, 
			symbols.T_13, 
			symbols.NT_WS,
		}, 
		StringLiteral0R4, 
	},
	UnclosedChar0R0: {
		symbols.NT_UnclosedChar, 0, 0, 
		symbols.Symbols{  
			symbols.T_20, 
			symbols.NT_Character,
		}, 
		UnclosedChar0R0, 
	},
	UnclosedChar0R1: {
		symbols.NT_UnclosedChar, 0, 1, 
		symbols.Symbols{  
			symbols.T_20, 
			symbols.NT_Character,
		}, 
		UnclosedChar0R1, 
	},
	UnclosedChar0R2: {
		symbols.NT_UnclosedChar, 0, 2, 
		symbols.Symbols{  
			symbols.T_20, 
			symbols.NT_Character,
		}, 
		UnclosedChar0R2, 
	},
	UnclosedChars0R0: {
		symbols.NT_UnclosedChars, 0, 0, 
		symbols.Symbols{  
			symbols.NT_UnclosedChar, 
			symbols.NT_UnclosedChars,
		}, 
		UnclosedChars0R0, 
	},
	UnclosedChars0R1: {
		symbols.NT_UnclosedChars, 0, 1, 
		symbols.Symbols{  
			symbols.NT_UnclosedChar, 
			symbols.NT_UnclosedChars,
		}, 
		UnclosedChars0R1, 
	},
	UnclosedChars0R2: {
		symbols.NT_UnclosedChars, 0, 2, 
		symbols.Symbols{  
			symbols.NT_UnclosedChar, 
			symbols.NT_UnclosedChars,
		}, 
		UnclosedChars0R2, 
	},
	UnclosedChars1R0: {
		symbols.NT_UnclosedChars, 1, 0, 
		symbols.Symbols{ 
		}, 
		UnclosedChars1R0, 
	},
	WS0R0: {
		symbols.NT_WS, 0, 0, 
		symbols.Symbols{  
			symbols.NT_SpaceOrComment, 
			symbols.NT_WS,
		}, 
		WS0R0, 
	},
	WS0R1: {
		symbols.NT_WS, 0, 1, 
		symbols.Symbols{  
			symbols.NT_SpaceOrComment, 
			symbols.NT_WS,
		}, 
		WS0R1, 
	},
	WS0R2: {
		symbols.NT_WS, 0, 2, 
		symbols.Symbols{  
			symbols.NT_SpaceOrComment, 
			symbols.NT_WS,
		}, 
		WS0R2, 
	},
	WS1R0: {
		symbols.NT_WS, 1, 0, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		WS1R0, 
	},
	WS1R1: {
		symbols.NT_WS, 1, 1, 
		symbols.Symbols{  
			symbols.NT_EMPTY,
		}, 
		WS1R1, 
	},
}

var slotIndex = map[Index]Label { 
	Index{ symbols.NT_AND,0,0 }: AND0R0,
	Index{ symbols.NT_AND,0,1 }: AND0R1,
	Index{ symbols.NT_AND,0,2 }: AND0R2,
	Index{ symbols.NT_ANY,0,0 }: ANY0R0,
	Index{ symbols.NT_ANY,0,1 }: ANY0R1,
	Index{ symbols.NT_ANY,0,2 }: ANY0R2,
	Index{ symbols.NT_CLOSE,0,0 }: CLOSE0R0,
	Index{ symbols.NT_CLOSE,0,1 }: CLOSE0R1,
	Index{ symbols.NT_CLOSE,0,2 }: CLOSE0R2,
	Index{ symbols.NT_CharClass,0,0 }: CharClass0R0,
	Index{ symbols.NT_CharClass,0,1 }: CharClass0R1,
	Index{ symbols.NT_CharClass,0,2 }: CharClass0R2,
	Index{ symbols.NT_CharClass,0,3 }: CharClass0R3,
	Index{ symbols.NT_CharClass,0,4 }: CharClass0R4,
	Index{ symbols.NT_CharLiteral,0,0 }: CharLiteral0R0,
	Index{ symbols.NT_CharLiteral,0,1 }: CharLiteral0R1,
	Index{ symbols.NT_CharLiteral,0,2 }: CharLiteral0R2,
	Index{ symbols.NT_CharLiteral,0,3 }: CharLiteral0R3,
	Index{ symbols.NT_Character,0,0 }: Character0R0,
	Index{ symbols.NT_Character,0,1 }: Character0R1,
	Index{ symbols.NT_Character,1,0 }: Character1R0,
	Index{ symbols.NT_Character,1,1 }: Character1R1,
	Index{ symbols.NT_Choice,0,0 }: Choice0R0,
	Index{ symbols.NT_Choice,0,1 }: Choice0R1,
	Index{ symbols.NT_Choice,0,2 }: Choice0R2,
	Index{ symbols.NT_EMPTY,0,0 }: EMPTY0R0,
	Index{ symbols.NT_EMPTY,0,1 }: EMPTY0R1,
	Index{ symbols.NT_EMPTY,0,2 }: EMPTY0R2,
	Index{ symbols.NT_EQUAL,0,0 }: EQUAL0R0,
	Index{ symbols.NT_EQUAL,0,1 }: EQUAL0R1,
	Index{ symbols.NT_EQUAL,0,2 }: EQUAL0R2,
	Index{ symbols.NT_Expression,0,0 }: Expression0R0,
	Index{ symbols.NT_Expression,0,1 }: Expression0R1,
	Index{ symbols.NT_Expression,0,2 }: Expression0R2,
	Index{ symbols.NT_Expression,1,0 }: Expression1R0,
	Index{ symbols.NT_Expression,1,1 }: Expression1R1,
	Index{ symbols.NT_Expression,1,2 }: Expression1R2,
	Index{ symbols.NT_Expression,2,0 }: Expression2R0,
	Index{ symbols.NT_Expression,2,1 }: Expression2R1,
	Index{ symbols.NT_Expression,2,2 }: Expression2R2,
	Index{ symbols.NT_Grammar,0,0 }: Grammar0R0,
	Index{ symbols.NT_Grammar,0,1 }: Grammar0R1,
	Index{ symbols.NT_Grammar,0,2 }: Grammar0R2,
	Index{ symbols.NT_Grammar,0,3 }: Grammar0R3,
	Index{ symbols.NT_Identifier,0,0 }: Identifier0R0,
	Index{ symbols.NT_Identifier,0,1 }: Identifier0R1,
	Index{ symbols.NT_Identifier,0,2 }: Identifier0R2,
	Index{ symbols.NT_Identifier,0,3 }: Identifier0R3,
	Index{ symbols.NT_LetOrNum,0,0 }: LetOrNum0R0,
	Index{ symbols.NT_LetOrNum,0,1 }: LetOrNum0R1,
	Index{ symbols.NT_LetOrNum,1,0 }: LetOrNum1R0,
	Index{ symbols.NT_LetOrNum,1,1 }: LetOrNum1R1,
	Index{ symbols.NT_LetOrNum,2,0 }: LetOrNum2R0,
	Index{ symbols.NT_LetOrNum,2,1 }: LetOrNum2R1,
	Index{ symbols.NT_LetOrNum0x,0,0 }: LetOrNum0x0R0,
	Index{ symbols.NT_LetOrNum0x,0,1 }: LetOrNum0x0R1,
	Index{ symbols.NT_LetOrNum0x,0,2 }: LetOrNum0x0R2,
	Index{ symbols.NT_LetOrNum0x,1,0 }: LetOrNum0x1R0,
	Index{ symbols.NT_LetOrNum0x,1,1 }: LetOrNum0x1R1,
	Index{ symbols.NT_LetWS,0,0 }: LetWS0R0,
	Index{ symbols.NT_LetWS,0,1 }: LetWS0R1,
	Index{ symbols.NT_LetWS,1,0 }: LetWS1R0,
	Index{ symbols.NT_LetWS,1,1 }: LetWS1R1,
	Index{ symbols.NT_LineOrBlock,0,0 }: LineOrBlock0R0,
	Index{ symbols.NT_LineOrBlock,0,1 }: LineOrBlock0R1,
	Index{ symbols.NT_LineOrBlock,1,0 }: LineOrBlock1R0,
	Index{ symbols.NT_LineOrBlock,1,1 }: LineOrBlock1R1,
	Index{ symbols.NT_NEQUAL,0,0 }: NEQUAL0R0,
	Index{ symbols.NT_NEQUAL,0,1 }: NEQUAL0R1,
	Index{ symbols.NT_NEQUAL,0,2 }: NEQUAL0R2,
	Index{ symbols.NT_NOT,0,0 }: NOT0R0,
	Index{ symbols.NT_NOT,0,1 }: NOT0R1,
	Index{ symbols.NT_NOT,0,2 }: NOT0R2,
	Index{ symbols.NT_OPEN,0,0 }: OPEN0R0,
	Index{ symbols.NT_OPEN,0,1 }: OPEN0R1,
	Index{ symbols.NT_OPEN,0,2 }: OPEN0R2,
	Index{ symbols.NT_OPT,0,0 }: OPT0R0,
	Index{ symbols.NT_OPT,0,1 }: OPT0R1,
	Index{ symbols.NT_OPT,0,2 }: OPT0R2,
	Index{ symbols.NT_OptStarPlus,0,0 }: OptStarPlus0R0,
	Index{ symbols.NT_OptStarPlus,0,1 }: OptStarPlus0R1,
	Index{ symbols.NT_OptStarPlus,1,0 }: OptStarPlus1R0,
	Index{ symbols.NT_OptStarPlus,1,1 }: OptStarPlus1R1,
	Index{ symbols.NT_OptStarPlus,2,0 }: OptStarPlus2R0,
	Index{ symbols.NT_OptStarPlus,2,1 }: OptStarPlus2R1,
	Index{ symbols.NT_OptStarPlus,3,0 }: OptStarPlus3R0,
	Index{ symbols.NT_PIPE,0,0 }: PIPE0R0,
	Index{ symbols.NT_PIPE,0,1 }: PIPE0R1,
	Index{ symbols.NT_PIPE,0,2 }: PIPE0R2,
	Index{ symbols.NT_PLUS,0,0 }: PLUS0R0,
	Index{ symbols.NT_PLUS,0,1 }: PLUS0R1,
	Index{ symbols.NT_PLUS,0,2 }: PLUS0R2,
	Index{ symbols.NT_Primary,0,0 }: Primary0R0,
	Index{ symbols.NT_Primary,0,1 }: Primary0R1,
	Index{ symbols.NT_Primary,0,2 }: Primary0R2,
	Index{ symbols.NT_Primary,1,0 }: Primary1R0,
	Index{ symbols.NT_Primary,1,1 }: Primary1R1,
	Index{ symbols.NT_Primary,1,2 }: Primary1R2,
	Index{ symbols.NT_Primary,1,3 }: Primary1R3,
	Index{ symbols.NT_Primary,2,0 }: Primary2R0,
	Index{ symbols.NT_Primary,2,1 }: Primary2R1,
	Index{ symbols.NT_Primary,3,0 }: Primary3R0,
	Index{ symbols.NT_Primary,3,1 }: Primary3R1,
	Index{ symbols.NT_Primary,4,0 }: Primary4R0,
	Index{ symbols.NT_Primary,4,1 }: Primary4R1,
	Index{ symbols.NT_Primary,5,0 }: Primary5R0,
	Index{ symbols.NT_Primary,5,1 }: Primary5R1,
	Index{ symbols.NT_Primary,6,0 }: Primary6R0,
	Index{ symbols.NT_Primary,6,1 }: Primary6R1,
	Index{ symbols.NT_RepExpr0x,0,0 }: RepExpr0x0R0,
	Index{ symbols.NT_RepExpr0x,0,1 }: RepExpr0x0R1,
	Index{ symbols.NT_RepExpr0x,0,2 }: RepExpr0x0R2,
	Index{ symbols.NT_RepExpr0x,1,0 }: RepExpr0x1R0,
	Index{ symbols.NT_RepPipedSeq0x,0,0 }: RepPipedSeq0x0R0,
	Index{ symbols.NT_RepPipedSeq0x,0,1 }: RepPipedSeq0x0R1,
	Index{ symbols.NT_RepPipedSeq0x,0,2 }: RepPipedSeq0x0R2,
	Index{ symbols.NT_RepPipedSeq0x,0,3 }: RepPipedSeq0x0R3,
	Index{ symbols.NT_RepPipedSeq0x,1,0 }: RepPipedSeq0x1R0,
	Index{ symbols.NT_RepRule0x,0,0 }: RepRule0x0R0,
	Index{ symbols.NT_RepRule0x,0,1 }: RepRule0x0R1,
	Index{ symbols.NT_RepRule0x,0,2 }: RepRule0x0R2,
	Index{ symbols.NT_RepRule0x,1,0 }: RepRule0x1R0,
	Index{ symbols.NT_Rule,0,0 }: Rule0R0,
	Index{ symbols.NT_Rule,0,1 }: Rule0R1,
	Index{ symbols.NT_Rule,0,2 }: Rule0R2,
	Index{ symbols.NT_Rule,0,3 }: Rule0R3,
	Index{ symbols.NT_STAR,0,0 }: STAR0R0,
	Index{ symbols.NT_STAR,0,1 }: STAR0R1,
	Index{ symbols.NT_STAR,0,2 }: STAR0R2,
	Index{ symbols.NT_Sequence,0,0 }: Sequence0R0,
	Index{ symbols.NT_Sequence,0,1 }: Sequence0R1,
	Index{ symbols.NT_Sequence,0,2 }: Sequence0R2,
	Index{ symbols.NT_SpaceOrComment,0,0 }: SpaceOrComment0R0,
	Index{ symbols.NT_SpaceOrComment,0,1 }: SpaceOrComment0R1,
	Index{ symbols.NT_SpaceOrComment,1,0 }: SpaceOrComment1R0,
	Index{ symbols.NT_SpaceOrComment,1,1 }: SpaceOrComment1R1,
	Index{ symbols.NT_String,0,0 }: String0R0,
	Index{ symbols.NT_String,0,1 }: String0R1,
	Index{ symbols.NT_String,0,2 }: String0R2,
	Index{ symbols.NT_String,1,0 }: String1R0,
	Index{ symbols.NT_StringLiteral,0,0 }: StringLiteral0R0,
	Index{ symbols.NT_StringLiteral,0,1 }: StringLiteral0R1,
	Index{ symbols.NT_StringLiteral,0,2 }: StringLiteral0R2,
	Index{ symbols.NT_StringLiteral,0,3 }: StringLiteral0R3,
	Index{ symbols.NT_StringLiteral,0,4 }: StringLiteral0R4,
	Index{ symbols.NT_UnclosedChar,0,0 }: UnclosedChar0R0,
	Index{ symbols.NT_UnclosedChar,0,1 }: UnclosedChar0R1,
	Index{ symbols.NT_UnclosedChar,0,2 }: UnclosedChar0R2,
	Index{ symbols.NT_UnclosedChars,0,0 }: UnclosedChars0R0,
	Index{ symbols.NT_UnclosedChars,0,1 }: UnclosedChars0R1,
	Index{ symbols.NT_UnclosedChars,0,2 }: UnclosedChars0R2,
	Index{ symbols.NT_UnclosedChars,1,0 }: UnclosedChars1R0,
	Index{ symbols.NT_WS,0,0 }: WS0R0,
	Index{ symbols.NT_WS,0,1 }: WS0R1,
	Index{ symbols.NT_WS,0,2 }: WS0R2,
	Index{ symbols.NT_WS,1,0 }: WS1R0,
	Index{ symbols.NT_WS,1,1 }: WS1R1,
}

var alternates = map[symbols.NT][]Label{ 
	symbols.NT_Grammar:[]Label{ Grammar0R0 },
	symbols.NT_RepRule0x:[]Label{ RepRule0x0R0,RepRule0x1R0 },
	symbols.NT_Rule:[]Label{ Rule0R0 },
	symbols.NT_Choice:[]Label{ Choice0R0 },
	symbols.NT_RepPipedSeq0x:[]Label{ RepPipedSeq0x0R0,RepPipedSeq0x1R0 },
	symbols.NT_Sequence:[]Label{ Sequence0R0 },
	symbols.NT_RepExpr0x:[]Label{ RepExpr0x0R0,RepExpr0x1R0 },
	symbols.NT_Expression:[]Label{ Expression0R0,Expression1R0,Expression2R0 },
	symbols.NT_OptStarPlus:[]Label{ OptStarPlus0R0,OptStarPlus1R0,OptStarPlus2R0,OptStarPlus3R0 },
	symbols.NT_Primary:[]Label{ Primary0R0,Primary1R0,Primary2R0,Primary3R0,Primary4R0,Primary5R0,Primary6R0 },
	symbols.NT_Identifier:[]Label{ Identifier0R0 },
	symbols.NT_LetWS:[]Label{ LetWS0R0,LetWS1R0 },
	symbols.NT_LetOrNum0x:[]Label{ LetOrNum0x0R0,LetOrNum0x1R0 },
	symbols.NT_LetOrNum:[]Label{ LetOrNum0R0,LetOrNum1R0,LetOrNum2R0 },
	symbols.NT_StringLiteral:[]Label{ StringLiteral0R0 },
	symbols.NT_String:[]Label{ String0R0,String1R0 },
	symbols.NT_CharLiteral:[]Label{ CharLiteral0R0 },
	symbols.NT_CharClass:[]Label{ CharClass0R0 },
	symbols.NT_UnclosedChars:[]Label{ UnclosedChars0R0,UnclosedChars1R0 },
	symbols.NT_UnclosedChar:[]Label{ UnclosedChar0R0 },
	symbols.NT_Character:[]Label{ Character0R0,Character1R0 },
	symbols.NT_EQUAL:[]Label{ EQUAL0R0 },
	symbols.NT_NEQUAL:[]Label{ NEQUAL0R0 },
	symbols.NT_PIPE:[]Label{ PIPE0R0 },
	symbols.NT_AND:[]Label{ AND0R0 },
	symbols.NT_NOT:[]Label{ NOT0R0 },
	symbols.NT_OPT:[]Label{ OPT0R0 },
	symbols.NT_STAR:[]Label{ STAR0R0 },
	symbols.NT_PLUS:[]Label{ PLUS0R0 },
	symbols.NT_OPEN:[]Label{ OPEN0R0 },
	symbols.NT_CLOSE:[]Label{ CLOSE0R0 },
	symbols.NT_ANY:[]Label{ ANY0R0 },
	symbols.NT_EMPTY:[]Label{ EMPTY0R0 },
	symbols.NT_WS:[]Label{ WS0R0,WS1R0 },
	symbols.NT_SpaceOrComment:[]Label{ SpaceOrComment0R0,SpaceOrComment1R0 },
	symbols.NT_LineOrBlock:[]Label{ LineOrBlock0R0,LineOrBlock1R0 },
}

